<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小程序制作流程</title>
    <url>/posts/2aa2ccb8/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文描述的是小程序制作的整个流程，以及在小程序制作时遇到的问题的注意事项。 </p>
<span id="more"></span>
<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>小程序的开发主要分为四步，首先注册一个开发账号，然后在注册的时候进行信息的完善，再然后就可以下载开发工具后进行开发了，最后就是开发完成的小程序进行提交审核和发布，小程序的开发的整个流程图下图所示：<br><img src="/posts/2aa2ccb8/%E6%B5%81%E7%A8%8B.png">  </p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><ol>
<li><p>进入到 <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a> 页面，点击右上角的立即注册，如图所示：<br><img src="/posts/2aa2ccb8/%E6%B3%A8%E5%86%8C.png"></p>
</li>
<li><p>选择注册类型，选择“小程序”，点击“查看类型区别”可查看不同类型帐号的区别和优势，如图所示：<br><img src="/posts/2aa2ccb8/%E6%B3%A8%E5%86%8C%E7%B1%BB%E5%9E%8B.png"></p>
</li>
<li><p>进行注册，邮箱激活和信息的完善，根据页面的提示进行操作即可，如图所示：<br><img src="/posts/2aa2ccb8/%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%86%8C.png">  </p>
</li>
</ol>
<p>注意：在进行信息登记的时候，选择主题类型处一般选择个人，选择企业的话要收费<br>好啦，到这里小程序开发账号注册完成啦，可以到刚才的注册的步骤一的页面去登录啦！  </p>
<h3 id="小程序信息完善"><a href="#小程序信息完善" class="headerlink" title="小程序信息完善"></a>小程序信息完善</h3><ol>
<li><p>登录后进入到首页，如图所示：<br><img src="/posts/2aa2ccb8/%E7%99%BB%E5%BD%95%E5%90%8E.png"></p>
</li>
<li><p>点击小程序信息的填写按钮进行信息完善，如图所示：<br><img src="/posts/2aa2ccb8/%E4%BF%A1%E6%81%AF%E5%AE%8C%E5%96%84.png">  </p>
</li>
</ol>
<h3 id="小程序的开发"><a href="#小程序的开发" class="headerlink" title="小程序的开发"></a>小程序的开发</h3><ol>
<li>下载小程序开发者工具<br>地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</a><br>具体如图所示：<br><img src="/posts/2aa2ccb8/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.png">  </li>
</ol>
<p>下载完成后进行安装，直接不听下一步就行，如果想要改变安装地址，直接改变即可。<br>2. 双击小程序进行登录，如图所示：<br><img src="/posts/2aa2ccb8/%E7%99%BB%E5%BD%95.png">  </p>
<ol start="3">
<li><p>选择小程序，点击加好创建小程序项目，如图所示：<br><img src="/posts/2aa2ccb8/%E5%88%9B%E5%BB%BA%E6%96%B0%E9%A1%B9%E7%9B%AE.png">  </p>
</li>
<li><p>填写项目基本信息，如图所示：<br><img src="/posts/2aa2ccb8/%E5%88%9B%E5%BB%BA.png">  </p>
</li>
</ol>
<p>appID获取如图所示：<br><img src="/posts/2aa2ccb8/appID.png">  </p>
<p>注意还有个模板选择，如图所示：<br><img src="/posts/2aa2ccb8/%E6%A8%A1%E6%9D%BF%E9%80%89%E6%8B%A9.png">  </p>
<ol start="5">
<li><p>到这里小程序的项目就创建成功啦，我们可以进行开发啦，创建成功界面如图所示：<br><img src="/posts/2aa2ccb8/%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F.png">  </p>
</li>
<li><p>目录结构介绍<br><img src="/posts/2aa2ccb8/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png">  </p>
</li>
<li><p>文件的创建，如图所示：<br><img src="/posts/2aa2ccb8/appjs%E6%96%87%E4%BB%B6.png">  </p>
</li>
</ol>
<p>当然你也可以手动进行创建。<br>8. center.js简介  </p>
<ul>
<li><p>data{}：<br><img src="/posts/2aa2ccb8/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8.png">  </p>
</li>
<li><p>三个方法的调用顺序 onload–&gt;onShow–&gt;onReady<br><img src="/posts/2aa2ccb8/%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F.png">  </p>
</li>
</ul>
<ol start="9">
<li><p>app.js简介<br><img src="/posts/2aa2ccb8/appjs%E4%BB%8B%E7%BB%8D.png">  </p>
</li>
<li><p>域名校验<br><img src="/posts/2aa2ccb8/%E5%9F%9F%E5%90%8D%E6%A0%A1%E9%AA%8C.png">  </p>
</li>
</ol>
<p>好啦，小程序开发就介绍到这里啦，想要了解更多，可以参考官方文档。<br>官方文档地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a>  </p>
<h3 id="审核和发布"><a href="#审核和发布" class="headerlink" title="审核和发布"></a>审核和发布</h3><ol>
<li><p>点击上传，如图所示<br><img src="/posts/2aa2ccb8/%E4%B8%8A%E4%BC%A0.png">  </p>
</li>
<li><p>具体的审核和发布可参考：<a href="https://zhuanlan.zhihu.com/p/39936955">https://zhuanlan.zhihu.com/p/39936955</a>  </p>
</li>
</ol>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li><p>添加开发成员和体验成员在成员管理中进行添加<br><img src="/posts/2aa2ccb8/%E6%88%90%E5%91%98%E7%AE%A1%E7%90%86.png">  </p>
</li>
<li><p>体验版本扫码后页面不能跳转，一般是因为请求地址不规范，要用https才是规范的（不能发起请求然后不能进行页面跳转，可以尝试下面的方法） </p>
</li>
</ol>
<ul>
<li><p>解决方法一：进行ip白名单的配置  </p>
<ul>
<li><p>登录微信小程序的后台，点击开发管理–&gt;开发设置，如图所示：<br><img src="/posts/2aa2ccb8/%E5%BC%80%E5%8F%91%E8%AE%BE%E7%BD%AE.png">  </p>
</li>
<li><p>找到ip白名单或者服务器域名进行配置，如图所示：<br><img src="/posts/2aa2ccb8/%E5%9C%B0%E5%9D%80%E7%99%BD%E5%90%8D%E5%8D%95.png">  </p>
</li>
</ul>
<p>  如果方法一不成功，可以尝试第二种方法</p>
</li>
<li><p>解决方法二：打开手机调试模式后就能够进行跳转了  </p>
<ul>
<li><p>找到打开调试的地方<br><img src="/posts/2aa2ccb8/%E8%B0%83%E8%AF%951.png">  </p>
</li>
<li><p>打开调试(此处我已经打开)<br><img src="/posts/2aa2ccb8/%E8%B0%83%E8%AF%952.png">  </p>
</li>
<li><p>打开调试成功<br><img src="/posts/2aa2ccb8/%E8%B0%83%E8%AF%953.png">  </p>
</li>
</ul>
</li>
</ul>
<ol start="3">
<li>使用微信小程序进行版本管理时推送失败<br><img src="/posts/2aa2ccb8/%E6%8E%A8%E9%80%81%E5%A4%B1%E8%B4%A5.png">  </li>
</ol>
<p>解决方法：<br><img src="/posts/2aa2ccb8/%E6%8E%A8%E9%80%81%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3.png">  </p>
<ol start="4">
<li><p>版本管理时没有项目<br><img src="/posts/2aa2ccb8/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86.png"><br><img src="/posts/2aa2ccb8/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png">  </p>
</li>
<li><p>项目拉取不下来<br><img src="/posts/2aa2ccb8/%E9%A1%B9%E7%9B%AE%E6%8B%89%E5%8F%96.png">  </p>
</li>
</ol>
<p>选择从git导入<br><img src="/posts/2aa2ccb8/git%E5%AF%BC%E5%85%A5.png">  </p>
<ol start="6">
<li><p>微信git账号的创建<br>地址：<a href="https://git.weixin.qq.com/">https://git.weixin.qq.com/</a>  </p>
</li>
<li><p>真机调试控制台报错，可以切换成真机调试1.0版本进行<br><img src="/posts/2aa2ccb8/%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95.png">  </p>
</li>
</ol>
<h3 id="常用代码参考"><a href="#常用代码参考" class="headerlink" title="常用代码参考"></a>常用代码参考</h3><ol>
<li>请求方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">    <span class="attr">url</span>: ,</span><br><span class="line">    data: &#123;<span class="comment">//url参数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, </span><br><span class="line">    success (res1) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>页面跳转方法  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保留当前页面，跳转到应用的某个页面，点击返回按钮时还可以返回原来页面,不能跳转到tabBar页面</span></span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;文件地址&#x27;</span>,    地址后面也可以追加参数  <span class="string">&#x27;page/index/index?id=123&amp;page=2&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 关闭当前页面，跳转到应用内的某个页面。  点击返回按钮时不会返回原来页面</span></span><br><span class="line">wx.redirectTo(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;page/index/index?id=123&amp;page=2&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 关闭所有页面，打开到应用内的某个页面。</span></span><br><span class="line">wx.reLanch(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;page/index/index?id=123&amp;page=2&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</span></span><br><span class="line"><span class="comment">// 注意：必须是在app.json中注册过的tabBar 页面</span></span><br><span class="line">wx.switchTab(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;page/index/index&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>弹窗<br>地址：<a href="https://blog.csdn.net/qq_43248623/article/details/106421617">https://blog.csdn.net/qq_43248623/article/details/106421617</a>  </li>
</ol>
<p>本文到此结束啦！</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>微信公众号测试步骤</title>
    <url>/posts/aab1e47f/</url>
    <content><![CDATA[<p>本文记录一下使用微信公众号进行测试的步骤，避免以后忘记。</p>
<span id="more"></span>
<ul>
<li><p>首先搜索“微信公众号”，然后点击“微信公众号平台”，如下图所示：<br><img src="/posts/aab1e47f/01.png">  </p>
</li>
<li><p>在左边菜单栏中点击“开发者工具”，然后在右边点击“公众平台测试账号”，如图所示：<br><img src="/posts/aab1e47f/02.png">  </p>
</li>
<li><p>点击“公众平台测试”之后，是需要管理员使用微信扫码或密码登录的，如图所示：<br><img src="/posts/aab1e47f/09.png">  </p>
</li>
<li><p>扫码登录之后可以看到相关的测试号的appID和appsecret信息，如图所示：<br><img src="/posts/aab1e47f/03.png">  </p>
</li>
<li><p>使用appID和appsecret信息在对应的项目的配置文件中进行四个相应的配置，如图所示：<br><img src="/posts/aab1e47f/04.png"><br>urlencode转换网站：<a href="https://tool.chinaz.com/tools/urlencode.aspx">https://tool.chinaz.com/tools/urlencode.aspx</a></p>
</li>
<li><p>回到“微信公众号平台”中对“js接口安全域名进行修改”，如图所示：<br><img src="/posts/aab1e47f/05.png">  </p>
</li>
<li><p>在进行测试前要先扫码关注测试公众号，如图所示：<br><img src="/posts/aab1e47f/06.png">  </p>
</li>
<li><p>然后对网页账号进行修改，如图所示：<br><img src="/posts/aab1e47f/07.png">  </p>
</li>
</ul>
<p><img src="/posts/aab1e47f/08.png">  </p>
<ul>
<li>最后搜索“微信公众号开发工具”，然后在公众号设置中点击功能设计，再点击下载，下载对应的公众号开发工具，登录，访问对应的网址就可以啦，如图所示：</li>
</ul>
<p><img src="/posts/aab1e47f/10.png">  </p>
<p><img src="/posts/aab1e47f/11.png">  </p>
<ul>
<li>结合微信公众号的绑定测试步骤，我们再来看一下微信公众号域名绑定的步骤吧！步骤和测试的步骤差不多：  </li>
</ul>
<ol>
<li><p>搜索微信公众平台进行登录<br><img src="/posts/aab1e47f/%E7%99%BB%E5%BD%95.png"></p>
</li>
<li><p>在js接口安全域名和网页授权域名处添加上要绑定的域名<br><img src="/posts/aab1e47f/%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0.png"></p>
</li>
<li><p>在基本配置中进行基本的配置<br><img src="/posts/aab1e47f/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.png"></p>
</li>
<li><p>在配置文件中进行appID、Secret和host的配置<br><img src="/posts/aab1e47f/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.png">  </p>
</li>
</ol>
<p>配置完成!  </p>
<hr>
<p>公众号测试步骤到此结束，如果觉得有帮助，可以打赏一波哦！</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树遍历完整代码</title>
    <url>/posts/297fb2ac/</url>
    <content><![CDATA[<p>代码包括先序遍历、中序遍历、后序遍历、层序遍历、求树的高度、求叶子结点的方法，代码实现如下： </p>
<span id="more"></span> 
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="comment">//定义一个数的节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">	ElementType Data;</span><br><span class="line">	BinTree left;</span><br><span class="line">	BinTree right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//递归前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BinTree bt)</span></span>;</span><br><span class="line"><span class="comment">//非递归前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal01</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal01</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//递归后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//非递归后序遍历01</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal01</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//非递归后序遍历02</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal02</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraversal</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//输出叶子节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindLeaves</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//求树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTreeHeight</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BinTree a = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">	BinTree b = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">	BinTree c = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">	BinTree d = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">	BinTree e = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">	BinTree f = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">	BinTree g = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">	BinTree h = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">	BinTree i = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">	a-&gt;Data = <span class="number">1</span>;</span><br><span class="line">	a-&gt;left = b;</span><br><span class="line">	a-&gt;right = c;</span><br><span class="line">	b-&gt;Data = <span class="number">2</span>;</span><br><span class="line">	b-&gt;left = d;</span><br><span class="line">	b-&gt;right = f;</span><br><span class="line">	d-&gt;Data = <span class="number">4</span>;</span><br><span class="line">	d-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">	d-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">	f-&gt;Data = <span class="number">6</span>;</span><br><span class="line">	f-&gt;left = e;</span><br><span class="line">	f-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">	e-&gt;Data = <span class="number">5</span>;</span><br><span class="line">	e-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">	e-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">	c-&gt;Data = <span class="number">3</span>;</span><br><span class="line">	c-&gt;left = g;</span><br><span class="line">	c-&gt;right = i;</span><br><span class="line">	g-&gt;Data = <span class="number">7</span>;</span><br><span class="line">	g-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">	g-&gt;right = h;</span><br><span class="line">	h-&gt;Data = <span class="number">8</span>;</span><br><span class="line">	h-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">	h-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">	i-&gt;Data = <span class="number">9</span>;</span><br><span class="line">	i-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">	i-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	PreOrderTraversal(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	PreOrderTraversal01(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	InOrderTraversal(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	InOrderTraversal01(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	PostOrderTraversal(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	PostOrderTraversal01(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	PostOrderTraversal02(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	LevelOrderTraversal(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	FindLeaves(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> height;</span><br><span class="line">	height = GetTreeHeight(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, height);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BinTree bt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (bt) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, bt-&gt;Data); <span class="comment">//先打印根</span></span><br><span class="line">		PreOrderTraversal(bt-&gt;left);<span class="comment">//然后进入左子树</span></span><br><span class="line">		PreOrderTraversal(bt-&gt;right);<span class="comment">//再进入右子树</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	BinTree T = BT;</span><br><span class="line">	<span class="built_in">stack</span>&lt;BinTree&gt; S;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (T || !S.empty()) &#123; <span class="comment">// 当树不为空或堆栈不空</span></span><br><span class="line">		<span class="keyword">while</span> (T) &#123;</span><br><span class="line">			S.push(T);   <span class="comment">// 压栈，第一次遇到该结点</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data); <span class="comment">// 访问结点</span></span><br><span class="line">			T = T-&gt;left;   <span class="comment">// 遍历左子树</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!S.empty()) &#123; <span class="comment">// 当堆栈不空</span></span><br><span class="line">			T = S.top();</span><br><span class="line">			S.pop();    <span class="comment">// 出栈，第二次遇到该结点</span></span><br><span class="line">			T = T-&gt;right;  <span class="comment">// 访问右结点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (BT) &#123;</span><br><span class="line">		InOrderTraversal(BT-&gt;left);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">		InOrderTraversal(BT-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	BinTree T = BT;</span><br><span class="line">	<span class="built_in">stack</span>&lt;BinTree&gt; S;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (T || !S.empty()) &#123;</span><br><span class="line">		<span class="keyword">while</span> (T) &#123;</span><br><span class="line">			S.push(T);</span><br><span class="line">			T = T-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!S.empty()) &#123;</span><br><span class="line">			T = S.top();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);</span><br><span class="line">			S.pop();</span><br><span class="line">			T = T-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (BT) &#123;</span><br><span class="line">		PostOrderTraversal(BT-&gt;left);</span><br><span class="line">		PostOrderTraversal(BT-&gt;right);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归后序遍历01</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	BinTree T = BT;</span><br><span class="line">	<span class="built_in">stack</span>&lt;BinTree&gt; S;  <span class="comment">// 创建并初始化堆栈 S</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;BinTree&gt; v;   <span class="comment">// 创建存储树结点的动态数组</span></span><br><span class="line">	S.push(T);  <span class="comment">//先将根节点放入栈中</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//循环中出栈的顺序是后序遍历的反顺序，即遇到根节点，先抛出根节点，然后抛出右节点，最后抛出左节点</span></span><br><span class="line">	<span class="keyword">while</span> (!S.empty()) &#123; <span class="comment">// 当堆栈不空</span></span><br><span class="line">		T = S.top();</span><br><span class="line">		v.push_back(T);  <span class="comment">// 将要出栈元素存进数组</span></span><br><span class="line">		S.pop();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (T-&gt;left)</span><br><span class="line">			S.push(T-&gt;left);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (T-&gt;right)</span><br><span class="line">			S.push(T-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//反顺序输出数组的元素</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = (v.size() - <span class="number">1</span>); i &gt;= <span class="number">0</span>; i--) <span class="comment">// 输出数组元素</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[i]-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归后序遍历02</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  <span class="comment">//定义一个栈</span></span><br><span class="line">	BinTree data[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">&#125; BiStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal02</span><span class="params">(BinTree T)</span> </span>&#123;	<span class="comment">//入栈所有的左子树以及左子树的右子树直到没有可以访问的右子树后退栈。</span></span><br><span class="line">	TreeNode *pre = T;		<span class="comment">//记录上一次退栈的结点</span></span><br><span class="line">	TreeNode *p = T;			<span class="comment">//当前访问结点</span></span><br><span class="line">	BiStack s ;</span><br><span class="line">	s.top = <span class="number">0</span>;    <span class="comment">//定义top指针为0</span></span><br><span class="line">	s.data[s.top] = <span class="literal">NULL</span>;    <span class="comment">//定义栈为空</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*当节点的两边没有被访问过，那么进入节点的左子树，如果节点的左边被</span></span><br><span class="line"><span class="comment">	访问过，那么进入节点的右子树，当节点的左右都为空或者左右都被访问过</span></span><br><span class="line"><span class="comment">	那么就输出当前节点，并将当前节点设置为被访问过，并且将该节点出栈*/</span></span><br><span class="line">	<span class="keyword">while</span> (p || s.top != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p != <span class="literal">NULL</span> &amp;&amp; pre != p-&gt;left &amp;&amp; pre != p-&gt;right) &#123;	<span class="comment">//结点不为空且左孩子和右孩子没有访问过</span></span><br><span class="line">			s.data[++s.top] = p; <span class="comment">//当前节点入栈</span></span><br><span class="line">			p = p-&gt;left;  <span class="comment">//进入左子树</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			p = s.data[s.top];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span> &amp;&amp; pre != p-&gt;right) &#123;	<span class="comment">//右子树不为空且右孩子没有访问过，入栈右子树结点</span></span><br><span class="line">				p = p-&gt;right;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;Data);			<span class="comment">//访问到最后的右子树的结点后，退栈。</span></span><br><span class="line">				pre = s.data[s.top];</span><br><span class="line">				p = s.data[--s.top];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;BinTree&gt; q;</span><br><span class="line">	BinTree T;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!BT) &#123;<span class="comment">//如果树为空，则直接结束函数</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	q.push(BT);<span class="comment">//将树的根节点入队</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;<span class="comment">//知道队列为空，结束循环</span></span><br><span class="line">		T = q.front();<span class="comment">//拿到队列第一个数</span></span><br><span class="line">		q.pop();<span class="comment">//将队列中第一个数出队</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);<span class="comment">//输出拿到的队列第一个数</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (T-&gt;left) &#123;<span class="comment">//如果队列第一个数的左节点不为空，那么将其左节点入队</span></span><br><span class="line">			q.push(T-&gt;left);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (T-&gt;right) &#123;<span class="comment">//如果队列第一个数的右节点不为空，那么将其右节点入队</span></span><br><span class="line">			q.push(T-&gt;right);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出树的叶子结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindLeaves</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (BT) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!BT-&gt;left &amp;&amp; !BT-&gt;right) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">		&#125;<span class="comment">//不管是什么遍历，只要加上左右节点都为空，就可以输出叶子结点了</span></span><br><span class="line"></span><br><span class="line">		FindLeaves(BT-&gt;left);</span><br><span class="line">		FindLeaves(BT-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTreeHeight</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> leftHeight, rightHeight, maxHeight;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (BT) &#123;</span><br><span class="line">		leftHeight = GetTreeHeight(BT-&gt;left);<span class="comment">//求左子树的高度</span></span><br><span class="line">		rightHeight = GetTreeHeight(BT-&gt;right);<span class="comment">//求右子树的高度</span></span><br><span class="line">		maxHeight = (leftHeight &gt; rightHeight) ? leftHeight : rightHeight;</span><br><span class="line">		<span class="keyword">return</span> maxHeight + <span class="number">1</span>;<span class="comment">//当前树的高度为左子树或右子树的高度加1</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-树</title>
    <url>/posts/f30c2ae3/</url>
    <content><![CDATA[<h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>由n个节点构成的有限集合称为树，当n=0时，称为空树。</p>
<span id="more"></span>
<h3 id="树的特征"><a href="#树的特征" class="headerlink" title="树的特征"></a>树的特征</h3><p>对于任意一个非空的树，都有一下特征：  </p>
<ul>
<li>有一个根节点</li>
<li>其余节点可分为互不交集的有限集合，其中每个集合又是一棵树，那么这个集合称为原来树的子树，子树是互不相交的</li>
<li>除了根节点，其他节点中每个节点仅有一个根节点</li>
<li>一棵N个节点的树，他的边有N-1条</li>
</ul>
<h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><ul>
<li>节点的度：一个节点中其子树的个数</li>
<li>树的度：一棵树中节点的度最大的就是这棵树的度</li>
<li>叶节点：度为0的节点</li>
<li>父节点：有子树的这个节点就是那个子树的根节点的父节点</li>
<li>子节点：父节点和子节点是相对的，若A是B的父节点，那么B就是A的子节点</li>
<li>兄弟节点：拥有同一个父节点的所有子节点称为兄弟节点</li>
<li>路径：从一棵树的根节点开始，到树的某个节点所要经过的所有边和节点</li>
<li>路径长度：路径中所包含的边的个数</li>
<li>祖先节点：沿着根节点到这个节点所经过的所有节点都是这个节点的祖先节点</li>
<li>子孙节点：某一节点的子树中的所有节点都是这个节点的子孙节点</li>
<li>节点的层次：一棵树的根节点的层次为1，其他的每一个层次为每一个辈分层次加1 </li>
<li>树的深度：树中最大层次就是这棵树的深度</li>
</ul>
<h3 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h3><ol>
<li>儿子-兄弟表示法<br><img src="/posts/f30c2ae3/%E6%A0%91%E7%9A%84%E8%A1%A8%E7%A4%BA1.jpg"></li>
<li>二叉树表示法<br>即度为2的树<br><img src="/posts/f30c2ae3/%E6%A0%91%E7%9A%84%E8%A1%A8%E7%A4%BA2.jpg"></li>
</ol>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>二叉树是树的一种表示形式，是一个有限的集合，若不为空时，它由根节点和左右子树两个不想交的二叉树组成，二叉树的子树有左右顺序之分</p>
<h4 id="二叉树的五种基本形态"><a href="#二叉树的五种基本形态" class="headerlink" title="二叉树的五种基本形态"></a>二叉树的五种基本形态</h4><p><img src="/posts/f30c2ae3/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%BD%A2%E6%80%81.jpg"></p>
<h4 id="二叉树的特殊形态"><a href="#二叉树的特殊形态" class="headerlink" title="二叉树的特殊形态"></a>二叉树的特殊形态</h4><ol>
<li>斜二叉树：只有左节点或者右节点<br><img src="/posts/f30c2ae3/%E6%96%9C%E4%BA%8C%E5%8F%89%E6%A0%91.jpg"></li>
<li>完美二叉树：(又称满二叉树)除了最后一层的叶子节点，其他每层的节点都有两个子节点<br><img src="/posts/f30c2ae3/%E5%AE%8C%E7%BE%8E%E4%BA%8C%E5%8F%89%E6%A0%91.jpg"></li>
<li>完全二叉树：有 n 个结点的二叉树，对树中结点按从上至下、从左到右顺序进行编号，编号为 i（1 ≤ i ≤ n）结点与满二叉树中编号为 i 结点在二叉树中位置相同<br><img src="/posts/f30c2ae3/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.jpg"></li>
</ol>
<h4 id="二叉树的重要性质"><a href="#二叉树的重要性质" class="headerlink" title="二叉树的重要性质"></a>二叉树的重要性质</h4><ol>
<li>二叉树中第i层的最大节点数为：2^(i-1),i&gt;=1</li>
<li>深度为k的二叉树的最大总结点数为：2^k-1</li>
<li>对于任何非空二叉树，若n0表示空节点，n1表示度为1的节点，n2表示度为2的节点，那么就有n0=n2+1<br><img src="/posts/f30c2ae3/%E5%85%AC%E5%BC%8F.jpg"><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><h5 id="顺序存储结构（使用数组来进行存储）"><a href="#顺序存储结构（使用数组来进行存储）" class="headerlink" title="顺序存储结构（使用数组来进行存储）"></a>顺序存储结构（使用数组来进行存储）</h5>按从上至下，从左至右的顺序进行存储，并对这些节点按照顺序进行编号，他们的父子节点之间的关系为：</li>
</ol>
<ul>
<li>非根节点（序号为i）的父节点的序号是i/2（向下取整）</li>
<li>节点（序号为i）的左孩子节点的序号是2i（当2i&gt;n时，没有左节点）</li>
<li>节点（序号为i）的右孩子节点的序号是2i+1（当2i+1&gt;n时，没有右节点）  </li>
</ul>
<p>如图所示，为使用顺序结构来进行存储的完全二叉树：<br><img src="/posts/f30c2ae3/%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.jpg">  </p>
<p>缺点：当数组不是完全二叉树时，就会使用顺序存储就会出现很多的空间浪费，如图所示：<br><img src="/posts/f30c2ae3/%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A801.jpg"></p>
<h5 id="链表存储"><a href="#链表存储" class="headerlink" title="链表存储"></a>链表存储</h5><p>定义一个节点，节点包括存储的数值和左右节点的地址，定义如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">BinTree</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">	Element Data;  <span class="comment">// 存值 </span></span><br><span class="line">	BinTree Left;    <span class="comment">// 左儿子结点 </span></span><br><span class="line">	BinTree Right;   <span class="comment">// 右儿子结点 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>二叉树的遍历包括先序遍历，中序遍历，后序遍历和层序遍历四种</p>
<h5 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h5><p>先序遍历的过程：根-&gt;左节点-&gt;右节点<br>如图所示：<br><img src="/posts/f30c2ae3/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86.jpg"></p>
<ul>
<li>递归实现<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BinTree bt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (bt) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, bt-&gt;Data); <span class="comment">//先打印根</span></span><br><span class="line">		PreOrderTraversal(bt-&gt;left);<span class="comment">//然后进入左子树</span></span><br><span class="line">		PreOrderTraversal(bt-&gt;right);<span class="comment">//再进入右子树</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>非递归实现<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	BinTree T = BT;</span><br><span class="line">	<span class="built_in">stack</span>&lt;BinTree&gt; S;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (T || !S.empty()) &#123;</span><br><span class="line">		<span class="keyword">while</span> (T) &#123;</span><br><span class="line">			S.push(T);</span><br><span class="line">			T = T-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!S.empty()) &#123;</span><br><span class="line">			T = S.top();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);</span><br><span class="line">			S.pop();</span><br><span class="line">			T = T-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>中序遍历过程：左节点-&gt;根-&gt;右节点<br>如图所示：<br><img src="/posts/f30c2ae3/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.jpg"></p>
<ul>
<li>递归实现<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (BT) &#123;</span><br><span class="line">		InOrderTraversal(BT-&gt;left);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">		InOrderTraversal(BT-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>非递归遍历<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	BinTree T = BT;</span><br><span class="line">	<span class="built_in">stack</span>&lt;BinTree&gt; S;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (T || !S.empty()) &#123;</span><br><span class="line">		<span class="keyword">while</span> (T) &#123;</span><br><span class="line">			S.push(T);</span><br><span class="line">			T = T-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!S.empty()) &#123;</span><br><span class="line">			T = S.top();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);</span><br><span class="line">			S.pop();</span><br><span class="line">			T = T-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5>后序遍历过程：左节点-&gt;右节点-&gt;根<br>如图所示：<br><img src="/posts/f30c2ae3/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.jpg"></li>
<li>递归实现<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (BT) &#123;</span><br><span class="line">		PostOrderTraversal(BT-&gt;left);</span><br><span class="line">		PostOrderTraversal(BT-&gt;right);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>非递归实现01<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归后序遍历01</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	BinTree T = BT;</span><br><span class="line">	<span class="built_in">stack</span>&lt;BinTree&gt; S;  <span class="comment">// 创建并初始化堆栈 S</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;BinTree&gt; v;   <span class="comment">// 创建存储树结点的动态数组</span></span><br><span class="line">	S.push(T);  <span class="comment">//先将根节点放入栈中</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//循环中出栈的顺序是后序遍历的反顺序，即遇到根节点，先抛出根节点，然后抛出右节点，最后抛出左节点</span></span><br><span class="line">	<span class="keyword">while</span> (!S.empty()) &#123; <span class="comment">// 当堆栈不空</span></span><br><span class="line">		T = S.top();</span><br><span class="line">		v.push_back(T);  <span class="comment">// 将要出栈元素存进数组</span></span><br><span class="line">		S.pop();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (T-&gt;left)</span><br><span class="line">			S.push(T-&gt;left);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (T-&gt;right)</span><br><span class="line">			S.push(T-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//反顺序输出数组的元素</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = (v.size() - <span class="number">1</span>); i &gt;= <span class="number">0</span>; i--) <span class="comment">// 输出数组元素</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[i]-&gt;Data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>飞递归实现02<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归后序遍历02</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  <span class="comment">//定义一个栈</span></span><br><span class="line">	BinTree data[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">&#125; BiStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal02</span><span class="params">(BinTree T)</span> </span>&#123;	<span class="comment">//入栈所有的左子树以及左子树的右子树直到没有可以访问的右子树后退栈。</span></span><br><span class="line">	TreeNode *pre = T;		<span class="comment">//记录上一次退栈的结点</span></span><br><span class="line">	TreeNode *p = T;			<span class="comment">//当前访问结点</span></span><br><span class="line">	BiStack s ;</span><br><span class="line">	s.top = <span class="number">0</span>;    <span class="comment">//定义top指针为0</span></span><br><span class="line">	s.data[s.top] = <span class="literal">NULL</span>;    <span class="comment">//定义栈为空</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*当节点的两边没有被访问过，那么进入节点的左子树，如果节点的左边被</span></span><br><span class="line"><span class="comment">	访问过，那么进入节点的右子树，当节点的左右都为空或者左右都被访问过</span></span><br><span class="line"><span class="comment">	那么就输出当前节点，并将当前节点设置为被访问过，并且将该节点出栈*/</span></span><br><span class="line">	<span class="keyword">while</span> (p || s.top != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p != <span class="literal">NULL</span> &amp;&amp; pre != p-&gt;left &amp;&amp; pre != p-&gt;right) &#123;	<span class="comment">//结点不为空且左孩子和右孩子没有访问过</span></span><br><span class="line">			s.data[++s.top] = p; <span class="comment">//当前节点入栈</span></span><br><span class="line">			p = p-&gt;left;  <span class="comment">//进入左子树</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			p = s.data[s.top];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span> &amp;&amp; pre != p-&gt;right) &#123;	<span class="comment">//右子树不为空且右孩子没有访问过，入栈右子树结点</span></span><br><span class="line">				p = p-&gt;right;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;Data);			<span class="comment">//访问到最后的右子树的结点后，退栈。</span></span><br><span class="line">				pre = s.data[s.top];</span><br><span class="line">				p = s.data[--s.top];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="前、中、后序遍历的总结"><a href="#前、中、后序遍历的总结" class="headerlink" title="前、中、后序遍历的总结"></a>前、中、后序遍历的总结</h5>先序、中序和后序遍历过程：遍历过程中经过结点的路线一样，只是访问各结点的时机不同，即：</li>
<li>先序遍历是第一次”遇到”该结点时访问</li>
<li>中序遍历是第二次”遇到”该结点（此时该结点从左子树返回）时访问</li>
<li>后序遍历是第三次”遇到”该结点（此时该结点从右子树返回）时访问<br>如图所示：<br><img src="/posts/f30c2ae3/%E9%81%8D%E5%8E%86%E6%80%BB%E7%BB%93.jpg"></li>
</ul>
<h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h5><p>遍历过程：从上往下，从左往右进行遍历<br>如下图：<br><img src="/posts/f30c2ae3/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.jpg"><br>层序遍历的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;BinTree&gt; q;</span><br><span class="line">	BinTree T;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!BT) &#123;<span class="comment">//如果树为空，则直接结束函数</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	q.push(BT);<span class="comment">//将树的根节点入队</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;<span class="comment">//知道队列为空，结束循环</span></span><br><span class="line">		T = q.front();<span class="comment">//拿到队列第一个数</span></span><br><span class="line">		q.pop();<span class="comment">//将队列中第一个数出队</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);<span class="comment">//输出拿到的队列第一个数</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (T-&gt;left) &#123;<span class="comment">//如果队列第一个数的左节点不为空，那么将其左节点入队</span></span><br><span class="line">			q.push(T-&gt;left);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (T-&gt;right) &#123;<span class="comment">//如果队列第一个数的右节点不为空，那么将其右节点入队</span></span><br><span class="line">			q.push(T-&gt;right);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求叶子结点"><a href="#求叶子结点" class="headerlink" title="求叶子结点"></a>求叶子结点</h4><p>在进行遍历时，判断将没有左右节点的节点进行输出即可，如下实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出树的叶子结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindLeaves</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (BT) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!BT-&gt;left &amp;&amp; !BT-&gt;right) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">		&#125;<span class="comment">//不管是什么遍历，只要加上左右节点都为空，就可以输出叶子结点了</span></span><br><span class="line"></span><br><span class="line">		FindLeaves(BT-&gt;left);</span><br><span class="line">		FindLeaves(BT-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求树的高度"><a href="#求树的高度" class="headerlink" title="求树的高度"></a>求树的高度</h4><p>使用递归求输的高度，即使用递归求出每每个节点的左右子树的高度，当前树的高度就是子最高子树高度加1，实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTreeHeight</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> leftHeight, rightHeight, maxHeight;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (BT) &#123;</span><br><span class="line">		leftHeight = GetTreeHeight(BT-&gt;left);<span class="comment">//求左子树的高度</span></span><br><span class="line">		rightHeight = GetTreeHeight(BT-&gt;right);<span class="comment">//求右子树的高度</span></span><br><span class="line">		maxHeight = (leftHeight &gt; rightHeight) ? leftHeight : rightHeight;</span><br><span class="line">		<span class="keyword">return</span> maxHeight + <span class="number">1</span>;<span class="comment">//当前树的高度为左子树或右子树的高度加1</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="由两种序列确定二叉树"><a href="#由两种序列确定二叉树" class="headerlink" title="由两种序列确定二叉树"></a>由两种序列确定二叉树</h4><p>前提：两种序列中必须有一种序列是中序序列<br>确定二叉树的流程如图所示：<br><img src="/posts/f30c2ae3/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A1%AE%E5%AE%9A.jpg"> </p>
<ul>
<li>例子：<br>前序序列：ABCDEFG<br>中序序列：CBDAFEG<br>如图所示：<br><img src="/posts/f30c2ae3/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A1%AE%E5%AE%9A%E4%BE%8B%E5%AD%90.jpg"> </li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><a href="https://yanxiaoblog.github.io/posts/297fb2ac/#more">二叉树遍历的完整代码</a></p>
<h4 id="二叉树的搜索——二叉搜索树"><a href="#二叉树的搜索——二叉搜索树" class="headerlink" title="二叉树的搜索——二叉搜索树"></a>二叉树的搜索——二叉搜索树</h4><ul>
<li>二叉搜索树又可以称为二叉排序树或者二叉查找树</li>
<li>二叉搜索树如果不为空，那么它将满足一下条件：<ul>
<li>左子树所有节点的值永远比根节点的值小</li>
<li>右子树所有节点的值永远比根节点的值小</li>
<li>左子树和右子树都是二叉树</li>
</ul>
</li>
</ul>
<h5 id="二叉搜索树的查找"><a href="#二叉搜索树的查找" class="headerlink" title="二叉搜索树的查找"></a>二叉搜索树的查找</h5><ul>
<li>如果二叉搜索树为空，直接返回NULL</li>
<li>如果二叉搜索树不为空  <ul>
<li>判断X是否和根节点相等，如果相等，返回根节点的地址</li>
<li>如果不相等，小于根节点，那么到左子树中继续查找</li>
<li>如果不相等，大于根节点，那么到右子树中继续查找  </li>
</ul>
</li>
</ul>
<p>查找过程如图所示：<br><img src="/posts/f30c2ae3/%E6%90%9C%E7%B4%A2%E6%A0%91%E6%9F%A5%E6%89%BE.jpg"> </p>
<h5 id="查找最大元素和最小元素"><a href="#查找最大元素和最小元素" class="headerlink" title="查找最大元素和最小元素"></a>查找最大元素和最小元素</h5><ul>
<li>最大元素一定是在树的最右端</li>
<li>最小元素一定是在树的最左端  </li>
</ul>
<p>如图所示：<br><img src="/posts/f30c2ae3/%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%85%83%E7%B4%A0.jpg"></p>
<h5 id="元素的删除"><a href="#元素的删除" class="headerlink" title="元素的删除"></a>元素的删除</h5><p>二叉搜索树的删除有三种情况</p>
<ul>
<li>删除的是叶子结点：直接删除，并将叶子结点的父节点的指针赋值为NULL</li>
<li>删除的节点有一个子树：将其父节点的指针指向要删除节点的孩子节点 </li>
<li>删除的节点有左右两个子树：用<strong>左子树的最大节点</strong>或者<strong>右子树的最小节点</strong>代替被删除的节点</li>
</ul>
<p>第三种删除的情况如图所示：</p>
<ul>
<li>要删除一个有两个子树的节点：<br><img src="/posts/f30c2ae3/%E5%88%A0%E9%99%A401.jpg">  </li>
<li>用左子树最大节点来代替<br><img src="/posts/f30c2ae3/%E5%88%A0%E9%99%A402.jpg">  </li>
<li>用右子树最小节点来代替<br><img src="/posts/f30c2ae3/%E5%88%A0%E9%99%A403.jpg"> </li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>第二讲-线性结构-习题</title>
    <url>/posts/e4ca25fd/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文是观看浙江大学的数据结构课程第二讲做的习题笔记，包括：递增的整数序列链表的插入，两个有序链表序列的合并，递归求简单交错幂级数的部分和，弹球距离四个习题</p>
<span id="more"></span>
<h3 id="递增的整数序列链表的插入"><a href="#递增的整数序列链表的插入" class="headerlink" title="递增的整数序列链表的插入"></a>递增的整数序列链表的插入</h3><p>本题要求实现一个函数，在递增的整数序列链表（带头结点）中插入一个新整数，并保持该序列的有序性。</p>
<h4 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h4><p><code>List Insert( List L, ElementType X );</code><br>其中List结构定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data; <span class="comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode   Next; <span class="comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">/* 定义单链表类型 */</span></span><br></pre></td></tr></table></figure>
<p>L是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数Insert要将X插入L，并保持该序列的有序性，返回插入后的链表头指针。</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 4 5 6</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><p><code>1 2 3 4 5 6 </code></p>
<h4 id="解决问题代码"><a href="#解决问题代码" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">List <span class="title">Insert</span><span class="params">( List L, ElementType X )</span></span>&#123;</span><br><span class="line">    List p, t;</span><br><span class="line">    t = L;</span><br><span class="line">    <span class="comment">//创建一个节点用来存储X的值</span></span><br><span class="line">    p = (struct Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node *));</span><br><span class="line">    p-&gt;Data = X;</span><br><span class="line">    <span class="comment">//循环遍历找到立案表中第一个大于X的节点，并将X所在的节点插入到这个节点的前面</span></span><br><span class="line">    <span class="keyword">while</span>(L-&gt;Next != <span class="literal">NULL</span> &amp;&amp; L-&gt;Next-&gt;Data &lt; X)&#123;</span><br><span class="line">        L = L-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;Next = L-&gt;Next;</span><br><span class="line">    L-&gt;Next = p;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="两个有序链表序列的合并"><a href="#两个有序链表序列的合并" class="headerlink" title="两个有序链表序列的合并"></a>两个有序链表序列的合并</h3><p>本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。</p>
<h4 id="函数接口定义：-1"><a href="#函数接口定义：-1" class="headerlink" title="函数接口定义："></a>函数接口定义：</h4><p><code>List Merge( List L1, List L2 );</code><br>其中List结构定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data; <span class="comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode   Next; <span class="comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">/* 定义单链表类型 */</span></span><br></pre></td></tr></table></figure>
<p>L1和L2是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数Merge要将L1和L2合并为一个非递减的整数序列。应直接使用原序列中的结点，返回归并后的带头结点的链表头指针。</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 3 5</span><br><span class="line">5</span><br><span class="line">2 4 6 8 10</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 6 8 10 </span><br><span class="line">NULL</span><br><span class="line">NULL</span><br></pre></td></tr></table></figure>

<h4 id="解决问题代码-1"><a href="#解决问题代码-1" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">List <span class="title">Merge</span><span class="params">( List L1, List L2 )</span></span>&#123;</span><br><span class="line">    List p1, p2, p, L;</span><br><span class="line">    p1 = L1-&gt;Next;<span class="comment">//L1和L2在第二个节点才开始存值</span></span><br><span class="line">    p2 = L2-&gt;Next;</span><br><span class="line">    L=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));<span class="comment">//新的头结点</span></span><br><span class="line">    p = L;</span><br><span class="line">    <span class="comment">//使两个链表中节点的值进行比较，小的放到新链表中</span></span><br><span class="line">    <span class="comment">//当其中一个链表比较完之后，就将另一个链表中剩下的所有节点接到新链表中</span></span><br><span class="line">    <span class="keyword">while</span>(p1 &amp;&amp; p2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p1-&gt;Data &lt; p2-&gt;Data)&#123;</span><br><span class="line">            p-&gt;Next = p1;</span><br><span class="line">            p = p-&gt;Next;<span class="comment">//p是移动的，因为每次插入节点都需要使用p来定位</span></span><br><span class="line">            p1 = p1-&gt;Next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p-&gt;Next = p2;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">            p2 = p2-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果p1链表比较完后，直接将p2没比较完，那么将p2后面没比较的节点接到新链表的末尾</span></span><br><span class="line">    <span class="keyword">if</span>(p1 == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p-&gt;Next = p2;</span><br><span class="line">    <span class="comment">//如果p2链表比较完后，直接将p1没比较完，那么将p1后面没比较的节点接到新链表的末尾</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p2 == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p-&gt;Next = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    L1-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    L2-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递归求简单交错幂级数的部分和"><a href="#递归求简单交错幂级数的部分和" class="headerlink" title="递归求简单交错幂级数的部分和"></a>递归求简单交错幂级数的部分和</h3><p>本题要求实现一个函数，计算下列简单交错幂级数的部分和：<br><code>f(x,n)=x−x^2+x^3−x^4 +⋯+(−1)^(n−1)*x^n</code></p>
<h4 id="函数接口定义"><a href="#函数接口定义" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>double fn( double x, int n );</code></p>
<h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><p><code>0.5 12</code></p>
<h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><p><code>0.33</code></p>
<h4 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>使用for循环的求解方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">( <span class="keyword">double</span> x, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="comment">//判断符号的正负</span></span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            result += <span class="built_in">pow</span>(x, i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result -= <span class="built_in">pow</span>(x, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>使用递归的求解方法</p>
<ul>
<li>递归求解方法一<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">( <span class="keyword">double</span> x, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> result;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		result=x;	</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		result=<span class="built_in">pow</span>(<span class="number">-1</span>,n<span class="number">-1</span>) * <span class="built_in">pow</span>(x,n) + fn(x,n<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure></li>
<li>递归求解方法二<br>化简原来的式子，设n=3，则有：<br><img src="/posts/e4ca25fd/%E9%80%92%E5%BD%92%E6%8E%A8%E7%90%86.jpg"><br>所以我们的递归函数的设计思路是：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">( <span class="keyword">double</span> x, <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">   <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">      返回x;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">      返回x*(<span class="number">1</span>-fn(x,n<span class="number">-1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
所以代码为：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">( <span class="keyword">double</span> x, <span class="keyword">int</span> n )</span></span>&#123;  </span><br><span class="line">   <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">      x;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">      result = x*(<span class="number">1</span>-fn(x,n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//化简后的代码写为</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)</span><br><span class="line">        result=x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        result=x-x*fn(x,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="弹球距离"><a href="#弹球距离" class="headerlink" title="弹球距离"></a>弹球距离</h3><p>设有一个球从高度为h米的地方落下，碰到地面后又弹到高度为原来p倍的位置，然后又落下，再弹起，再落下…。请编写函数求初始高度为h的球下落后到基本停下来（高度小于给定阈值TOL）时在空中所经过的路程总和。</p>
<h4 id="函数接口定义-1"><a href="#函数接口定义-1" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>double dist( double h, double p );</code><br>其中h是球的初始高度，p是球弹起高度与弹起前落下高度的比值；函数dist要返回球下落后到基本停下来时在空中所经过的路程总和。注意：当弹起的高度小于裁判程序定义的常数TOL时，弹起的距离不计算在内。</p>
<h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><p><code>1.0 0.4</code></p>
<h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><p><code>2.331149</code></p>
<h4 id="解决问题代码-2"><a href="#解决问题代码-2" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">( <span class="keyword">double</span> h, <span class="keyword">double</span> p )</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> distance = h;</span><br><span class="line">    h = p * h;</span><br><span class="line">    <span class="keyword">while</span>(h &gt;= TOL)&#123;</span><br><span class="line">        distance = distance + <span class="number">2</span> * h;</span><br><span class="line">        h = p * h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线性表元素的区间删除"><a href="#线性表元素的区间删除" class="headerlink" title="线性表元素的区间删除"></a>线性表元素的区间删除</h3><p>给定一个顺序存储的线性表，请设计一个函数删除所有值大于min而且小于max的元素。删除后表中剩余元素保持顺序存储，并且相对位置不能改变。</p>
<h4 id="函数接口定义-2"><a href="#函数接口定义-2" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>List Delete( List L, ElementType minD, ElementType maxD );</code><br>其中List结构定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last; <span class="comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>L是用户传入的一个线性表，其中ElementType元素可以通过&gt;、==、&lt;进行比较；minD和maxD分别为待删除元素的值域的下、上界。函数Delete应将Data[]中所有值大于minD而且小于maxD的元素删除，同时保证表中剩余元素保持顺序存储，并且相对位置不变，最后返回删除后的表。</p>
<h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">4 -8 2 12 1 5 9 3 3 10</span><br><span class="line">0 4</span><br></pre></td></tr></table></figure>

<h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h4><p><code>4 -8 12 5 9 10 </code></p>
<h4 id="解决问题代码-3"><a href="#解决问题代码-3" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">List <span class="title">Delete</span><span class="params">( List L, ElementType minD, ElementType maxD )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= L-&gt;Last; i ++)&#123;</span><br><span class="line">        <span class="comment">//循环遍历找到不在这个区间的元素，然后将它们按顺序放到数组中</span></span><br><span class="line">        <span class="keyword">if</span>(L-&gt;Data[i] &lt;= minD || L-&gt;Data[i] &gt;= maxD)&#123;</span><br><span class="line">            j ++;</span><br><span class="line">            L-&gt;Data[j] = L-&gt;Data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组的长度就是j的长度</span></span><br><span class="line">    L-&gt;Last = j;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="求链表的倒数第m个元素"><a href="#求链表的倒数第m个元素" class="headerlink" title="求链表的倒数第m个元素"></a>求链表的倒数第m个元素</h3><p>请设计时间和空间上都尽可能高效的算法，在不改变链表的前提下，求链式存储的线性表的倒数第m（&gt;0）个元素。</p>
<h4 id="函数接口定义-3"><a href="#函数接口定义-3" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>ElementType Find( List L, int m );</code><br>其中List结构定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct Node *PtrToNode;</span><br><span class="line">struct Node &#123;</span><br><span class="line">    ElementType Data; /* 存储结点数据 */</span><br><span class="line">    PtrToNode   Next; /* 指向下一个结点的指针 */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>typedef PtrToNode List; /* 定义单链表类型 */<br>L是给定的带头结点的单链表；函数Find要将L的倒数第m个元素返回，并不改变原链表。如果这样的元素不存在，则返回一个错误标志ERROR。</p>
<h4 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 4 5 6</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 4 5 6 </span><br></pre></td></tr></table></figure>
<h4 id="解决问题代码-4"><a href="#解决问题代码-4" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//思路：用p,q两个指针同时指向L,然后p,q指针相隔m,当p为链表最后一个元素的时候，q所指的元素的下一个就是要求的</span></span><br><span class="line"><span class="function">ElementType <span class="title">Find</span><span class="params">( List L, <span class="keyword">int</span> m )</span></span>&#123;</span><br><span class="line">    List p = L;</span><br><span class="line">    List q = L;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//两个指针间隔的长度</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;Next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(len != m)&#123;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">            len ++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">            q = q-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;Next-&gt;Data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="另类循环队列"><a href="#另类循环队列" class="headerlink" title="另类循环队列"></a>另类循环队列</h3><p>如果用一个循环数组表示队列，并且只设队列头指针Front，不设尾指针Rear，而是另设Count记录队列中元素个数。请编写算法实现队列的入队和出队操作。</p>
<h4 id="函数接口定义-4"><a href="#函数接口定义-4" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool AddQ( Queue Q, ElementType X );</span><br><span class="line">ElementType DeleteQ( Queue Q );</span><br></pre></td></tr></table></figure>
<p>其中Queue结构定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef int Position;</span><br><span class="line">typedef struct QNode *PtrToQNode;</span><br><span class="line">struct QNode &#123;</span><br><span class="line">    ElementType *Data;  /* 存储元素的数组   */</span><br><span class="line">    Position Front;     /* 队列的头指针     */</span><br><span class="line">    int Count;          /* 队列中元素个数   */</span><br><span class="line">    int MaxSize;        /* 队列最大容量     */</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToQNode Queue; </span><br></pre></td></tr></table></figure>
<p>注意：如果队列已满，AddQ函数必须输出“Queue Full”并且返回false；如果队列是空的，则DeleteQ函数必须输出“Queue Empty”，并且返回ERROR。</p>
<h4 id="解决问题代码-5"><a href="#解决问题代码-5" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AddQ</span><span class="params">( Queue Q, ElementType X )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;Count &gt;= Q-&gt;MaxSize)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue Full\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Q-&gt;Count ++;</span><br><span class="line">        Q-&gt;Data[(Q-&gt;Count+Q-&gt;Front)%Q-&gt;MaxSize] = X;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">( Queue Q )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;Count == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue Empty\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Q-&gt;Front = (Q-&gt;Front + <span class="number">1</span>) % Q-&gt;MaxSize;</span><br><span class="line">        Q-&gt;Count --;</span><br><span class="line">        <span class="keyword">return</span> Q-&gt;Data[Q-&gt;Front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双端（循环）队列"><a href="#双端（循环）队列" class="headerlink" title="双端（循环）队列"></a>双端（循环）队列</h3><p>双端队列（deque，即double-ended queue的缩写）是一种具有队列和栈性质的数据结构，即可以（也只能）在线性表的两端进行插入和删除。若以顺序存储方式实现双端队列，请编写例程实现下列操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Push(X,D)：将元素X插入到双端队列D的头；</span><br><span class="line">Pop(D)：删除双端队列D的头元素，并返回；</span><br><span class="line">Inject(X,D)：将元素X插入到双端队列D的尾部；</span><br><span class="line">Eject(D)：删除双端队列D的尾部元素，并返回。</span><br></pre></td></tr></table></figure>
<h4 id="函数接口定义-5"><a href="#函数接口定义-5" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">( ElementType X, Deque D )</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Deque D )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Inject</span><span class="params">( ElementType X, Deque D )</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Eject</span><span class="params">( Deque D )</span></span>;</span><br><span class="line">```  </span><br><span class="line">其中Deque结构定义如下：</span><br><span class="line">```c</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">PtrToQNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></span><br><span class="line">    ElementType *Data;      <span class="comment">/* 存储元素的数组   */</span></span><br><span class="line">    Position Front, Rear;   <span class="comment">/* 队列的头、尾指针 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;            <span class="comment">/* 队列最大容量     */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToQNode Deque; </span><br></pre></td></tr></table></figure>
<p>注意：Push和Inject应该在正常执行完操作后返回true，或者在出现非正常情况时返回false。当Front和Rear相等时队列为空，Pop和Eject必须返回由裁判程序定义的ERROR。</p>
<h4 id="解决问题代码-6"><a href="#解决问题代码-6" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">( ElementType X, Deque D )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((D-&gt;Rear+<span class="number">1</span>)%D-&gt;MaxSize == D-&gt;Front)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//为什么要加上D-&gt;MaxSize呢？因为D-&gt;Front-1有可能为负数，</span></span><br><span class="line">        <span class="comment">//所以加上D-&gt;MaxSize来确保(D-&gt;Front - 1 + D-&gt;MaxSize) % D-&gt;MaxSize整个是正数</span></span><br><span class="line">        D-&gt;Front = (D-&gt;Front - <span class="number">1</span> + D-&gt;MaxSize) % D-&gt;MaxSize;<span class="comment">//指向下一个元素后，对下一个元素赋值</span></span><br><span class="line">        D-&gt;Data[D-&gt;Front] = X;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Deque D )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(D-&gt;Rear == D-&gt;Front)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        D-&gt;Front = (D-&gt;Front + <span class="number">1</span>) % D-&gt;MaxSize;</span><br><span class="line">        <span class="comment">//返回的是被抛出的那个数，也就是返回front指向的上一个元素</span></span><br><span class="line">        <span class="keyword">return</span> D-&gt;Data[(D-&gt;Front<span class="number">-1</span>+D-&gt;MaxSize)%D-&gt;MaxSize];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Inject</span><span class="params">( ElementType X, Deque D )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((D-&gt;Rear+<span class="number">1</span>)%D-&gt;MaxSize == D-&gt;Front)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//先对rear指向的这个元素赋值，然后rear才指向下一个元素</span></span><br><span class="line">        D-&gt;Data[D-&gt;Rear] = X;</span><br><span class="line">        D-&gt;Rear = (D-&gt;Rear + <span class="number">1</span>) % D-&gt;MaxSize;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElementType <span class="title">Eject</span><span class="params">( Deque D )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(D-&gt;Rear == D-&gt;Front)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        D-&gt;Rear = (D-&gt;Rear - <span class="number">1</span> + D-&gt;MaxSize) % D-&gt;MaxSize;</span><br><span class="line">        <span class="comment">//因为rear指向的是有数据的后一个没有数据的元素，所以这里返回的是</span></span><br><span class="line">        <span class="comment">//抛出后rear位置的元素的数据，也就是返回被抛出的数据</span></span><br><span class="line">        <span class="keyword">return</span> D-&gt;Data[D-&gt;Rear];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="另类堆栈"><a href="#另类堆栈" class="headerlink" title="另类堆栈"></a>另类堆栈</h3><p>在栈的顺序存储实现中，另有一种方法是将Top定义为栈顶的上一个位置。请编写程序实现这种定义下堆栈的入栈、出栈操作。如何判断堆栈为空或者满？</p>
<h4 id="函数接口定义-6"><a href="#函数接口定义-6" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">( Stack S, ElementType X )</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Stack S )</span></span>;</span><br></pre></td></tr></table></figure>
<p>其中Stack结构定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">PtrToSNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> &#123;</span></span><br><span class="line">    ElementType *Data;  <span class="comment">/* 存储元素的数组 */</span></span><br><span class="line">    Position Top;       <span class="comment">/* 栈顶指针       */</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;        <span class="comment">/* 堆栈最大容量   */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToSNode Stack;</span><br></pre></td></tr></table></figure>
<p>注意：如果堆栈已满，Push函数必须输出“Stack Full”并且返回false；如果队列是空的，则Pop函数必须输出“Stack Empty”，并且返回ERROR。</p>
<h4 id="解决问题代码-7"><a href="#解决问题代码-7" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">( Stack S, ElementType X )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;MaxSize == S-&gt;Top)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stack Full\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        S-&gt;Data[S-&gt;Top] = X;</span><br><span class="line">        S-&gt;Top ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Stack S )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;Top == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stack Empty\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        S-&gt;Top --;</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Data[S-&gt;Top];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>第一讲习题</title>
    <url>/posts/75854af9/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文是观看浙江大学的数据结构课程第二讲做的习题笔记，包括：二分法查找，有序数组的插入两个习题</p>
<span id="more"></span>
<h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><h4 id="什么是二分法查找"><a href="#什么是二分法查找" class="headerlink" title="什么是二分法查找"></a>什么是二分法查找</h4><ul>
<li>二分法查找适用于数据量较大时，但是数据需要先排好顺序。<br>主要思想是：（设查找的数组区间为array[low, high]）<br>（1）确定该区间的中间位置K<br>（2）将查找的值T与array[k]比较。若相等，查找成功返回此位置；否则确定新的查找区域，继续二分查找。</li>
<li>区域确定如下：a.array[k]&gt;T 由数组的有序性可知array[k,k+1,……,high] &gt; T;故新的区间为array[low,……，K-1]b.array[k] &lt; T 类似上面查找区间为array[k+1,……，high]。每一次查找与中间值比较，可以确定是否查找成功，不成功当前查找区间将缩小一半，递归查找即可。时间复杂度为:O(log2n)。<h4 id="二分法查找的原理解析"><a href="#二分法查找的原理解析" class="headerlink" title="二分法查找的原理解析"></a>二分法查找的原理解析</h4>设有如下排好序的数组：<br><img src="/posts/75854af9/%E6%95%B0%E7%BB%84.jpg"><br>在这个数组中使用二分法查找数组中值为9的这个元素的下标，如图所示：<br><img src="/posts/75854af9/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE.jpg"></li>
<li>首先将数组从中间分成两个部分，一边部分和右边部分，然后判断9是在左边还是右边</li>
<li>发现9是在右边的，所以将左边的标记left移到center+1的位置，然后center通过center=(left+right)/2得到新的位置，再判断9是在center的左边还是右边</li>
<li>发现9仍然是在center的右边，那么就继续将left移到center+1的位置，然后center再通过center=(left+right)/2得到新的位置，然后进行判断9的位置</li>
<li>发现9在center指向的位置，那么就返回center所在的下标</li>
</ul>
<h4 id="二分法查找的代码实现"><a href="#二分法查找的代码实现" class="headerlink" title="二分法查找的代码实现"></a>二分法查找的代码实现</h4><ul>
<li>java代码实现：数组结合的二分法查找<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">function02</span><span class="params">( <span class="keyword">int</span>[] arr, <span class="keyword">int</span> X )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = arr.length-<span class="number">1</span>, center;</span><br><span class="line">    <span class="keyword">while</span> (right &gt;= left) &#123;</span><br><span class="line">        center = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[center] &gt; X)</span><br><span class="line">            right = center - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[center] == X)&#123;</span><br><span class="line">            <span class="keyword">return</span> center;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            left = center + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>c代码实现：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Position <span class="title">BinarySearch</span><span class="params">( List L, ElementType X )</span></span>&#123;</span><br><span class="line">	Position left = <span class="number">0</span>; </span><br><span class="line">	Position right = L-&gt;Last;</span><br><span class="line">	<span class="keyword">while</span>(left&lt;=right)&#123;  <span class="comment">// 考虑一下这为什么要取等？</span></span><br><span class="line">	<span class="comment">//因为有可能left和right指向同一个节点，center=left=right，而这个节点就是我们要找的，或者没有找到时用来跳出循环</span></span><br><span class="line">		Position center = (left+right)/<span class="number">2</span>;  <span class="comment">//先找中间值 </span></span><br><span class="line">		<span class="keyword">if</span>(L-&gt;Data[center] &lt; X)&#123;     <span class="comment">//比中间值大，X 在右半边 </span></span><br><span class="line">			left = center+<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(X &lt; L-&gt;Data[center])&#123;   <span class="comment">//比中间值小，X 在左半边 </span></span><br><span class="line">			right = center<span class="number">-1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>  <span class="comment">//找到了，直接返回 </span></span><br><span class="line">			<span class="keyword">return</span> center;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> NotFound;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="有序数组的插入"><a href="#有序数组的插入" class="headerlink" title="有序数组的插入"></a>有序数组的插入</h3><p>本题要求将任一给定元素插入从大到小排好序的数组中合适的位置，以保持结果依然有序。</p>
<h4 id="函数接口定义"><a href="#函数接口定义" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>bool Insert( List L, ElementType X );</code><br>其中List结构定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];<span class="comment">//数组</span></span><br><span class="line">    Position Last; <span class="comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">( List L, ElementType X )</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断数组是否已满</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;Last == MAXSIZE<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环遍历数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= L-&gt;Last; i ++)&#123;</span><br><span class="line">        <span class="comment">//判断数组中是否已经存在这个值的元素</span></span><br><span class="line">        <span class="keyword">if</span>(L-&gt;Data[i] == X)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果这个元素的值大于x，那么就将这个元素及这个元素后面的元素都完后挪一个位置，然后将x插入这个元素的位置</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (L-&gt;Data[i]&lt;X) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=L-&gt;Last; j&gt;=i; j--) <span class="comment">//找到i的位置</span></span><br><span class="line">                L-&gt;Data[j+<span class="number">1</span>]=L-&gt;Data[j]; </span><br><span class="line">            L-&gt;Data[i]=X; </span><br><span class="line">            L-&gt;Last=L-&gt;Last+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果x比数组的最后一个数还小，那么就插入数组的末尾</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i == L-&gt;Last &amp;&amp; X &lt; L-&gt;Data[i])&#123;</span><br><span class="line">            L-&gt;Data[L-&gt;Last+<span class="number">1</span>] = X;</span><br><span class="line">            L-&gt;Last=L-&gt;Last+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>线性结构_线性表_栈_队列</title>
    <url>/posts/799b3d04/</url>
    <content><![CDATA[<h3 id="线性结构——百度百科"><a href="#线性结构——百度百科" class="headerlink" title="线性结构——百度百科"></a>线性结构——百度百科</h3><ul>
<li>线性结构是一个有序数据元素的集合。<ul>
<li>常用的线性结构有：线性表，栈，队列，双队列，串(一维数组)。<span id="more"></span></li>
</ul>
</li>
<li>关于广义表、数组(高维)，是一种非线性的数据结构。<ul>
<li>常见的非线性结构有：二维数组，多维数组，广义表，树(二叉树等)，图 </li>
</ul>
</li>
</ul>
<h4 id="线性结构的特征——百度百科"><a href="#线性结构的特征——百度百科" class="headerlink" title="线性结构的特征——百度百科"></a>线性结构的特征——百度百科</h4><ul>
<li>集合中必存在唯一的一个”第一个元素”；</li>
<li>集合中必存在唯一的一个”最后的元素”；</li>
<li>除最后元素之外，其它数据元素均有唯一的”后继”；</li>
<li>除第一元素之外，其它数据元素均有唯一的”前驱”。</li>
</ul>
<p>数据结构中线性结构指的是数据元素之间存在着“一对一”的线性关系的数据结构</p>
<h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><h4 id="什么是线性表"><a href="#什么是线性表" class="headerlink" title="什么是线性表"></a>什么是线性表</h4><p>线性表是n个具有相同特性的数据元素的有限序列。<br>线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的 。<br>（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储，但是把最后一个数据元素的尾指针指向了首位结点）。</p>
<h4 id="线性表之数组"><a href="#线性表之数组" class="headerlink" title="线性表之数组"></a>线性表之数组</h4><h5 id="数组的概述"><a href="#数组的概述" class="headerlink" title="数组的概述"></a>数组的概述</h5><p>数组是一片连续的存储空间结构，这片空间存储着想同类型的数据</p>
<ul>
<li>优点：查询快，通过索引直接查找；有序添加，添加速度快，允许重复</li>
<li>缺点：<ul>
<li>中间插入和删除效率慢</li>
<li>只能初始化一片固定长度的空间，如果空间满了，只能重新创建一个更大的空间，然后将原来数组的数据拷贝过去</li>
<li>只能存放一种类型的数据</li>
</ul>
</li>
<li>应用场景：如果应用需要快速访问数据，很少插入和删除元素，就应该用数组</li>
</ul>
<h5 id="数组的定义和初始化"><a href="#数组的定义和初始化" class="headerlink" title="数组的定义和初始化"></a>数组的定义和初始化</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100  <span class="comment">// MAXSIZE 定义为 Data 数组的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;  <span class="comment">// ElementType 可定义为任意类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">   ElementType Data[MAXSIZE]; </span><br><span class="line">   <span class="keyword">int</span> Last;  <span class="comment">// Last 定义线性表的最后一个元素</span></span><br><span class="line">&#125;;</span><br><span class="line">List L;</span><br><span class="line"><span class="comment">//访问下标为 i 的元素：L-&gt;Data[i]</span></span><br><span class="line"><span class="comment">//线性表的长度：L-&gt;Last+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个空数组</span></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List L;</span><br><span class="line">    L = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">    L-&gt;Last = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="数组的查找"><a href="#数组的查找" class="headerlink" title="数组的查找"></a>数组的查找</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按值查找 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(ElementType X,List L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i] != X)  </span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;Last &lt; i)  <span class="comment">//如果没找到，返回 -1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">// 找到后返回下标 </span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按序查找</span></span><br><span class="line"><span class="function">ElementType <span class="title">FindKth</span><span class="params">(<span class="keyword">int</span> K,List L)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(K &lt; <span class="number">0</span> || L-&gt;Last &lt; K)&#123;  <span class="comment">//位置越界</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;L-&gt;Data[%d]不存在元素&quot;</span>,K);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;Data[K];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="数组元素的插入"><a href="#数组元素的插入" class="headerlink" title="数组元素的插入"></a>数组元素的插入</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ElementType X,<span class="keyword">int</span> i,List L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="comment">//先判断数组是否已满</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;Last == MAXSIZE<span class="number">-1</span>)&#123;  <span class="comment">//位置已满 </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;表满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再判断插入的位置是否越界</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span> || L-&gt;Last+<span class="number">1</span> &lt; i)&#123;  <span class="comment">//位置越界，如果将数插入 L-&gt;Data[L-&gt;Last+1]，下面都不用腾位置了 </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;位置不合法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入第i个位置，将数组的i-1以及后面的数据全部往后挪一位，再进行插入</span></span><br><span class="line">    <span class="keyword">for</span>(j=L-&gt;Last;j&gt;=i;j--)   <span class="comment">// 从后往前依次向后挪一个，给 a[i]腾出位置     </span></span><br><span class="line">        L-&gt;Data[j+<span class="number">1</span>] = L-&gt;Data[j];   </span><br><span class="line">    L-&gt;Data[i] = X;    <span class="comment">//新元素插入</span></span><br><span class="line">    L-&gt;Last++;    <span class="comment">// Last仍然指向最后元素</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h5 id="数组元素的删除"><a href="#数组元素的删除" class="headerlink" title="数组元素的删除"></a>数组元素的删除</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> i,List L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="comment">//判断删除的位置是否越界</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span> || L-&gt;Last &lt;i)&#123;  <span class="comment">//位置越界，而删除最多到 L-&gt;Data[L-&gt;Last]</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;L-&gt;Data[%d]不存在元素&quot;</span>,i);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除第i个元素(即位置为i-1)，直接将位置为i以及后面元素全部往前挪一位</span></span><br><span class="line">    <span class="keyword">for</span>(j=i;j&lt;=L-&gt;Last;j++)   <span class="comment">// 从前往后依次向前挪一个，将 a[i] 覆盖了 </span></span><br><span class="line">        L-&gt;Data[j<span class="number">-1</span>] = L-&gt;Data[j];</span><br><span class="line">    L-&gt;Last--;  <span class="comment">// Last仍然指向最后元素</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="线性表之链表"><a href="#线性表之链表" class="headerlink" title="线性表之链表"></a>线性表之链表</h4><h5 id="链表的概述"><a href="#链表的概述" class="headerlink" title="链表的概述"></a>链表的概述</h5><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</p>
<ul>
<li>优点：有序添加、增删改速度快，对于链表数据结构，增加和删除只要修改元素中的指针就可以了</li>
<li>查询慢，如果要访问链表中一个元素，就需要从第一个元素开始查找</li>
<li>应用场景：如果应用需要经常插入和删除元素，就应该用链表</li>
</ul>
<h5 id="链表的定义和初始化"><a href="#链表的定义和初始化" class="headerlink" title="链表的定义和初始化"></a>链表的定义和初始化</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType; <span class="comment">// ElementType 可定义为任意类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	ElementType Data;   <span class="comment">//数据域 </span></span><br><span class="line">	List Next;   <span class="comment">// 下一个链表的地址 </span></span><br><span class="line">&#125;; </span><br><span class="line">List L;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化，创建一个空的头节点</span></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">	List L = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">	L = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="链表的查找"><a href="#链表的查找" class="headerlink" title="链表的查找"></a>链表的查找</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按序查找 </span></span><br><span class="line"><span class="function">List <span class="title">FindKth</span><span class="params">(<span class="keyword">int</span> K,List L)</span></span>&#123;</span><br><span class="line">	List p = L;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;  <span class="comment">//从 1 开始 </span></span><br><span class="line">	<span class="keyword">while</span>(p &amp;&amp; i&lt;K)&#123;</span><br><span class="line">		p = p-&gt;Next;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i == K)    <span class="comment">// 找到了 </span></span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">	<span class="keyword">else</span>    <span class="comment">// 未找到 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值查找  </span></span><br><span class="line"><span class="function">List <span class="title">Find</span><span class="params">(ElementType X,List L)</span></span>&#123;</span><br><span class="line">	List p = L;</span><br><span class="line">	<span class="keyword">while</span>(p &amp;&amp; p-&gt;Data!=X)</span><br><span class="line">		p = p-&gt;Next;</span><br><span class="line">	<span class="comment">// 找到了，返回 p</span></span><br><span class="line">	<span class="comment">// 未找到，返回 NULL，此时 p 等于 NULL </span></span><br><span class="line">	<span class="keyword">return</span> p;   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h5 id="链表的长度"><a href="#链表的长度" class="headerlink" title="链表的长度"></a>链表的长度</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(List L)</span></span>&#123;</span><br><span class="line">	List p = L;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;  <span class="comment">// 当 p 不为空 </span></span><br><span class="line">		p = p-&gt;Next;</span><br><span class="line">		len++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> len;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h5 id="链表节点的插入"><a href="#链表节点的插入" class="headerlink" title="链表节点的插入"></a>链表节点的插入</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">List <span class="title">Insert</span><span class="params">(ElementType X,<span class="keyword">int</span> i,List L)</span></span>&#123;</span><br><span class="line">	List p,s;</span><br><span class="line">	<span class="keyword">if</span>(i == <span class="number">1</span>)&#123;     <span class="comment">// 新结点插入在表头 </span></span><br><span class="line">		s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">		s-&gt;Data = X;</span><br><span class="line">		s-&gt;Next = L;</span><br><span class="line">		<span class="keyword">return</span> s;     <span class="comment">//插入的结点为头结点 </span></span><br><span class="line">	&#125;</span><br><span class="line">	p = FindKth(i<span class="number">-1</span>,L);   <span class="comment">// 找到第 i-1 个结点</span></span><br><span class="line">	<span class="keyword">if</span>(!p)&#123;   <span class="comment">// 第 i-1 个结点不存在 </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;结点错误&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">		s-&gt;Data = X;</span><br><span class="line">		s-&gt;Next = p-&gt;Next;   <span class="comment">//将 s 的下一个结点指向 p 的下一个结点 </span></span><br><span class="line">		p-&gt;Next = s;   <span class="comment">// 将 p 的下一结点改为 s</span></span><br><span class="line">		<span class="keyword">return</span> L;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="链表节点的删除"><a href="#链表节点的删除" class="headerlink" title="链表节点的删除"></a>链表节点的删除</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">List <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> i,List L)</span></span>&#123;</span><br><span class="line">	List p,t;</span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">1</span>)&#123;   <span class="comment">//如果要删除头结点 </span></span><br><span class="line">		t = L;</span><br><span class="line">		<span class="keyword">if</span>(L)   <span class="comment">// 如果不为空 </span></span><br><span class="line">			L = L-&gt;Next;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">free</span>(t);   <span class="comment">// 释放被删除结点 </span></span><br><span class="line">		<span class="keyword">return</span> L; </span><br><span class="line">	&#125;</span><br><span class="line">	p = FindKth(i<span class="number">-1</span>,L);    <span class="comment">// 查找第 i-1 个结点</span></span><br><span class="line">	<span class="keyword">if</span>(!p || !(p-&gt;Next))&#123;     <span class="comment">// 第 i-1 个或第 i 个结点不存在 </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;结点错误&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		t = p-&gt;Next;    <span class="comment">// t 指向第 i 个结点 </span></span><br><span class="line">		p-&gt;Next = t-&gt;Next;  <span class="comment">//从链表删除 </span></span><br><span class="line">		<span class="built_in">free</span>(t);  <span class="comment">// 释放被删除结点 </span></span><br><span class="line">		<span class="keyword">return</span> L;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="链表元素的遍历输出"><a href="#链表元素的遍历输出" class="headerlink" title="链表元素的遍历输出"></a>链表元素的遍历输出</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(List L)</span></span>&#123;</span><br><span class="line">	List t;</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">1</span>;<span class="comment">//使用flag来判断链表是否为空</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前链表为：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(t = L;t;t =t-&gt;Next)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,t-&gt;Data);</span><br><span class="line">		flag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(flag)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数组和链表的对比"><a href="#数组和链表的对比" class="headerlink" title="数组和链表的对比"></a>数组和链表的对比</h4><ul>
<li>对比1<ul>
<li>数组是将元素在内存中连续存放。</li>
<li>链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。</li>
</ul>
</li>
<li>对比2<ul>
<li>数组必须事先定义固定的长度，不能适应数据动态的增减的情况。当数据增加时，可能超出原先定义的元素个数；当数据减少时，造成内存浪费； </li>
<li>链表动态地进行存储分配，可以适应数据动态地增减的情况。</li>
</ul>
</li>
<li>对比3<ul>
<li>（静态）数组从栈中分配空间，对于程序员方便快速，但是自由度小；</li>
<li>链表从堆中分配空间，自由度大但是申请管理比较麻烦。</li>
</ul>
</li>
</ul>
<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><h4 id="什么是堆栈"><a href="#什么是堆栈" class="headerlink" title="什么是堆栈"></a>什么是堆栈</h4><p>堆栈是一种数据结构，而且是一种数据项按序排列的数据结构，只能在一端(称为栈顶(top))对数据项进行插入和删除。在单片机应用中，堆栈是个特殊的存储区，主要功能是暂时存放数据和地址，通常用来保护断点和现场。</p>
<h4 id="堆栈的特点"><a href="#堆栈的特点" class="headerlink" title="堆栈的特点"></a>堆栈的特点</h4><ul>
<li>只在一端（栈顶，Top）做插入、删除</li>
<li>后入(入栈（Push）) 先出(出栈（Pop）)</li>
</ul>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul>
<li>优点：提供后进先出的存储方式，添加速度快，允许重复</li>
<li>缺点：只能在一头操作数据，存取其他项很慢</li>
</ul>
<h4 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span> </span></span><br><span class="line"><span class="comment">//栈的顺序存储的定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100   <span class="comment">// 堆栈元素的最大个数 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType; <span class="comment">// ElementType 暂时定义为 int 类型 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span>&#123;</span></span><br><span class="line">	ElementType Data[MaxSize];   <span class="comment">// 存储堆栈元素</span></span><br><span class="line">	<span class="keyword">int</span> Top;  <span class="comment">// 记录栈顶元素下标 </span></span><br><span class="line">&#125;; </span><br><span class="line">Stack S;</span><br><span class="line"></span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span>;  <span class="comment">// 初始化堆栈 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span>; <span class="comment">// 判断堆栈是否已满 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;   <span class="comment">// 判断堆栈是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,ElementType item)</span></span>;   <span class="comment">// 入栈 </span></span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span>;   <span class="comment">// 出栈 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化堆栈 </span></span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">	S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">	S-&gt;Top = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> S;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否已满 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (S-&gt;Top == MaxSize<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (S-&gt;Top == <span class="number">-1</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,ElementType item)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先判断栈是否已满</span></span><br><span class="line">	<span class="keyword">if</span>(IsFull(S))&#123;   <span class="comment">// Top 从 0 开始 </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;堆栈满&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		S-&gt;Top++;   <span class="comment">// 栈顶元素加一 </span></span><br><span class="line">		S-&gt;Data[S-&gt;Top] = item;   <span class="comment">// 放进最上 </span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先判断栈是否为空</span></span><br><span class="line">	<span class="keyword">if</span>(IsEmpty(S))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;堆栈空&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		ElementType val = S-&gt;Data[S-&gt;Top];  <span class="comment">//取出最上 </span></span><br><span class="line">		S-&gt;Top--;  <span class="comment">// 栈顶元素减一 </span></span><br><span class="line">		<span class="keyword">return</span> val;<span class="comment">//返回取出来的元素</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//函数调用...</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="栈的链表存储实现"><a href="#栈的链表存储实现" class="headerlink" title="栈的链表存储实现"></a>栈的链表存储实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="comment">//栈的链式存储定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span>&#123;</span></span><br><span class="line">	ElementType Data;</span><br><span class="line">	Stack Next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span>;  <span class="comment">// 初始化链栈 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;  <span class="comment">// 判断链栈是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,ElementType item)</span></span>;  <span class="comment">// 入栈 </span></span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span>;  <span class="comment">// 出栈</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 </span></span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Stack S;</span><br><span class="line">	S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">	S-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (S-&gt;Next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,ElementType item)</span></span>&#123;</span><br><span class="line">	Stack temp;</span><br><span class="line">	temp = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">	temp-&gt;Data = item;</span><br><span class="line">	<span class="comment">// 链栈栈顶元素是链表头结点，新入栈的节点在栈顶元素(是刚开始创建链表时为空的节点)后面 </span></span><br><span class="line">	temp-&gt;Next = S-&gt;Next;   </span><br><span class="line">	S-&gt;Next = temp;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">	Stack First;</span><br><span class="line">	ElementType TopVal;</span><br><span class="line">    <span class="comment">//先判断栈是否为空</span></span><br><span class="line">	<span class="keyword">if</span>(IsEmpty(S))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;堆栈空&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//因为链表第一个元素时空的，所以栈的顶部是链表的第二个节点</span></span><br><span class="line">		First = S-&gt;Next;   <span class="comment">// 出栈第一个元素在栈顶元素后面 </span></span><br><span class="line">		S-&gt;Next = First-&gt;Next;  <span class="comment">//把第一个元素从链栈删除 </span></span><br><span class="line">		TopVal = First-&gt;Data;   <span class="comment">// 取出被删除结点的值 </span></span><br><span class="line">		<span class="built_in">free</span>(First);  <span class="comment">// 释放空间 </span></span><br><span class="line">		<span class="keyword">return</span> TopVal; <span class="comment">//返回出栈数据</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//函数调用...</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h3><h4 id="队列的概述"><a href="#队列的概述" class="headerlink" title="队列的概述"></a>队列的概述</h4><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p>
<h4 id="队列的分类"><a href="#队列的分类" class="headerlink" title="队列的分类"></a>队列的分类</h4><ul>
<li>顺序队列：建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置</li>
<li>循环队列：在实际使用队列时，为了使队列空间能重复使用，往往对队列的使用方法稍加改进：无论插入或删除，一旦rear指针增1或front指针增1 时超出了所分配的队列空间，就让它指向这片连续空间的起始位置</li>
</ul>
<h4 id="队列的特点"><a href="#队列的特点" class="headerlink" title="队列的特点"></a>队列的特点</h4><p>插入和删除操作：只能在一端（front）插入，而在另一端（rear）删除<br>先进(入队列) 先出(出队列)</p>
<h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><ul>
<li>优点：提供先进先出的存储方式，添加速度快，允许重复；</li>
<li>缺点：只能在一头添加，另一头获取，存取其他项很慢；</li>
</ul>
<h4 id="循环队列的顺序存储"><a href="#循环队列的顺序存储" class="headerlink" title="循环队列的顺序存储"></a>循环队列的顺序存储</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="comment">//循环队列的定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">Queue</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">	ElementType Data[MaxSize];</span><br><span class="line">	<span class="keyword">int</span> front;   <span class="comment">// 记录队头 </span></span><br><span class="line">	<span class="keyword">int</span> rear;    <span class="comment">// 记录队尾 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">()</span></span>;  <span class="comment">// 初始化队列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddQ</span><span class="params">(Queue Q,ElementType item)</span></span>;  <span class="comment">//  入队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Queue Q)</span></span>; <span class="comment">// 判断队列是否已满 </span></span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span>;  <span class="comment">// 出队 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>; <span class="comment">// 判断队列是否为空 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 </span></span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Queue Q;</span><br><span class="line">	Q = (Queue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct QNode));</span><br><span class="line">    <span class="comment">//front==rear时队列为空</span></span><br><span class="line">	Q-&gt;front = <span class="number">-1</span>;</span><br><span class="line">	Q-&gt;rear = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> Q;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否已满</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如队列的大小为100，front=0，rear=99,此时队列已满，那么怎么判断队列已满呢？如下return语句：</span></span><br><span class="line"> 	<span class="keyword">return</span> ((Q-&gt;rear+<span class="number">1</span>) % MaxSize == Q-&gt;front);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddQ</span><span class="params">(Queue Q,ElementType item)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先判断队列是否已满</span></span><br><span class="line">	<span class="keyword">if</span>(IsFull(Q))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;队列满&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="comment">//rear往前走一位，因为是循环队列，有可能是走到最开始的位置，所以使用(Q-&gt;rear+1) % MaxSize来使rear往前走一个位置</span></span><br><span class="line">		Q-&gt;rear = (Q-&gt;rear+<span class="number">1</span>) % MaxSize;</span><br><span class="line">		Q-&gt;Data[Q-&gt;rear] = item; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (Q-&gt;front == Q-&gt;rear);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先判断队列是否为空</span></span><br><span class="line">	<span class="keyword">if</span>(IsEmpty(Q))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;队列空&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//front也可能会走到最开始的位置，所以也是使用(Q-&gt;front+1) % MaxSize方法来使front往前走一个位置</span></span><br><span class="line">		Q-&gt;front = (Q-&gt;front+<span class="number">1</span>) % MaxSize;</span><br><span class="line">		<span class="keyword">return</span> Q-&gt;Data[Q-&gt;front];</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//函数调用...</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="队列的链式存储"><a href="#队列的链式存储" class="headerlink" title="队列的链式存储"></a>队列的链式存储</h4><p>队列使用链式存储就不存在空间的浪费了，所以就没有必要使用循环队列了。队列的链式存储判断队列是否为空时，直接判断front是否为null就可以了，当front==rear时，队列有一个元素。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义一个链式存储的队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">Queue</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	ElementType Data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">Next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">rear</span>;</span>    <span class="comment">// 指向队尾结点 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">front</span>;</span>   <span class="comment">// 指向队头结点 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">()</span></span>;  <span class="comment">// 初始化队列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddQ</span><span class="params">(Queue Q,ElementType item)</span></span>;  <span class="comment">//  入队</span></span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span>;  <span class="comment">// 出队 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>; <span class="comment">// 判断队列是否为空 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 </span></span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Queue Q;</span><br><span class="line">	Q = (Queue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct QNode));</span><br><span class="line">	Q-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">	Q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//当front为null时，队列为空</span></span><br><span class="line">	<span class="keyword">return</span> (Q-&gt;front == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddQ</span><span class="params">(Queue Q,ElementType item)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">node</span>;</span></span><br><span class="line">	node = (struct Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">	node-&gt;Data = item;</span><br><span class="line">	node-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//先判断队列是否为空，为空和不为空的入队操作不一样</span></span><br><span class="line">	<span class="keyword">if</span>(Q-&gt;rear==<span class="literal">NULL</span>)&#123;  <span class="comment">//此时队列空 </span></span><br><span class="line">		Q-&gt;rear = node;</span><br><span class="line">		Q-&gt;front = node;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123; <span class="comment">//不为空 </span></span><br><span class="line">		Q-&gt;rear-&gt;Next = node;  <span class="comment">// 将结点入队 </span></span><br><span class="line">		Q-&gt;rear = node;   <span class="comment">// rear 仍然保持最后 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">FrontCell</span>;</span><span class="comment">//用来存储出队的元素，然后释放这个元素的空间</span></span><br><span class="line">	ElementType FrontElem;<span class="comment">//用来存储出队元素的数据，作为函数的返回值</span></span><br><span class="line">    <span class="comment">//先判断队列是否为空</span></span><br><span class="line">	<span class="keyword">if</span>(IsEmpty(Q))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;队列空&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	FrontCell = Q-&gt;front;<span class="comment">//出队只能从最前面的元素出队</span></span><br><span class="line">	<span class="keyword">if</span>(Q-&gt;front == Q-&gt;rear)&#123; <span class="comment">// 队列中只有一个元素 </span></span><br><span class="line">		Q-&gt;front = Q-&gt;rear = <span class="literal">NULL</span>; </span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		Q-&gt;front = Q-&gt;front-&gt;Next;</span><br><span class="line">	&#125;</span><br><span class="line">	FrontElem = FrontCell-&gt;Data;</span><br><span class="line">	<span class="built_in">free</span>(FrontCell);<span class="comment">// 释放出队元素的空间</span></span><br><span class="line">	<span class="keyword">return</span> FrontElem;<span class="comment">//返回出队元素的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//函数调用...</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法概述</title>
    <url>/posts/ddb07891/</url>
    <content><![CDATA[<h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><p>定义：数据结构就是数据对象在计算机的组织方式，包括：包括逻辑结构和物理结构，而数据又必定与作用在数据上的操作(一般指增删改查操作)相关联，完成这些操作的方法就是算法(即算法就是对数据进行鞥删改查等操作的方法)</p>
<span id="more"></span>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="相关定义"><a href="#相关定义" class="headerlink" title="相关定义"></a>相关定义</h4><ul>
<li>数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。 ——Sartaj Sahni 《数据结构、算法与应用》</li>
<li>数据结构是 ADT（Abstract Data Type，数据抽象类型）的物理实现。 ——Clifford A.Shaffer 《数据结构与算法分析》</li>
<li>数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。 ——中文维基百科</li>
</ul>
<h4 id="什么和解决问题的效率相关"><a href="#什么和解决问题的效率相关" class="headerlink" title="什么和解决问题的效率相关"></a>什么和解决问题的效率相关</h4><ul>
<li>数据的组织方式</li>
<li>数据的空间利用效率</li>
<li>算法的巧妙程度</li>
</ul>
<h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><ul>
<li>什么是数据类型<br>数据类型包括数据对象集和数据对象相关联的操作集</li>
<li>什么是抽象数据类型<br>抽象数据类型即描述数据类型的方法不依赖于具体实现，也就是说与存放数据的机器无关、与数据存储的物理结构无关、与实现操作的算法和编程语言均无关，只描述数据对象集和操作集是什么，并不涉及如何做</li>
</ul>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h4><p>通过某种方法对某个数据结构中的数据进行操作，最后得出一个结果，这个操作数据结构中的数据的方法就是算法</p>
<h4 id="算法满足的条件"><a href="#算法满足的条件" class="headerlink" title="算法满足的条件"></a>算法满足的条件</h4><ul>
<li>是一个有限的指令集</li>
<li>可以有输入，也可以没有输入</li>
<li>必须要有输出</li>
<li>一定是在有限的步骤后终止</li>
<li>每一条指令必须有明确的目标，不可有歧义</li>
<li>复杂度要在计算机的处理范围之内</li>
<li>描述应不依赖于任何一种计算机语言以及具体的实现手段</li>
</ul>
<h4 id="描述算法好坏的方式"><a href="#描述算法好坏的方式" class="headerlink" title="描述算法好坏的方式"></a>描述算法好坏的方式</h4><p>使用算法复杂度来进行描述，包括：</p>
<ul>
<li>空间复杂度：算法执行时占存储空间的大小</li>
<li>时间复杂度：算法执行时耗费时间的长短</li>
</ul>
<h4 id="复杂度分析运算基本规则"><a href="#复杂度分析运算基本规则" class="headerlink" title="复杂度分析运算基本规则"></a>复杂度分析运算基本规则</h4><ul>
<li>顺序结构：直接相加</li>
<li>循环中：复杂度=一次循环的复杂度 x 循环次数</li>
<li>嵌套循环中：循环规模的乘积 x 一次循环的复杂度</li>
<li>if/else语句：选其中复杂度最高的</li>
<li>递归调用：递归的次数 x 每次递归中的操作次数</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>最大子列和问题的四种算法</title>
    <url>/posts/e87b7e2/</url>
    <content><![CDATA[<p>最大子列和问题有四种算法，直接算法和直接算法的改良版，分而治之算法和在线算法</p>
<span id="more"></span>

<h3 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h3><p>算法1是最笨的一种方法，就是将每一种可能性都计算一遍，并且每种可能的计算都是从头开始叠加，时间复杂度为O(n^3)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*最大子列和问题：求数组a[]中元素的最大子列和*/</span></span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">2</span>, -<span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span> , -<span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> thisSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxSum = <span class="number">0</span>;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//把每一种情况都列出来，然后进行比较，但是这种算法的时间复杂度是n的3次方，时间复杂度非常大</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; a.length; j ++)&#123;</span><br><span class="line">            thisSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; k ++)&#123;</span><br><span class="line">                thisSum += a[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum)&#123;</span><br><span class="line">                maxSum = thisSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(maxSum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如图，为i=1时thisSum的叠加：<br><img src="/posts/e87b7e2/%E7%AE%97%E6%B3%951.jpg"></p>
<h3 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h3><p>第二种方法时第一种方法的改进，也是将每一种可能都列举出来，但并不是种可能都是从开头进行叠加，而是在每次计算thisSum的结果后面进行叠加，然后进行比较，算法二的时间复杂度是O(n^2)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//这种方法也是把所有可能都列出来，然后进行比较，但是和上一种不同的是,这种方法不是每次都重头加起，而是在每次的结果后面进行叠加，得到结果,这种算法的时间复杂度是n的2次方，比上一次好了很多</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++)&#123;</span><br><span class="line">        thisSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; a.length; j ++)&#123;</span><br><span class="line">            thisSum += a[j];</span><br><span class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum)&#123;</span><br><span class="line">                maxSum = thisSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(maxSum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如图，为i=1时thisSum的叠加<br><img src="/posts/e87b7e2/%E7%AE%97%E6%B3%952.jpg"></p>
<h3 id="算法三"><a href="#算法三" class="headerlink" title="算法三"></a>算法三</h3><p>算法三是分而治之的算法，就是使用递归算法不停地从中间分隔开来，最后分解成一个不可分割的最小问题，通过求出小问题的解来一步步求出最后解的问题，这样讲很抽象，看图：<br><img src="/posts/e87b7e2/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B01.jpg">  </p>
<ul>
<li>首先，假设数组中有8个元素，如上图所示，我们先沿红色的线从中间分开，得到两部分，发现可以进一步的划分，直到使用黄色的线划分完毕。</li>
<li>再看4，-3，我们可以看出最大的值为4，这里我们记下最大值为4，然后看5，-2，记下最大值5.同样的道理可以得到最大值2，6。</li>
<li>下一步，我们来看跨越分割线的最大值，首先是4，-3，5，-2这4个数。从-3开始向右，得到最大的值要加到4，然后向左，得到最大的值为5，这样得到跨越边界的最大值为6，比较红线右侧得到的最大值，得到最大值为6。同理我们可以得到左侧的最大值为8.</li>
<li>同理继续向下，跨越红色的最大值为11，这样得到所有子空间的最大值为11。最后得出结果，代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//分而治之算法</span></span><br><span class="line">    <span class="keyword">int</span> result = MaxSubSeqSum3(a);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个求三个结果中最大的一个的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max3</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> center)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; right)&#123;</span><br><span class="line">        <span class="keyword">return</span> left &gt; center ? left : center;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right &gt; center ? right : center;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">DivideAndConquer</span><span class="params">( <span class="keyword">int</span>[] List, <span class="keyword">int</span> left, <span class="keyword">int</span> right )</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 分治法求List[left]到List[right]的最大子列和 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxLeftSum, MaxRightSum; <span class="comment">/* 存放左右子问题的解 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxLeftBorderSum, MaxRightBorderSum; <span class="comment">/*存放跨分界线的结果*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> LeftBorderSum, RightBorderSum;</span><br><span class="line">    <span class="keyword">int</span> center, i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( left == right )  &#123; <span class="comment">/* 递归的终止条件，子列只有1个数字 */</span></span><br><span class="line">        <span class="keyword">if</span>( List[left] &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> List[left];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面是&quot;分&quot;的过程 */</span></span><br><span class="line">    center = ( left + right ) / <span class="number">2</span>; <span class="comment">/* 找到中分点 */</span></span><br><span class="line">    <span class="comment">/* 递归求得两边子列的最大和 */</span></span><br><span class="line">    MaxLeftSum = DivideAndConquer( List, left, center );</span><br><span class="line">    MaxRightSum = DivideAndConquer( List, center+<span class="number">1</span>, right );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面求跨分界线的左边最大子列和 */</span></span><br><span class="line">    MaxLeftBorderSum = <span class="number">0</span>;</span><br><span class="line">    LeftBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( i=center; i&gt;=left; i-- ) &#123; <span class="comment">/* 从中线向左扫描 */</span></span><br><span class="line">        LeftBorderSum += List[i];</span><br><span class="line">        <span class="keyword">if</span>( LeftBorderSum &gt; MaxLeftBorderSum )</span><br><span class="line">            MaxLeftBorderSum = LeftBorderSum;</span><br><span class="line">    &#125; <span class="comment">/* 左边扫描结束 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面求跨分界线的右边最大子列和 */</span></span><br><span class="line">    MaxRightBorderSum = <span class="number">0</span>;</span><br><span class="line">    RightBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( i=center+<span class="number">1</span>; i&lt;=right; i++ )&#123; <span class="comment">/* 从中线向右扫描 */</span></span><br><span class="line">        RightBorderSum += List[i];</span><br><span class="line">        <span class="keyword">if</span>( RightBorderSum &gt; MaxRightBorderSum )</span><br><span class="line">            MaxRightBorderSum = RightBorderSum;</span><br><span class="line">    &#125; <span class="comment">/* 右边扫描结束 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面返回&quot;治&quot;的结果 */</span></span><br><span class="line">    <span class="comment">//传入左边最大值，右边最大值和跨边界最大值进行比较</span></span><br><span class="line">    <span class="keyword">return</span> max3( MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubSeqSum3</span><span class="params">( <span class="keyword">int</span>[] list)</span> </span>&#123; <span class="comment">//传入数组</span></span><br><span class="line">    <span class="comment">/* 保持与前2种算法相同的函数接口 */</span></span><br><span class="line">    <span class="keyword">return</span> DivideAndConquer( list, <span class="number">0</span>, list.length - <span class="number">1</span>);<span class="comment">//传入数组，数组的最左边和最右边的数组下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
代码过程图示：<br><img src="/posts/e87b7e2/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B02.jpg">  </li>
<li><em>注：建议自己debug来查看代码的运行过程进行理解</em>* </li>
</ul>
<h3 id="算法四"><a href="#算法四" class="headerlink" title="算法四"></a>算法四</h3><p>算法四为在线算法，每输入一个数据就进行在线处理，在任何一个地方终止输入，都能正确给出当前解，算法四的时间复杂度为O(n).过程如图所示：<br><img src="/posts/e87b7e2/%E7%AE%97%E6%B3%954.jpg"><br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用在线算法，输出最大子列和并输出子列的首尾</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (thisSum == <span class="number">0</span>)&#123;</span><br><span class="line">            first = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        thisSum += a[i];</span><br><span class="line">        <span class="keyword">if</span> (thisSum &gt; maxSum)&#123;</span><br><span class="line">            maxSum = thisSum;</span><br><span class="line">            last = a[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (thisSum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//只要thisSum小于0，那么再往后加都不可能使后一个thisSum变大，</span></span><br><span class="line">            <span class="comment">// 所以舍弃掉小于0的thisSum，并将thisSum赋值为0</span></span><br><span class="line">            thisSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(maxSum);</span><br><span class="line">    System.out.println(<span class="string">&quot;begin=&gt;&quot;</span> + first + <span class="string">&quot; | end=&gt;&quot;</span> + last);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>算法复杂度分析</title>
    <url>/posts/f3215fef/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>数据结构中的算法复杂度分析包括两个方面，一个是空间复杂度另一个是时间复杂度。</p>
<ul>
<li>空间复杂度：可以理解为把算法存储在计算机中需要多大的空间，如果需要空间太大，那这个算法也没法用</li>
<li>时间复杂度：可以理解为算法的运行时间，如果算法运行时间太长，那这个算法就没法用<span id="more"></span></li>
</ul>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>关于算法的空间复杂度《大话数据结构》这本书中是这么说的:</p>
<ul>
<li>算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n)=O(f(n))，其中n为问题的规模，f(n)为语句关于n所占存储空间的函数。  </li>
</ul>
<p>在平时的开发中更多的是用空间换时间，所以我们重点来说时间复杂度</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度的分析有两种方法：</p>
<ul>
<li>事后统计法</li>
<li>事前分析法</li>
</ul>
<h4 id="事后统计法"><a href="#事后统计法" class="headerlink" title="事后统计法"></a>事后统计法</h4><ul>
<li>事后统计法是用测试程序和数据来运行已编写好的算法，对其执行时间进行比较。这种方法看似可以精确的计算算法的执行时间，</li>
<li>缺点：<ul>
<li>编写算法时一件非常消耗精力的事情，当你消耗了大量精力编写出来了一个算法，但是时候统计这个算法时发现这个算法的时间复杂度非常大，不能用，那么消耗的时间和精力就白费了</li>
<li>算法的运行依赖计算机硬件和软件因素。同一个算法在不同的计算机上执行时间是不一样的。在不确定这个算法会用在什么样的计算机上时，少量的测试结果不具备可靠性。</li>
<li>算法的执行时间受数据规模的影响，如果时候统计时使用的数据规模不恰当，那么算法的统计测试就不准确</li>
</ul>
</li>
</ul>
<h4 id="事前分析法"><a href="#事前分析法" class="headerlink" title="事前分析法"></a>事前分析法</h4><ul>
<li>什么是事前分析法<br>事前分析法是不依赖具体的测试程序和数据，根据统计方法对算法执行效率进行分析的方法。</li>
</ul>
<h5 id="时间复杂度大O记法"><a href="#时间复杂度大O记法" class="headerlink" title="时间复杂度大O记法"></a>时间复杂度大O记法</h5><ul>
<li>公式：T(n)=O(f(n))<br>公式中的O表示代码的执行总时间T(n)和其执行总次数f(n)成正比<br>大O记法T(n)=O(f(n))，表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，表示的是算法的渐近时间复杂度，简称时间复杂度</li>
</ul>
<h5 id="时间复杂度的分析"><a href="#时间复杂度的分析" class="headerlink" title="时间复杂度的分析"></a>时间复杂度的分析</h5><h6 id="时间复杂度分析的基本法则"><a href="#时间复杂度分析的基本法则" class="headerlink" title="时间复杂度分析的基本法则"></a>时间复杂度分析的基本法则</h6><p>时间复杂度的分析的基本法则：四则运算法则</p>
<ul>
<li>加法法则，如果算法的代码是平行增加的，那么就需要加上相应的时间复杂度。</li>
<li>乘法法则，如果算法的代码增加的是循环内的嵌套或者函数的嵌套，那么就需要乘上相应的时间复杂度。</li>
<li>减法法则，如果是去掉算法中平行的代码，就需要减掉相应的时间复杂度。</li>
<li>除法法则，如果是去掉嵌套内的循环或函数，就需要除去相应的时间复杂度。</li>
</ul>
<h6 id="时间复杂度分析的常用的结论"><a href="#时间复杂度分析的常用的结论" class="headerlink" title="时间复杂度分析的常用的结论"></a>时间复杂度分析的常用的结论</h6><ul>
<li>加法的常数项可以忽略<ul>
<li>比如算法1:2n+2，算法2:5n+5，在n执行次数相同的情况下，算法1的是要好过算法2的效率的，当去掉算法1和2后面相加的常数时，算法1仍然优于算法2，所以算法的优劣与常数项的加减无关，与乘法有关</li>
</ul>
</li>
<li>在n的指数不同的情况下，除去最高阶项，其它次项可以忽略<ul>
<li>如算法1：2*pow(n,2)+2n+1,算法2：3n+4，可知算法2优于算法1，当算法1和2的n足够大的时候，那么算法1后面的2n+1和算法2后面的4就可以忽略，当算法1和2都只留下最高阶项，那么算法2依然优于算法1，由此可见，算法的优劣只和最高阶项有关</li>
</ul>
</li>
<li>在n的指数不同的情况下，与最高次项相乘的常数可以忽略<ul>
<li>如算法1：10*pow(n,2)，算法2:5n，可知算法2优于算法1，当去掉算法1和2最高次项前面相乘的常数时，算法2依然优于算法1，由此可见，算法的效率与和最高次项相乘的常数无关</li>
</ul>
</li>
<li>总结：对于时间复杂度的分析，只需要考虑乘法法则，并且只考虑最高次项的n的复杂度即可</li>
</ul>
<h6 id="常见时间复杂度"><a href="#常见时间复杂度" class="headerlink" title="常见时间复杂度"></a>常见时间复杂度</h6><p><img src="/posts/f3215fef/%E5%B8%B8%E8%A7%81%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg"></p>
<ul>
<li>常见时间复杂度的增速   </li>
</ul>
<p><img src="/posts/f3215fef/%E5%A2%9E%E9%80%9F.jpg"></p>
<ul>
<li>常数阶O(1)<br>对于这种与问题规模n无关(即每行代码的执行次数与n无关)，执行时间恒定的算法，其时间复杂度都记作O(1)，又称之为常数阶，ru以下代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    sum = n * <span class="number">2</span>;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
上面代码中每行代码只执行一次，代码的执行次数和n无关，所以实践复杂度为O(1)。根据加法法则来不应该是O(3)吗？不是的，在时间复杂度分析的基本法则中还有一个法则：用常数1取代运行时间中的所有加法常数，也就是常数的加法法则运算出来的复杂度统一使用O(1)来表示。</li>
<li>对数阶O(logn)<br>如下代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logarithm</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">while</span> (count &lt;= n) &#123; <span class="comment">// 执行logn次</span></span><br><span class="line">        count = count * <span class="number">3</span>; <span class="comment">// 执行logn次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这段代码的时间复杂度是多找呢？这段的执行次数和n有关，需要多少个3相乘才能使count大于n，也就是3^x&gt;n，循环中的代码执行了log3n次，所以呢这段代码的时间复杂度是log3n底数为3的logn是吗？不对，这个也有一个原则，就是不管底数为多找，统一都是logn的时间复杂度，所以这段代码的时间复杂度是logn </li>
<li>线性阶O(n)<br>代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">circle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; 2n; i++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">        System.out.println(i); <span class="comment">// 执行n次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这段代码执行了2n次，所以时间复杂度为O(2n),但根据与“最高次项相乘的常数可以忽略”，所以这段代码的复杂度是O(n)</li>
<li>线性对数阶 O(nlogn)<br>由函数nlogn可知，代码执行了n*logn次，代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logarithm</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">while</span> (count &lt;= n) &#123; <span class="comment">// 执行logn次</span></span><br><span class="line">            count = count*<span class="number">2</span>; <span class="comment">// 执行nlogn次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>平方阶 O(n²)<br>如下代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;n; j++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            System.out.println(i+j); <span class="comment">// 执行n方次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
根据乘法法则，可知外循环循环了n次，内循环也循环了n次，所以实践复杂度为O(n^2)，当内循环的次数不一样怎么办？如<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;2n; j++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            System.out.println(i+j); <span class="comment">// 执行n方次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;m; j++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            System.out.println(i+j); <span class="comment">// 执行n方次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
前者的时间复杂度为O(2n^2)，因为“最高次项相乘的常数可以忽略”，所以是O(n^2)，后者的时间复杂度为O(n*m)<h6 id="最好、最坏、平均时间复杂度"><a href="#最好、最坏、平均时间复杂度" class="headerlink" title="最好、最坏、平均时间复杂度"></a>最好、最坏、平均时间复杂度</h6>我们以判断一个目标值在数组中是否存在为例来看一下如何进行最好、最坏、平均情况时间复杂度的分析，假设目标值在数组中要么唯一存在要么不存在，代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> exist = <span class="keyword">false</span>; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">int</span> n = arr.length; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            exist= <span class="keyword">true</span>; <span class="comment">// 执行一次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exist; <span class="comment">// 执行一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
由上面代码可知，时间复杂度为O(n)，但是我们从数组中找到了目标值后就不需要再继续往下循环了啊，所以代码改为：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> exist = <span class="keyword">false</span>; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">int</span> n = arr.length; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            exist= <span class="keyword">true</span>; <span class="comment">// 执行一次</span></span><br><span class="line">            <span class="keyword">break</span>；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exist; <span class="comment">// 执行一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
对于优化后的代码，使用O(n)的时间复杂度来描述的话，显然不合适，因为我们不确定代码是否执行了n次，有可能执行到一半就找到了，所以就有了最好最坏时间复杂度。</li>
<li>最好时间复杂度是第一次就找到了，那么代码只执行了一次，时间复杂度为O(1)</li>
<li>最坏时间复杂度是目标数在最后一个或者没有目标数在里面，那么就要找n次才能找到或者都找不到，这时时间复杂度为O(n)</li>
<li>最好和最坏的时间复杂度都不能够整体表现出这段代码的时间复杂度，这就有了平均时间复杂度，平均时间复杂度的计算是有n+1中可能(其中一种为找不到)，每种可能的情况要找的次数都不一样，平均复杂度就等于所有可能要找的次数加起来除以总的可能数，如下：<br><img src="/posts/f3215fef/%E5%B9%B3%E5%9D%87%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg"></li>
</ul>
<h6 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h6><p>之前介绍的复杂度分析是基于一个算法从头运行到尾，我们来看其时间复杂度是怎么样的。有时，会出现一个算法的复杂度比较高，但是该算法是和其它操作是一起的，在<strong>将这个较高复杂度的算法和其它操作一起进行复杂度分析时，需要将其均摊到其它操作上，这种分析称之为均摊复杂度分析。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">// 数组中已存储的元素格式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity; <span class="comment">// 数组中可容纳的最大元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyVector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        size= <span class="number">0</span>;</span><br><span class="line">        capacity = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向数组末尾添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushBack</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果原有数组已满，则扩容为原数组的2倍</span></span><br><span class="line">        <span class="keyword">if</span> (size == capacity) &#123;</span><br><span class="line">            resize(<span class="number">2</span>*capacity);</span><br><span class="line">        &#125;</span><br><span class="line">        data[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扩阵容方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity &lt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] newData = <span class="keyword">new</span> <span class="keyword">int</span>[newCapacity];</span><br><span class="line">        <span class="comment">// 把原有数组中的元素一次复制到新的数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data = newData;</span><br><span class="line">        capacity = newCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上代码所示，pushBack方法中调用了resize方法，而resize方法的时间复杂度是O(n)，那么pushBack方法的时间复杂度是O(n)还是O(1)？我们分开来讨论，当pushBack方法执行一次向末尾添加元素时，直到添加到n次时间复杂度都是O(1)，但当执行第n+1次时，时间复杂度是O(n)，那么n+1次的总和是执行了2n+1次，当我们将n+1次执行的时间复杂度均摊下来，那么就差不多每次执行的耗时为2，即每次执行分摊下来的时间复杂度是O(2)；所以pushBack方法的时间复杂度是O(1)，不是O(n);</p>
<p>参考文章：<a href="https://zhuanlan.zhihu.com/p/361636579">https://zhuanlan.zhihu.com/p/361636579</a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud-Config远程配置</title>
    <url>/posts/6e1ccf81/</url>
    <content><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文简单介绍了springCloud-Config远程配置，包括springCloud-Config的概述，git环境的搭建，远程配置的实战小案例</p>
<span id="more"></span>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="什么是springCloud-Config"><a href="#什么是springCloud-Config" class="headerlink" title="什么是springCloud-Config"></a>什么是springCloud-Config</h4><ul>
<li>微服意味着将一个单体的应用拆分成很多个子服务，每个子服务的粒度相对较小，所以一个单体应用可以拆分为很多的子服务，那么每个服务都有属于自己的配置文件，如果一个项目中有上百个子服务，要修改配置文件的话，就要打开上百个服务的配置文件进行修改，这样工作量巨大，而springCloud-Config就是为解决这个问题而来的，springCloud-Config将所有的配置文件放到云端进行管理，如果想要修改配置文件，只需要在云端上找到对应的配置文件进行修改即可，不用打开每个服务再打开对应的配置文件去修改，而服务启动时，只需要到云端获取其对应的配置文件即可，如图所示：<br><img src="/posts/6e1ccf81/springcloud-config.jpg"></li>
<li>spring cloud config 为微服务架构中的微服务提供集中化的外部支持，配置服务器为各个不同微服务应用的所有环节提供了一个中心化的外部配置。</li>
<li>spring cloud config 分为服务端和客户端两部分。<ul>
<li>服务端也称为 分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密，解密信息等访问接口。</li>
<li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。  </li>
</ul>
</li>
<li>配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理。并且可用通过git客户端工具来方便的管理和访问配置内容。</li>
</ul>
<h4 id="springCloud-Config分布式配置的作用"><a href="#springCloud-Config分布式配置的作用" class="headerlink" title="springCloud-Config分布式配置的作用"></a>springCloud-Config分布式配置的作用</h4><ul>
<li>集中式管理配置文件</li>
<li>不同环境，不同配置，动态化的配置更新，分环境部署，比如/dev/test/prod/beta/release</li>
<li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li>
<li>当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置</li>
<li>将配置信息以REST接口的形式暴露</li>
</ul>
<h3 id="git环境搭建"><a href="#git环境搭建" class="headerlink" title="git环境搭建"></a>git环境搭建</h3><h4 id="git的下载"><a href="#git的下载" class="headerlink" title="git的下载"></a>git的下载</h4><ul>
<li>git下载官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><h4 id="git配置gitee或者github"><a href="#git配置gitee或者github" class="headerlink" title="git配置gitee或者github"></a>git配置gitee或者github</h4></li>
<li>环境搭建参考地址：<a href="https://cloud.tencent.com/developer/article/1774890">https://cloud.tencent.com/developer/article/1774890</a> (此处使用gitee演示)</li>
<li>gitee帮助文档：<a href="http://git.mydoc.io/?t=180845#text_180676">http://git.mydoc.io/?t=180845#text_180676</a></li>
<li>github中文帮助文档：<a href="https://www.w3cschool.cn/githubcn/githubcn-9a5i3a8s.html">https://www.w3cschool.cn/githubcn/githubcn-9a5i3a8s.html</a><h4 id="gitee远程连接测试"><a href="#gitee远程连接测试" class="headerlink" title="gitee远程连接测试"></a>gitee远程连接测试</h4></li>
<li>在gitee上创建一个远程仓库<br>参考：<a href="https://gitee.com/help/articles/4120">https://gitee.com/help/articles/4120</a>  </li>
<li>你想要将仓库下载到哪个文件夹，就在哪个文件夹使用git下载下来，步骤如下：<ul>
<li>在对应的想要下载的文件夹中，右键点击，选择git brush here </li>
<li>在git页面中输入<code>git clone +ssh仓库地址</code><br><img src="/posts/6e1ccf81/%E4%B8%8B%E8%BD%BD.jpg"></li>
<li>下载完毕后，进入仓库的文件夹，发现仓库中的所有文件已经下载过来了</li>
</ul>
</li>
<li>在仓库文件夹创建一个application.yaml配置文件，并编写配置文件<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-test</span></span><br></pre></td></tr></table></figure></li>
<li>在仓库文件夹中进入git页面，并将所有文件添加到暂存区：<code>git add .</code></li>
<li>查看暂存区状态(查看添加的文件有没有被添加到暂存区)：<code>git status</code></li>
<li>提交到本地<code>git commit -m &quot;first commit&quot;</code>(-m后是提交时的描述消息)</li>
<li>提交到远程<code>git push origin master</code>(其中origin是当前用户，master是要提交到的分支)</li>
<li>查看gitee远程仓库，刷新，发现已经提交到了远程仓库，远程连接测试完成！</li>
</ul>
<h3 id="远程配置的使用"><a href="#远程配置的使用" class="headerlink" title="远程配置的使用"></a>远程配置的使用</h3><h4 id="配置管理中心的创建"><a href="#配置管理中心的创建" class="headerlink" title="配置管理中心的创建"></a>配置管理中心的创建</h4><ul>
<li>新建一个springcloud-config-server-3344配置管理中心模块，目录如下：<br><img src="/posts/6e1ccf81/%E7%9B%AE%E5%BD%9501.jpg">  </li>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接远程仓库的服务端依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入eureka客户端，集成了ribbon--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--完善监控信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写配置文件<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-server-3344</span></span><br><span class="line">  <span class="attr">cloud:</span> <span class="comment">#连接远程仓库</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">force-pull:</span> <span class="literal">true</span> <span class="comment">#设置强行pull拉取</span></span><br><span class="line">          <span class="comment">#git连接使用http的地址，git下载使用ssh地址</span></span><br><span class="line">          <span class="comment">#通过访问3344端口来访问到uri的地址，然后在端口后面加上要访问的对应的文件即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/yanxiaoStudy/springcloud-config.git</span></span><br><span class="line"><span class="comment"># 不加这个配置会报Cannot execute request on any known server 这个错：连接Eureka服务端地址不对</span></span><br><span class="line"><span class="comment"># 或者直接注释掉eureka依赖 这里暂时用不到eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>编写启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span> <span class="comment">//开启远程连接服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig_server_3344</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfig_server_3344.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>HTTP服务具有以下格式的访问资源的方式：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure></li>
<li>启动3344端口的配置管理中心，访问 <a href="http://localhost:3344/application-dev.yaml">http://localhost:3344/application-dev.yaml</a> ==&gt; <code>/&#123;application&#125;-&#123;profile&#125;.yml</code><br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9501.jpg"></li>
<li>访问 <a href="http://localhost:3344/application/test/master">http://localhost:3344/application/test/master</a> ==&gt; <code>/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</code><br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9502.jpg"></li>
<li>访问 <a href="http://localhost:3344/master/application-dev.yml">http://localhost:3344/master/application-dev.yml</a> ==&gt; <code>/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</code><br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9503.jpg"></li>
</ul>
<h4 id="服务端的创建"><a href="#服务端的创建" class="headerlink" title="服务端的创建"></a>服务端的创建</h4><ul>
<li>新建一个springcloud-config-client-3355客户端模块，目录如下：<br><img src="/posts/6e1ccf81/%E7%9B%AE%E5%BD%9502.jpg">  </li>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接远程仓库的客户端依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--完善监控信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处测试暂时不导入Eureka--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写放到远程仓库的配置文件，在仓库文件夹创建一个config-client.yaml文件，编写好配置文件，并按照上面测试上传application.yaml配置文件一样上传到远程仓库中<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8201</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-8201</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">client:</span> </span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eeureka/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8202</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-8202</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">client:</span> </span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eeureka/</span></span><br></pre></td></tr></table></figure></li>
<li>编写客户端服务中resources下的配置文件<ul>
<li>application.yaml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户级别的配置文件</span></span><br><span class="line"><span class="comment">#server:</span></span><br><span class="line"><span class="comment">#port: 8203</span></span><br><span class="line"><span class="comment">#此处不用配置端口号，配置了也没用，还是会使用远程配置文件的端口号，在服务启动时可以在控制台上看到这个服务使用的端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-client-3355</span></span><br></pre></td></tr></table></figure></li>
<li>bootstrap.yaml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统级别的配置文件</span></span><br><span class="line"><span class="comment">#客户端到服务端中拿仓库中对应的东西，服务端从云端上拿客户端需要的东西</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-client</span> <span class="comment">#要拿的文件的名称，不需要写后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#要拿的文件中的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#从哪个分支上拿</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#服务端的地址</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>编写启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig_client_3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfig_client_3355.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写controller<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自动注入配置文件中的spring.application.name配置的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line">    <span class="comment">//自动注入配置文件中的eureka.client.service-url.defaultZone配置的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;eureka.client.service-url.defaultZone&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String eurekaServer;</span><br><span class="line">    <span class="comment">//自动注入配置文件中的server.port配置的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">config</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;applicationName=&gt;&quot;</span> + applicationName +</span><br><span class="line">                <span class="string">&quot;&lt;br&gt;eurekaServer=&gt;&quot;</span> + eurekaServer +</span><br><span class="line">                <span class="string">&quot;&lt;br&gt;port=&gt;&quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动3344，3355客户端服务，访问 <a href="http://localhost:8201/config">http://localhost:8201/config</a><br>注：服务端写的是3355端口，但是远程仓库中的端口为8201端口，服务启动时会在控制台有提示，启动的是8201端口，所以访问的是8201端口<br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9504.jpg">  </li>
</ul>
<h4 id="实战小案例"><a href="#实战小案例" class="headerlink" title="实战小案例"></a>实战小案例</h4><h5 id="案列流程"><a href="#案列流程" class="headerlink" title="案列流程"></a>案列流程</h5><p><img src="/posts/6e1ccf81/%E6%B5%81%E7%A8%8B01.jpg">  </p>
<h5 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h5><ul>
<li>创建错误注册中心模块，目录如下：<br><img src="/posts/6e1ccf81/%E7%9B%AE%E5%BD%9503.jpg">  </li>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接远程仓库的客户端依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写配置文件config-eureka-server，提交到远程仓库<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-eureka-7001</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment"># 配置Eureka的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka的配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># 配置eureka的主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否向eureka注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># fetch-registry为false表示这个程序自己为服务中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 配置访问eureka服务的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure></li>
<li>编写application.yaml和bootstrap.yaml配置文件<ul>
<li>application.yaml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户级别的配置文件</span></span><br><span class="line"><span class="comment">#此处不用配置端口号，配置了也没用，还是会使用远程配置文件的端口号，在服务启动时可以在控制台上看到这个服务使用的端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-eureka-7001</span></span><br></pre></td></tr></table></figure></li>
<li><ul>
<li>bootstrap.yaml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统级别的配置文件</span></span><br><span class="line"><span class="comment">#客户端到服务端中拿仓库中对应的东西，服务端从云端上拿客户端需要的东西</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-eureka-server</span> <span class="comment">#要拿的文件的名称，不需要写后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#要拿的文件中的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#从哪个分支上拿</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#服务端的地址</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>编写主启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//开启eureka服务端，启动服务后访问http://localhost:7001/地址进入监控页面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaConfigServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaConfigServer_7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h5><ul>
<li>复制springcloud-provider-dept-hystrix-8001服务提供者模块，修改为springcloud-config-dept-8001模块，目录如下：<br><img src="/posts/6e1ccf81/%E7%9B%AE%E5%BD%9504.jpg">  </li>
<li>添加依赖 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--连接远程仓库的客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建config-eureka-client.yaml配置文件，并将配置文件提交到远程仓库<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment">#配置mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.tSmile.springcloud.pojo</span> <span class="comment"># 为这个包下的实体类起别名</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span> <span class="comment"># 绑定mapper包下的所有mapper.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="comment"># 绑定mybatis可信配置文件</span></span><br><span class="line"><span class="comment">#配置spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-provider-dept</span> <span class="comment">#设置spring配置的名称</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment">#配置数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db01?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置eureka服务提供者</span></span><br><span class="line"><span class="comment">#eureka自我保护机制：当服务中心突然崩了，或者突然很多服务被判断死亡了，那么就会触发eureka的自我保护机制，</span></span><br><span class="line"><span class="comment">#也就是会把所有的服务全部保存下来，不会删除那些被判断死亡的服务，如果服务中心好了，那么会再恢复那些有心跳的服务</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置到哪里注册</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-hystrix-dept-8001</span> <span class="comment">#修改服务的描述链接的名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置完善服务的描述</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">tSmile-springcloud</span> <span class="comment">#编写服务名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">com.tSmile.springcloud</span> <span class="comment">#编写公司名称</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment">#配置mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.tSmile.springcloud.pojo</span> <span class="comment"># 为这个包下的实体类起别名</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span> <span class="comment"># 绑定mapper包下的所有mapper.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="comment"># 绑定mybatis可信配置文件</span></span><br><span class="line"><span class="comment">#配置spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-dept</span> <span class="comment">#设置spring配置的名称</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment">#配置数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db02?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置eureka服务提供者</span></span><br><span class="line"><span class="comment">#eureka自我保护机制：当服务中心突然崩了，或者突然很多服务被判断死亡了，那么就会触发eureka的自我保护机制，</span></span><br><span class="line"><span class="comment">#也就是会把所有的服务全部保存下来，不会删除那些被判断死亡的服务，如果服务中心好了，那么会再恢复那些有心跳的服务</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置到哪里注册</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-hystrix-dept-8001</span> <span class="comment">#修改服务的描述链接的名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置完善服务的描述</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">tSmile-springcloud</span> <span class="comment">#编写服务名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">com.tSmile.springcloud</span> <span class="comment">#编写公司名称</span></span><br></pre></td></tr></table></figure></li>
<li>删除原来的8001配置文件，并编写application.yaml和bootstrap.yaml配置文件<ul>
<li>application.yaml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户级别的配置文件</span></span><br><span class="line"><span class="comment">#此处不用配置端口号，配置了也没用，还是会使用远程配置文件的端口号，在服务启动时可以在控制台上看到这个服务使用的端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-dept-8001</span></span><br></pre></td></tr></table></figure></li>
<li>bootstrap.yaml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统级别的配置文件</span></span><br><span class="line"><span class="comment">#客户端到服务端中拿仓库中对应的东西，服务端从云端上拿客户端需要的东西</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-eureka-client</span> <span class="comment">#要拿的文件的名称，不需要写后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#要拿的文件中的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#从哪个分支上拿</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#服务端的地址</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>修改启动类的名称为ConfigDeptProviderHystrix_8001  </li>
</ul>
<h5 id="修改9527客户端服务"><a href="#修改9527客户端服务" class="headerlink" title="修改9527客户端服务"></a>修改9527客户端服务</h5><ul>
<li>修改springcloud-zuul-9527的配置文件，在serviceId处添加一个服务提供者<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置zuul网关</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment">#zuul就做了两件事情：路由统一routes和过滤ignored-services、prefix</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">keys:</span></span><br><span class="line">      <span class="comment">#修改原来的服务的名称，将原来的springcloud-provider-dept改为mydept</span></span><br><span class="line">      <span class="comment">#通过改变服务的名称来隐藏服务的真实名称</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/mydept/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">springcloud-provider-dept,springcloud-config-provider-dept</span></span><br><span class="line">  <span class="comment">#忽略服务，即不能再使用原来的springcloud-provider-dept服务名称来访问服务，</span></span><br><span class="line">  <span class="comment">#只能通过zuul网关配置的mydept来访问该服务</span></span><br><span class="line">  <span class="comment">#ignored-services: springcloud-provider-dept</span></span><br><span class="line">  <span class="comment">#一般使用*号屏蔽全部使用真实服务的访问</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="comment">#添加同一的访问前缀，这样使用原来没有添加前缀时的路径访问不了</span></span><br><span class="line">  <span class="comment">#原来：http://www.tsmile.com:9527/mydept/dept/getOne/3</span></span><br><span class="line">  <span class="comment">#添加后：http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/3</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/tsmile</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul>
<li><p>启动3344配置管理中心服务</p>
</li>
<li><p>启动7001服务注册中心</p>
</li>
<li><p>启动8001服务提供者</p>
</li>
<li><p>访问 <a href="http://localhost:7001/">http://localhost:7001/</a> ，查看服务提供者是否被注册<br><img src="/posts/6e1ccf81/%E6%B3%A8%E5%86%8C.jpg">  </p>
</li>
<li><p>启动9527服务消费者</p>
</li>
<li><p>访问 <a href="http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/1">http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/1</a> 进行测试<br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9505.jpg">  </p>
</li>
</ul>
<p>本文是观看狂神说B站视频后整理的笔记——侵删<br>视频地址：<a href="https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver">https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver</a></p>
]]></content>
      <categories>
        <category>springCloud</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud-Netflix四大核心组件</title>
    <url>/posts/8e9cec17/</url>
    <content><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文简单介绍了springCloud-Netflix的四大核心组件，其中包括Eureka，Ribbon，Hystrix和Zuul，并对这四个组建的使用进行了简单的描述，本文内容较多，要耐心才能看完哦!</p>
<span id="more"></span>
<h3 id="服务注册与发现——Eureka"><a href="#服务注册与发现——Eureka" class="headerlink" title="服务注册与发现——Eureka"></a>服务注册与发现——Eureka</h3><h4 id="什么是Eureka服务注册中心"><a href="#什么是Eureka服务注册中心" class="headerlink" title="什么是Eureka服务注册中心"></a>什么是Eureka服务注册中心</h4><ul>
<li>Eureka是Netflix的一个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了</li>
<li>Eureka采用了C-S(client-server)的架构设计，EurekaServer作为服务注册功能的服务器，他同时也是服务注册中心，而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑</li>
</ul>
<h4 id="Eureka执行原理图"><a href="#Eureka执行原理图" class="headerlink" title="Eureka执行原理图"></a>Eureka执行原理图</h4><p><img src="/posts/8e9cec17/eureka%E5%8E%9F%E7%90%86.jpg"><br>Eureka-Server：提供服务的注册与发现，即Eureka注册中心<br>Service-Provider：服务提供者，将自身服务注册到Eureka中，从而使服务消费者能够找到<br>Service-Consumer：服务消费者，从Eureka中获取注册服务列表，从而找到消费服务  </p>
<h4 id="使用Eureka与不使用Eureka的对比图"><a href="#使用Eureka与不使用Eureka的对比图" class="headerlink" title="使用Eureka与不使用Eureka的对比图"></a>使用Eureka与不使用Eureka的对比图</h4><p><img src="/posts/8e9cec17/eureka%E7%90%86%E8%A7%A3.jpg"></p>
<h4 id="Eureka的两个组件：Eureka-Server和Eureka-Client"><a href="#Eureka的两个组件：Eureka-Server和Eureka-Client" class="headerlink" title="Eureka的两个组件：Eureka-Server和Eureka-Client"></a>Eureka的两个组件：Eureka-Server和Eureka-Client</h4><ul>
<li>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到；在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s)</li>
<li>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器</li>
</ul>
<h4 id="使用Eureka服务注册与发现"><a href="#使用Eureka服务注册与发现" class="headerlink" title="使用Eureka服务注册与发现"></a>使用Eureka服务注册与发现</h4><p>基本思路：导入依赖–&gt;编写配置文件–&gt;编写启动类–&gt;注解开启@Enablexxx<br>注：如果创建的是springBoot模块就不用编写启动类，如果创建的是普通maven模块就需要编写启动类</p>
<h5 id="创建一个Eureka服务模块springcloud-eureka-7001"><a href="#创建一个Eureka服务模块springcloud-eureka-7001" class="headerlink" title="创建一个Eureka服务模块springcloud-eureka-7001"></a>创建一个Eureka服务模块springcloud-eureka-7001</h5><ul>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;已过时--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--官方推荐--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建application.yaml配置文件，并进行配置<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment"># 配置Eureka的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka的配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># 配置eureka的主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否向eureka注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># fetch-registry为false表示这个程序自己为服务中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="comment"># 配置访问eureka服务的地址</span></span><br></pre></td></tr></table></figure></li>
<li>编写启动类并使用注解开启服务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//开启eureka服务端，启动服务后访问http://localhost:7001/地址进入监控页面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>目录<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9504.jpg"></li>
<li>启动服务，测试进入监控页面<br>访问：<a href="http://localhost:7001/">http://localhost:7001/</a> 进入监控页面<h5 id="修改原来的springcloud-provider-dept-8001模块"><a href="#修改原来的springcloud-provider-dept-8001模块" class="headerlink" title="修改原来的springcloud-provider-dept-8001模块"></a>修改原来的springcloud-provider-dept-8001模块</h5></li>
<li>添加依赖 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--完善监控信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在配置文件中添加配置<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置eureka服务提供者</span></span><br><span class="line"><span class="comment">#eureka自我保护机制：当服务中心突然崩了，或者突然很多服务被判断死亡了，那么就会触发eureka的自我保护机制，</span></span><br><span class="line"><span class="comment">#也就是会把所有的服务全部保存下来，不会删除那些被判断死亡的服务，如果服务中心好了，那么会再恢复那些有心跳的服务</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置到哪里注册</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-8001</span> <span class="comment">#修改服务的描述链接的名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#true会将instance-id的地址改为IP地址，不再是localhost</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置完善服务的描述</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">tSmile-springcloud</span> <span class="comment">#编写服务名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">com.tSmile.springcloud</span> <span class="comment">#编写公司名称</span></span><br></pre></td></tr></table></figure></li>
<li>在启动类上使用注解开启服务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启eureka客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务springcloud-provider-dept-8001，进入7001监控页面刷新<br>服务已经注册已经注册到注册中心了<br><img src="/posts/8e9cec17/%E6%B3%A8%E5%86%8C01.jpg"><br>可以看到自己配置的信息<br><img src="/posts/8e9cec17/info.jpg"></li>
</ul>
<h4 id="Eureka服务保护机制"><a href="#Eureka服务保护机制" class="headerlink" title="Eureka服务保护机制"></a>Eureka服务保护机制</h4><ul>
<li>关掉上面的8001端口springcloud-provider-dept-8001服务，等待超过30秒，刷新7001监控页面<br><img src="/posts/8e9cec17/%E8%87%AA%E6%88%91%E4%BF%9D%E6%8A%A4.jpg"></li>
<li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（默认是90秒），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，实际是当一分钟内收到的心跳数大量减少时，会触发eureka的保护机制，即某时刻某一个或多个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存，因为在短时间内很多服务都出现了不可用现象，那么eureka会认为这是服务异常或者崩溃，所以这些不是正常停止的服务数据就会被保留下来，但是不能被访问，直到这些服务恢复了，eureka就会重新启用这些服务。</li>
<li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，除非重启该服务，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</li>
<li>可以在配置文件中通过<code>eureka.server.enable-self-preservation=false</code>关闭自我保护机制，但是不建议关闭自我保护机制</li>
</ul>
<h4 id="获取注册中心中的服务信息"><a href="#获取注册中心中的服务信息" class="headerlink" title="获取注册中心中的服务信息"></a>获取注册中心中的服务信息</h4><p>服务注册到注册中心时，是将什么信息注册进去呢？客户端是怎样在注册中心获取注册服务的信息来调用对应的服务的呢？我们来看一下</p>
<ul>
<li>在springcloud-provider-dept-8001提供者服务模块的DeptController中添加一个获取服务信息的controller <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取注册进来的微服务的信息</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/dept/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取所有的注册了的服务清单</span></span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    System.out.println(<span class="string">&quot;discovery===&gt;services&quot;</span> + services);</span><br><span class="line">    <span class="comment">//获取具体微服务的信息，信息被封装在了list集合中了,通过服务的application名称获取对应的服务的信息</span></span><br><span class="line">    <span class="comment">//instances封装了对应的服务的信息，可以通过调用其方法获取</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;SPRINGCLOUD-PROVIDER-DEPT&quot;</span>);</span><br><span class="line">    <span class="comment">//循环遍历所有的信息</span></span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">&quot;服务具体信息===&gt;&quot;</span> +</span><br><span class="line">                instance.getInstanceId() + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                instance.getHost() + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                instance.getPort() + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在主启动类上添加开启服务发现的注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启服务发现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，可以直接访问服务提供者的对应的controller，也可以配置服务消费者，通过服务消费者访问服务提供者的controller，此处测试为了简便，直接访问服务提供者的controller（一般不会这么做，因为后面添加网关时会过滤掉直接访问服务者的请求，直接访问的话就访问不了了）<br>访问地址：<a href="http://localhost:8001/dept/discovery">http://localhost:8001/dept/discovery</a><br>页面输出<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF02.jpg"><br>控制台输出<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF01.jpg"></li>
</ul>
<h4 id="Eureka集群环境配置"><a href="#Eureka集群环境配置" class="headerlink" title="Eureka集群环境配置"></a>Eureka集群环境配置</h4><ul>
<li>什么是Eureka集群环境<br>Eureka集群环境就是创建多个Eureka服务注册中心模块，将所有服务都注入到这些服务注册中心里</li>
<li>为什么要配置Eureka集群环境<br>之所以进行eureka集群的搭建，在于我们平时的生产环境中，很难保证单节点的eureka服务能提供百分百不间断的服务，如果eureka无响应了，整个项目应用都会出现问题，因此要保证eureka随时都能提供服务的情况下，最好的方式就是采用eureka的集群模式，也就是搭建eureka的高可用，在eureka的集群模式下，多个eureka server之间可以同步注册服务，因此，在一个eureka宕掉的情况下，仍然可以提供服务注册和服务发现的能力，从而达到注册中心的高可用。</li>
<li>Eureka集群原理图<br><img src="/posts/8e9cec17/eureka%E9%9B%86%E7%BE%A4.jpg"></li>
<li>Eureka集群环境的搭建<ul>
<li>新建两个和springcloud-eureka-7001一样的模块：springcloud-eureka-7002和springcloud-eureka-7003  </li>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>找到本机hosts文件并打开，配置一些自定义本机名字，在hosts文件最后加上，要访问的本机名称，默认是localhost<br><img src="/posts/8e9cec17/%E6%9C%AC%E6%9C%BA%E5%88%AB%E5%90%8D.jpg"></li>
<li>编写配置文件，并对7001的配置文件进行修改<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment"># 配置Eureka的端口号，7002或者7003端口的将端口号改为对应的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka的配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># 配置eureka的主机地址(可以是主机别名，这样是为了更真实地还原场景)，不同的端口配置相应的别名，如7002端口配置eureka7002.com,7003端口配置eureka7003.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否向eureka注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># fetch-registry为false表示这个程序自己为服务中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 配置访问eureka服务的地址</span></span><br><span class="line">      <span class="comment">#如果有多个注册中心,那么就可以直接配置其他的注册中心,自己这个注册中心就可以省略掉不用配置,7002和7003分别配置另外两个端口的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure></li>
<li>编写启动类（此处7001没有进行修改）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//开启eureka服务端，启动服务后访问http://localhost:7001/地址进入监控页面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="comment">//7002和7003端口分别改变启动类的名称后面的端口号即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>目录<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9505.jpg"></li>
<li>修改服务提供者springcloud-provider-dept-8001的配置文件中eureka的配置<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置到哪里注册，到三个服务中心都进行注册</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-8001</span> <span class="comment">#修改服务的描述链接的名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#true会将instance-id的地址改为IP地址，不再是localhost</span></span><br></pre></td></tr></table></figure></li>
<li>启动三个服务注册中心服务和服务提供者服务，分别访问访问7001，7002,7003端口：<a href="http://eureka7001.com:7001/">http://eureka7001.com:7001/</a> ，<a href="http://eureka7002.com:7002/">http://eureka7002.com:7002/</a> ，<a href="http://eureka7003.com:7003/%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://eureka7003.com:7003/进行测试</a><br>7001端口<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%8301.jpg"><br>7002端口<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%8302.jpg"><br>7003端口<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%8303.jpg"><h4 id="Eureka和Zookeeper的对比"><a href="#Eureka和Zookeeper的对比" class="headerlink" title="Eureka和Zookeeper的对比"></a>Eureka和Zookeeper的对比</h4></li>
</ul>
</li>
</ul>
<h5 id="CAP原则"><a href="#CAP原则" class="headerlink" title="CAP原则"></a>CAP原则</h5><ul>
<li>什么是CAP原则<ul>
<li>C (Consistency) 强一致性  </li>
<li>A (Availability) 可用性  </li>
<li>P (Partition tolerance) 分区容错性</li>
</ul>
</li>
<li>CAP理论核心  <ul>
<li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，只能在这三个需求中满足其中两个，三选二</li>
<li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类：</li>
</ul>
<ol>
<li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li>
<li>CP：满足一致性，分区容错的系统，通常性能不是特别高</li>
<li>AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些</li>
</ol>
</li>
<li>CAP理论指出，一个分布式系统不可能同时满足C (一致性) 、A (可用性) 、P (容错性)，由于分区容错性P再分布式系统中是必须要保证的，因此我们只能再在A和C之间进行权衡。</li>
</ul>
<h5 id="Zookeeper保证的是CP原则"><a href="#Zookeeper保证的是CP原则" class="headerlink" title="Zookeeper保证的是CP原则"></a>Zookeeper保证的是CP原则</h5><p>Zookeeper保证的是CP原则，也就是保证了一致性和分区容错，当保证了数据的一致性的时候，Zookeeper就会出现这样一种情况：当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，在30-120s之间，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务中心瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。</p>
<h5 id="Eureka保证的是AP原则"><a href="#Eureka保证的是AP原则" class="headerlink" title="Eureka保证的是AP原则"></a>Eureka保证的是AP原则</h5><ul>
<li>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接宕掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。所以Eureka保证的是AP原则，也就是保证了可用性和分区容错性。所以在Eureka中各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，因为节点之间的同步存在时间差或者其他问题，所以导致查到的信息可能不是最新的。</li>
<li>并且Eureka的自我保护机制也可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，这时会出现以下几种情况：<ul>
<li>Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务</li>
<li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)</li>
<li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li>
</ul>
</li>
</ul>
<h3 id="负载均衡——Ribbon-基于客户端的负载均衡"><a href="#负载均衡——Ribbon-基于客户端的负载均衡" class="headerlink" title="负载均衡——Ribbon(基于客户端的负载均衡)"></a>负载均衡——Ribbon(基于客户端的负载均衡)</h3><h4 id="Ribbon的概述"><a href="#Ribbon的概述" class="headerlink" title="Ribbon的概述"></a>Ribbon的概述</h4><ul>
<li>Ribbon是什么<br>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套客户端负载均衡的工具。其主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的机器(服务)，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！</li>
<li>Ribbon能干什么<br><img src="/posts/8e9cec17/ribbon.jpg"><br>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高可用性)。Dubbo、SpringCloud 中均给我们提供了负载均衡，SpringCloud 的负载均衡算法可以自定义。</li>
<li>负载均衡的分类<ul>
<li>集中式LB，即在服务的提供方和消费方之间使用独立的LB设施，如Nginx(反向代理服务器)，由该设施负责把访问请求通过某种策略转发至服务的提供方！</li>
<li>进程式 LB，即将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。其中Ribbon 就属于进程式LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</li>
</ul>
</li>
</ul>
<h4 id="集成Ribbon"><a href="#集成Ribbon" class="headerlink" title="集成Ribbon"></a>集成Ribbon</h4><ul>
<li>在客户端服务springcloud-consumer-80导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入eureka客户端依赖，因为eureka的这个依赖已经集成了ribbon，</span></span><br><span class="line"><span class="comment">所以大度的ribbon依赖不用导入，如果导入了上面的额依赖，那么就会报500错误</span></span><br><span class="line"><span class="comment">注意：3.0的版本及以上已经把内置的ribbon移除，只有内置了一个loadbalancer依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在application.yml中配置Eureka <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#不向服务中心注册自己，只有提供者才向服务中心注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-consumer-80</span></span><br></pre></td></tr></table></figure></li>
<li>在启动类上使用注解开启服务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启Eureka客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在BeanConfig中给RestTemplate添加负载均衡<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给RestTemplate添加ribbon负载均衡，凡是通过RestTemplate访问的都会通过ribbon负载均衡进行调节</span></span><br><span class="line"><span class="comment">//将请求按照对应的负载均衡算法访问不同服务器中的服务</span></span><br><span class="line"><span class="comment">//ribbon的默认算法是轮询</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改DeptConsumerController类中的属性REST_URL_PREFIX<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不再通过固定的端口访问服务</span></span><br><span class="line"><span class="comment">//public static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"><span class="comment">//通过服务名称向服务注册中兴获取对应的服务列表，再通过负载均衡算法从列表中选择一个合适的服务器中的服务进行访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="Ribbon负载均衡测试"><a href="#Ribbon负载均衡测试" class="headerlink" title="Ribbon负载均衡测试"></a>Ribbon负载均衡测试</h4></li>
<li>流程图<br><img src="/posts/8e9cec17/ribbon%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B.jpg"></li>
<li>创建和springcloud-provider-dept-8001一样的服务提供者模块springcloud-provider-dept-8002、springcloud-provider-dept-8003；参考springcloud-provider-dept-8001模块，导入对应的依赖，并对apllication.yaml配置文件的端口号、配置数据源的url等进行改动，再对启动类进行相应的改动即可  </li>
<li>*注**：要新建数据库，每个服务提供者对应着一个数据库，这样database字段才会有区别</li>
<li>启动7001、8001、8002、8003、80服务，并访问 <a href="http://eureka7001.com:7001/">http://eureka7001.com:7001/</a> 监控页面地址，发现三个服务提供者已经注册进来了<br><img src="/posts/8e9cec17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%9501.jpg"><br>再访问80服务消费者端口，多刷新访问几次，发现默认是使用轮询的方法调用服务提供者的，会发现查出来的数据来自不同的数据库<br><img src="/posts/8e9cec17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%9502.jpg"><br><img src="/posts/8e9cec17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%9503.jpg"></li>
</ul>
<h4 id="更换负载均衡策略"><a href="#更换负载均衡策略" class="headerlink" title="更换负载均衡策略"></a>更换负载均衡策略</h4><ul>
<li>在springcloud-consumer-80消费者服务模块中的BeanConfig中注入另外的负载均衡策略<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ribbon的负载均衡算法：(实现了IRule接口的类)</span></span><br><span class="line"><span class="comment">    AvailabilityFilteringRule：会过滤掉跳闸、访问故障的服务，对剩下的服务进行轮询</span></span><br><span class="line"><span class="comment">    RoundRobinRule：轮询</span></span><br><span class="line"><span class="comment">    RandomRule：随机</span></span><br><span class="line"><span class="comment">    RetryRule：先按照轮询获取服务，如果服务获取失败，则在指定时间内重试*/</span></span><br><span class="line">    <span class="comment">//一般不会在这里定义负载均衡算法，会在主启动类扫描不到的地方定义自己的负载均衡算法</span></span><br><span class="line">    <span class="comment">//如果在这里定义的话，那么访问所有的服务都会使用这个负载均衡算法，这样显然是不合理的</span></span><br><span class="line">    <span class="comment">//所以一般定义在主启动类扫描不到的包下，然后在主启动类中用@RibbonClient指定某个访问某个服务是使用自定义负载均衡算法</span></span><br><span class="line">    <span class="comment">//此处在此改变负载均衡策略为了测试使用</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>在上面已经启动了7001、8001、8002、8003、80服务中，重新启动80服务进行测试即可</li>
</ul>
<h4 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h4><ul>
<li>注释掉刚才的随机负载均衡策略</li>
<li>在80消费者服务的启动类扫描包路劲外创建一个包，用来存储自定义的负载均衡策略并在这个包下对负载均衡策略进行注入，目录如下：<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9506.jpg"></li>
<li>创建MyRule自定义负载均衡策略类(可参考随机负载均衡策略的写法，只需要改变对应的算法部分即可)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//复制randomRule的负载均衡实现，并在此基础上进行修改</span></span><br><span class="line"><span class="comment">//    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = &quot;RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//线程中断</span></span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Server&gt; upList = lb.getReachableServers(); <span class="comment">//获取活着的服务</span></span><br><span class="line">            List&lt;Server&gt; allList = lb.getAllServers(); <span class="comment">//获取全部服务</span></span><br><span class="line">            <span class="keyword">int</span> serverCount = allList.size(); <span class="comment">//定义全部服务的数量</span></span><br><span class="line">            <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * No servers. End regardless of pass, because subsequent passes</span></span><br><span class="line"><span class="comment">                 * only get more restrictive.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*//此处就是随机算法的算法部分，修改此部分即可</span></span><br><span class="line"><span class="comment">            int index = chooseRandomInt(serverCount); //从所有数量中的选一个随机数</span></span><br><span class="line"><span class="comment">            server = upList.get(index); //获取索引为index的活着的服务*/</span></span><br><span class="line">            <span class="comment">/*修改为每个服务被获取5次后到下一个服务，到了最后一个服务后就返回重新进行每个服务被获取5次后到下一个服务的循环</span></span><br><span class="line"><span class="comment">            * 被获取的次数：total初始化为0</span></span><br><span class="line"><span class="comment">            * 服务的索引：index初始化为0*/</span></span><br><span class="line">            <span class="keyword">if</span> (total &lt; <span class="number">5</span>)&#123;</span><br><span class="line">                server = upList.get(index);</span><br><span class="line">                total ++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                index ++;</span><br><span class="line">                total = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= upList.size())&#123;</span><br><span class="line">                    index =<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                server = upList.get(index);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123; <span class="comment">//如果活着的服务中索引为index的服务为空，则跳过此次循环</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The only time this should happen is if the server list were</span></span><br><span class="line"><span class="comment">                 * somehow trimmed. This is a transient condition. Retry after</span></span><br><span class="line"><span class="comment">                 * yielding.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Shouldn&#x27;t actually happen.. but must be transient or a bug.</span></span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">chooseRandomInt</span><span class="params">(<span class="keyword">int</span> serverCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建SmileRule配置类类注入负载均衡策略<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmileRule</span> </span>&#123;</span><br><span class="line">    <span class="comment">//也可以在此处注入随机策略，在这里注入是指定对某个服务使用这个策略</span></span><br><span class="line">    <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">    public IRule myRule()&#123;</span></span><br><span class="line"><span class="comment">        return new RandomRule();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//这个注册自己的负载均衡算法不能被启动类扫描到，所以放在这里，因为是要对某个服务使用这个策略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在启动类上使用注解@RibbonClient指定扫描某个配置类，把自定义负载均衡策略指定使用在某个服务上<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//服务启动时会加载自定义的配置类，让配置类生效，并且对指定的那个服务生效，但是这个配置类不能被启动类的scanner扫描到，</span></span><br><span class="line"><span class="comment">// 所以这个类要在和启动类不同包的路径下，此处版本不对，不能使用这个注解</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;, configuration = SmileRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>重新启动80端口服务消费者的服务进行测试</li>
</ul>
<h4 id="使用Feign实现负载均衡"><a href="#使用Feign实现负载均衡" class="headerlink" title="使用Feign实现负载均衡"></a>使用Feign实现负载均衡</h4><h5 id="什么是Feign"><a href="#什么是Feign" class="headerlink" title="什么是Feign"></a>什么是Feign</h5><p>Feign是声明式Web-Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范，其实Feign就是在RestTemplate调用的上面加了一层接口来进行调用，主要是因为这样更加适合java面向接口编程的规范。并且Feign默认集成了Ribbon，利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</p>
<h5 id="Feign的作用"><a href="#Feign的作用" class="headerlink" title="Feign的作用"></a>Feign的作用</h5><p>Feign旨在使编写Java Http客户端变得更容易。前面在使用Ribbon + RestTemplate时，利用RestTemplate对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。但是Fei功能的效率降低了。</p>
<h5 id="Feign的使用"><a href="#Feign的使用" class="headerlink" title="Feign的使用"></a>Feign的使用</h5><ul>
<li>创建一个Feign消费者模块springcloud-consumer-feign-80，目录如下：<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9507.jpg">  </li>
<li>导入相应的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入自定义的api依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入eureka客户端，集成了ribbon--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入feign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写application.yaml配置文件<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="comment">#eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#不向服务中心注册自己，只有提供者才向服务中心注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-consumer-80</span></span><br></pre></td></tr></table></figure></li>
<li>创建启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启Eureka客户端</span></span><br><span class="line"><span class="comment">//开启Feign客户端，扫描com.tSmile.springcloud包下的所有类，包括依赖中的自定义的api依赖的com.tSmile.springcloud包下的所有类</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.tSmile.springcloud&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignDeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignDeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改springcloud-api模块<ul>
<li>导入Feign依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入feign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在com.tSmile.springcloud.service包下创建一个DeptServiceClient接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加Feign注解，并添加服务提供者的名称，指到注册中心中找这个服务</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptServiceClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个请求地址要和提供者的请求地址一样，否则找不到提供者对应的请求，方法名可以不一致，因为不是通过方法名来匹配的</span></span><br><span class="line">    <span class="comment">//也就是说根据@FeignClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)找到对应的服务</span></span><br><span class="line">    <span class="comment">//然后根据对应的请求地址匹配提供者中对应的请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getOne/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Dept <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function">Boolean <span class="title">add</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>在springcloud-consumer-feign-80消费者模块中编写controller<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptServiceClient deptServiceClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deptServiceClient.add(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deptServiceClient.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deptServiceClient.getAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
注：如果想要在Feign中改变负载均衡策略，也和在Ribbon中一样，因为Feign集成了Ribbon来实现了负载均衡</li>
<li>在上面启动了7001、8001、8002、80030、80这些服务的基础上，关闭Ribbon的80消费者端口，启动Feign的消费者端口进行测试</li>
</ul>
<h5 id="Feign和Ribbon-RestTemplate的对比"><a href="#Feign和Ribbon-RestTemplate的对比" class="headerlink" title="Feign和Ribbon+RestTemplate的对比"></a>Feign和Ribbon+RestTemplate的对比</h5><p><img src="/posts/8e9cec17/Feign%E5%92%8CRibbon.jpg"><br>选用Feign还是Ribbon+RestTemplate，根据个人习惯而定，如果喜欢REST风格使用Ribbon；如果喜欢社区版的面向接口风格使用Feign.</p>
<h3 id="服务熔断——Hystrix"><a href="#服务熔断——Hystrix" class="headerlink" title="服务熔断——Hystrix"></a>服务熔断——Hystrix</h3><h4 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h4><ul>
<li>什么是雪崩效应：<br>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是“扇出”，如果扇出的链路上某个微服务的调用响应时间过长，或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”，如图所示：<br><img src="/posts/8e9cec17/%E9%9B%AA%E5%B4%A9.jpg">  </li>
<li>雪崩效应的后果<br>对于高流量的应用来说，单一的(没有备份的)后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行。  </li>
</ul>
<h4 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h4><ul>
<li>什么是Hystrix<br>Hystrix是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，Hystrix 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。</li>
<li>Hystrix解决雪崩———断路器<br>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩，如图所示：<br><img src="/posts/8e9cec17/hystrix.jpg">  </li>
<li>Hystrix的作用  <ul>
<li>通过第三方（一般来源网络）的调用，给与保护和控制延迟和失败。</li>
<li>在复杂的分布式系统中复制级联失败。</li>
<li>快速失败和修复。</li>
<li>在可能的情况下，回滚挥着优雅的失败。</li>
<li>实现几乎实时监控，警报和操作控制。</li>
</ul>
</li>
<li>Hystrix解决了什么问题<br>复杂的分布式体系结构中的应用程序具有许多依赖关系，每个依赖关系都会在某些时候不可避免的失败，如果主机应用程序未与这些外部的故障隔离，那么可能会被这些故障拖垮；而Hystrix实现了主机程序和外部的故障进行隔离，解决了主机程序被外部故障拖垮的问题</li>
<li>Hystrix的功能  <ul>
<li>熔断器</li>
<li>隔离</li>
<li>线程和线程池</li>
<li>信号量隔离</li>
<li>请求合并</li>
<li>请求缓存</li>
<li>仪表盘</li>
</ul>
</li>
<li>官网地址：<a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></li>
</ul>
<h4 id="服务熔断概述"><a href="#服务熔断概述" class="headerlink" title="服务熔断概述"></a>服务熔断概述</h4><ul>
<li><p>什么是服务熔断？<br>熔断机制是对应雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阀值缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是：@HystrixCommand。</p>
</li>
<li><p>服务熔断解决了什么问题  </p>
<ul>
<li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li>
<li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</li>
</ul>
</li>
</ul>
<h4 id="服务熔断的使用"><a href="#服务熔断的使用" class="headerlink" title="服务熔断的使用"></a>服务熔断的使用</h4><ul>
<li>复制springcloud-provider-dept-8001模块命名为springcloud-provider-dept-hystrix-8001，然后对springcloud-provider-dept-hystrix-8001进行修改，用来测试服务熔断机制，目录如下：<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9508.jpg">  </li>
<li>导入hystrix依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>不用修改配置文件，修改controller(此处为了演示，值对其中一个controller进行服务熔断)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//==============开启熔断机制=====================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/dept/getOne/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//如果出现错误，回调某个方法</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;hystrixGet&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getOne</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    Dept dept = deptService.getDeptById(id);</span><br><span class="line">    <span class="comment">//如果没有抛出异常，当dept为空时，那么前端页面就会什么都没有返回，一片空白</span></span><br><span class="line">    <span class="comment">//添加了抛出异常后，如果dept为空，那么就会弹出错误页面</span></span><br><span class="line">    <span class="comment">//添加了熔断机制hystrix后，当抛出异常时，就会调用备选方法，返回备选方法的值</span></span><br><span class="line">    <span class="keyword">if</span> (dept == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;id=&gt;&quot;</span> + id + <span class="string">&quot;的用户不存在，或者无法找到对应的用户~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写回调方法，即备选方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">hystrixGet</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptNo(id)</span><br><span class="line">            .setDeptName(<span class="string">&quot;id为=&gt;&quot;</span> + id + <span class="string">&quot;的信息不存在，为null&quot;</span>)</span><br><span class="line">            .setDbSource(<span class="string">&quot;在数据库没有对应的信息~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===================================</span></span><br></pre></td></tr></table></figure></li>
<li>在启动类上添加开启熔断机制注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启服务发现</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//开启熔断机制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProviderHystrix_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProviderHystrix_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>先启动7001和没有添加熔断机制的8001服务，访问不存在的id进行测试：<br>服务器直接发生错误，返回错误页面！！！<br><img src="/posts/8e9cec17/%E6%9C%AA%E5%BC%80%E7%86%94%E6%96%AD.jpg"><br>然后关闭没有添加熔断机制的8001服务，启动添加了熔断机制的hystrix8001服务，访问不存在的id进行测试：<br>服务器错误被隔离，返回自定义备份信息！！！<br><img src="/posts/8e9cec17/%E5%BC%80%E4%BA%86%E7%86%94%E6%96%AD.jpg"><br>由此可知，为了避免因某个微服务后台出现异常或错误而导致整个应用或网页报错，使用熔断是必要的</li>
</ul>
<h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><h5 id="什么是服务降级"><a href="#什么是服务降级" class="headerlink" title="什么是服务降级"></a>什么是服务降级</h5><p>服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面的请求进行有策略的不处理，或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作，即尽可能的把系统资源让给优先级高的服务。资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机，导致某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双11活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。</p>
<h5 id="服务降级的应用场景"><a href="#服务降级的应用场景" class="headerlink" title="服务降级的应用场景"></a>服务降级的应用场景</h5><p>当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些不重要或不紧急的服务或任务进行服务的 延迟使用或暂停使用。降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7.jpg"><br>由上图可得，当某一时间内服务A的访问量暴增，而服务B和服务C的访问量较少，为了缓解A服务的压力，这时候需要暂时关闭B服务和C服务的功能，从而释放服务器的资源，为A服务分担压力，虽然整体的服务水平降低了，但是至少保证了服务器和网站不会崩溃，这就叫做服务降级。</p>
<h5 id="服务降级需要考虑的问题"><a href="#服务降级需要考虑的问题" class="headerlink" title="服务降级需要考虑的问题"></a>服务降级需要考虑的问题</h5><ul>
<li>那些服务是核心服务，哪些服务是非核心服务</li>
<li>那些服务可以支持降级，那些服务不能支持降级，降级策略是什么</li>
<li>除服务降级之外是否存在更复杂的业务放通场景，策略是什么？</li>
</ul>
<h5 id="服务降级的分类"><a href="#服务降级的分类" class="headerlink" title="服务降级的分类"></a>服务降级的分类</h5><ul>
<li>超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</li>
<li>失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</li>
<li>故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认库存）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</li>
<li>限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页。</li>
</ul>
<h5 id="服务降级案例"><a href="#服务降级案例" class="headerlink" title="服务降级案例"></a>服务降级案例</h5><ul>
<li>在springcloud-api模块的service包下创建DeptServiceClientFallbackFactory类实现FallbackFactory接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServiceClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//服务降级备选方案，即关掉服务后，客户端访问时返回的默认值</span></span><br><span class="line">    <span class="comment">//服务降级：是对整个服务来操作的，即当服务被关掉时，需要对服务中所有的方法都做了备选方案，返回备选方法的值不至于让服务直接挂掉，至少让客户端还可以访问，并且返回提示</span></span><br><span class="line">    <span class="comment">//为什么要进行服务降级？</span></span><br><span class="line">    <span class="comment">// 当某些服务的压力非常大时，而某些很少人访问，那么就可以将少人访问的服务停止，让出服务器的空间给压力大的服务，减轻压力大的服务的压力，服务降级在客户端的配置文件中进行开启</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptServiceClient <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptServiceClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Dept <span class="title">getById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptNo(id)</span><br><span class="line">                        .setDeptName(<span class="string">&quot;服务已停止访问~&quot;</span>)</span><br><span class="line">                        .setDbSource(<span class="string">&quot;没有数据&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Dept dept = <span class="keyword">new</span> Dept().setDeptNo(<span class="keyword">null</span>)</span><br><span class="line">                        .setDeptName(<span class="string">&quot;服务已停止访问~&quot;</span>)</span><br><span class="line">                        .setDbSource(<span class="string">&quot;没有数据&quot;</span>);</span><br><span class="line">                List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                depts.add(dept);</span><br><span class="line">                <span class="keyword">return</span> depts;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用@FeignClient注解中的fallbackFactory回调属性将SPRINGCLOUD-PROVIDER-DEPT服务和服务降级的备份关联起来<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果服务停止，那么就会调用备用方案</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;, fallbackFactory = DeptServiceClientFallbackFactory.class)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptServiceClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个请求地址要和提供者的请求地址一样，否则找不到提供者对应的请求，方法名可以不一致，因为不是通过方法名来匹配的</span></span><br><span class="line">    <span class="comment">//也就是说根据@FeignClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)找到对应的服务</span></span><br><span class="line">    <span class="comment">//然后根据对应的请求地址匹配提供者中对应的请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getOne/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Dept <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function">Boolean <span class="title">add</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在springcloud-consumer-feign-80消费者模块的配置文件中开启服务降级<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启服务降级</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>启动7001、hystrix8001、FeignDeptConsumer_80服务进行测试访问 <a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a><br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E6%B5%8B%E8%AF%9502.jpg"><br>没有问题，可以访问到服务，然后停止掉hystrix8001服务，再访问 <a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a><br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E6%B5%8B%E8%AF%9501.jpg">  </li>
<li><em>服务降级成功！！</em>*</li>
</ul>
<h4 id="熔断、服务降级、限流的理解"><a href="#熔断、服务降级、限流的理解" class="headerlink" title="熔断、服务降级、限流的理解"></a>熔断、服务降级、限流的理解</h4><ul>
<li>熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃；系统自动执行和恢复</li>
<li>降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定；从整体负荷考虑；</li>
<li>限流：限制并发的请求访问量，超过阈值则拒绝；</li>
</ul>
<h4 id="服务熔断和服务降级的区别"><a href="#服务熔断和服务降级的区别" class="headerlink" title="服务熔断和服务降级的区别"></a>服务熔断和服务降级的区别</h4><ul>
<li>服务熔断是在服务端进行设置的，当某个服务超时或异常，引起服务熔断，类似于保险丝(自我熔断)</li>
<li>服务降级是在客户端进行设置的，服务降级是从整体网站请求负载考虑，当某个服务熔断或者关闭之后，服务将不再被调用，此时在客户端，我们可以准备一个FallBackFactory，返回一个默认的值(缺省值)。会导致整体的服务水平下降，但是好歹能用，比直接挂掉强。</li>
<li>触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；</li>
<li>管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li>
<li>实现方式不太一样，服务降级具有代码侵入性(由控制器完成/或自动降级)，熔断一般称为自我熔断。</li>
</ul>
<h4 id="Hystrix流监控——Dashboard"><a href="#Hystrix流监控——Dashboard" class="headerlink" title="Hystrix流监控——Dashboard"></a>Hystrix流监控——Dashboard</h4><h5 id="什么是Dashboard"><a href="#什么是Dashboard" class="headerlink" title="什么是Dashboard"></a>什么是Dashboard</h5><p>Deshboard是几乎能对服务进行实时监控的一个工具</p>
<h5 id="Dashboard的使用"><a href="#Dashboard的使用" class="headerlink" title="Dashboard的使用"></a>Dashboard的使用</h5><ul>
<li>创建springcloud-consumer-hystrix-dashboard模块，目录如下：<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9509.jpg">  </li>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入自定义的api依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入eureka客户端，集成了ribbon--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入hystrix依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入hystrix监控依赖</span></span><br><span class="line"><span class="comment">    注：确保服务端要有spring-boot-starter-actuator监控依赖才能进行监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写配置文件<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">proxy-stream-allow-list:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>编写主启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//开启dashboard监控</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDashboard_9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerDashboard_9001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在服务提供者springcloud-provider-dept-hystrix-8001模块的主启动类中添加一个servlet监控对象对这个服务进行监控<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启服务发现</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//开启熔断机制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProviderHystrix_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProviderHystrix_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加一个servlet，来使用dashboard监控</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet hystrixMetricsStreamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(hystrixMetricsStreamServlet);</span><br><span class="line">        servletRegistrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        servletRegistrationBean.setUrlMappings(Arrays.asList(<span class="string">&quot;/hystrix.stream&quot;</span>));</span><br><span class="line">        servletRegistrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>确保服务提供者springcloud-provider-dept-hystrix-8001模块中导入了监控类<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--完善监控信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>启动7001服务注册中心，再启动9001监控服务，访问 <a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a> 地址，进入如下页面后，再启动DeptProviderHystrix_8001服务，再输入进入监控页面的地址等进入登录页面<br>注：如果访问上面的地址没有问题，那么启动9001服务时出现的错误可以不用管<br><img src="/posts/8e9cec17/dashboard%E7%99%BB%E5%BD%95.jpg"><br>进入监控页面是输入的登录地址为：<code>http://localhost:8001/+8001服务提供者主启动类中设置的servletRegistrationBean.setUrlMappings(Arrays.asList(&quot;/hystrix.stream&quot;));的路径</code>，即<a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a>  </li>
<li>进入登录页面时，如果遇到如下情况：<br><img src="/posts/8e9cec17/dashboard01.jpg"><br>表示还没有用户访问过DeptProviderHystrix_8001服务，访问一下服务就好，如访问 <a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a>  之后就可以看到监控信息了，如图：<br><img src="/posts/8e9cec17/dashboard02.jpg">  </li>
<li>监控信息的具体含义<br><img src="/posts/8e9cec17/dashboard03.jpg">  </li>
</ul>
<h3 id="路由网关——Zuul"><a href="#路由网关——Zuul" class="headerlink" title="路由网关——Zuul"></a>路由网关——Zuul</h3><h4 id="Zull路由网关概述"><a href="#Zull路由网关概述" class="headerlink" title="Zull路由网关概述"></a>Zull路由网关概述</h4><p>​Zull包含了对请求的路由(用来跳转的)和过滤两个最主要功能，其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。Zuul和Eureka进行整合，是将Zuul自身注册为Eureka服务治理下的应用，同时Zuul也从Eureka中获得其他服务的消息，也就是说以后的访问微服务都是通过Zuul跳转后获得。<br><img src="/posts/8e9cec17/%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3.jpg"><br>官方文档：<a href="https://github.com/Netflix/zuul/">https://github.com/Netflix/zuul/</a></p>
<h4 id="路由网关的使用"><a href="#路由网关的使用" class="headerlink" title="路由网关的使用"></a>路由网关的使用</h4><ul>
<li>创建路由网关springcloud-zuul-9527模块</li>
<li>导入相应的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入zuul依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入自定义的api依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入eureka客户端，集成了ribbon--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入hystrix依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入hystrix监控依赖</span></span><br><span class="line"><span class="comment">    注：确保服务端要有spring-boot-starter-actuator监控依赖才能进行监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写application.yaml配置文件<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置应用的名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-zuul-9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置注册中心的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#配置在服务中心的链接的名称</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-zuul-9527</span></span><br><span class="line">    <span class="comment">#配置显示IP地址</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#配置点击在服务中心的链接时出现的信息</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">tSmile-springcloud</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">www.tsmile.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置zuul网关</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment">#zuul就做了两件事情：路由统一routes和过滤ignored-services、prefix</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">keys:</span></span><br><span class="line">      <span class="comment">#修改原来的服务的名称，将原来的springcloud-provider-dept改为mydept</span></span><br><span class="line">      <span class="comment">#通过改变服务的名称来隐藏服务的真实名称</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/mydept/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">springcloud-provider-dept</span></span><br><span class="line">  <span class="comment">#忽略服务，即不能再使用原来的springcloud-provider-dept服务名称来访问服务，</span></span><br><span class="line">  <span class="comment">#只能通过zuul网关配置的mydept来访问该服务</span></span><br><span class="line">  <span class="comment">#ignored-services: springcloud-provider-dept</span></span><br><span class="line">  <span class="comment">#一般使用*号屏蔽全部使用真实服务的访问</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="comment">#添加同一的访问前缀，这样使用原来没有添加前缀时的路径访问不了</span></span><br><span class="line">  <span class="comment">#原来：http://www.tsmile.com:9527/mydept/dept/getOne/3</span></span><br><span class="line">  <span class="comment">#添加后：http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/3</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/tsmile</span></span><br></pre></td></tr></table></figure></li>
<li>编写启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">//开启zuul，一般使用代理开启，因为zuul一般不是一个服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication_9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication_9527.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动7001、8001、9527服务，如图所示：<br><img src="/posts/8e9cec17/%E7%BD%91%E5%85%B3%E6%B3%A8%E5%86%8C.jpg"><br>访问 <a href="http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/3">http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/3</a> 地址<br><img src="/posts/8e9cec17/%E7%BD%91%E5%85%B3%E8%AE%BF%E9%97%AE.jpg">  </li>
<li>网关配置的思路图<br><img src="/posts/8e9cec17/%E7%BD%91%E5%85%B3%E6%80%9D%E8%B7%AF.jpg"> </li>
<li>如果将网关模块设置为客户端(服务消费者)80端口模块，可以参考原来的80端口模块来新建一个网关的80端口的模块，目录如下：<br><img src="/posts/8e9cec17/%E7%BD%91%E5%85%B3%E7%9B%AE%E5%BD%95.jpg"> </li>
<li>主启动类修改如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">//开启zuul，一般使用代理开启，因为zuul一般不是一个服务</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;, configuration = SmileRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication_9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication_9527.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动7001，8001,8002,8003，网关的80服务进行测试</li>
</ul>
<p><strong>为什么自定义的负载均衡算法生效不了呢？在springcloud包下创建的config包下创建了一个BeanConfig类后，在这个类中将轮询改为随机后生效了，但是使用@RibbonClient注解指定自己创建的某个负载均衡算法给某个服务却没有生效，有人知道为什么吗？</strong></p>
<p>本文是观看狂神说B站视频后整理的笔记——侵删<br>视频地址：<a href="https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver">https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver</a></p>
]]></content>
      <categories>
        <category>springCloud</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud-Rest环境搭建</title>
    <url>/posts/c2c9eac1/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文介绍了springCloud-Rest环境搭建的整个流程</p>
<span id="more"></span>
<h4 id="springCloud-Rest环境搭建环境的搭建"><a href="#springCloud-Rest环境搭建环境的搭建" class="headerlink" title="springCloud-Rest环境搭建环境的搭建"></a>springCloud-Rest环境搭建环境的搭建</h4><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><ul>
<li>jdk 1.8</li>
<li>springBoot版本 2.2.5.RELEASE</li>
<li>springCloud版本 Hoxton.SR8</li>
<li>mysql版本 8.0</li>
</ul>
<h5 id="创建普通maven父工程"><a href="#创建普通maven父工程" class="headerlink" title="创建普通maven父工程"></a>创建普通maven父工程</h5><ol>
<li>创建一个普通的maven父工程</li>
<li>删除掉父工程的src目录</li>
<li>在父工程导入依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包方式改为pom方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--依赖的版本控制，将依赖的版放到这里，可以同一管理版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用dependencyManagement来管理dependencies,使用依赖管理后，</span></span><br><span class="line"><span class="comment">这个父项目的子模块不会自动导入所有父类的依赖，而是子模块需要什么依赖就导入什么依赖，这样可以避免导入多余的依赖，并且子模块刀肉依赖时会自动导入父项目的依赖及对应的版本号，这样版本的管理比较方便和统一--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入springCloud依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入springBoot依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springBoot启动器--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springBoot整合mybatis启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志门面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4-groovyless<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="Rest环境搭建的基本思路图"><a href="#Rest环境搭建的基本思路图" class="headerlink" title="Rest环境搭建的基本思路图"></a>Rest环境搭建的基本思路图</h5><img src="/posts/c2c9eac1/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%80%9D%E8%B7%AF.jpg"></li>
</ol>
<h5 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database db01;</span><br><span class="line">use db01;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">	deptNo <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    deptName <span class="type">varchar</span>(<span class="number">60</span>),</span><br><span class="line">    dbSource <span class="type">varchar</span>(<span class="number">60</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;开发部&quot;, database());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;人事部&quot;, database());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;市场部&quot;, database());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;财务部&quot;, database());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;运维部&quot;, database());</span><br></pre></td></tr></table></figure>

<h5 id="创建实体类springcloud-api模块"><a href="#创建实体类springcloud-api模块" class="headerlink" title="创建实体类springcloud-api模块"></a>创建实体类springcloud-api模块</h5><ul>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个依赖时子模块自己需要的依赖，如果父项目中已经导入了对应的依赖，</span></span><br><span class="line"><span class="comment">    那么子项目的依赖就不用写版本号了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入feign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写pojo类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span>  <span class="comment">//开启链式写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//必须要实现序列化，不然对象传输的时候会出错</span></span><br><span class="line">    <span class="keyword">private</span> Long deptNo;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="comment">//用来区分这个数据是哪个数据库的字段，因为同一个数据可能来自不同的数据库</span></span><br><span class="line">    <span class="comment">//微服务：一个服务对应一个数据库</span></span><br><span class="line">    <span class="keyword">private</span> String dbSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(String deptName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptName = deptName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 链式写法：</span></span><br><span class="line"><span class="comment">    * Dept dept = new dept();</span></span><br><span class="line"><span class="comment">    * dept.setDeptNo(1).setDeptName(&quot;&quot;).setDbSource();</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>目录<br><img src="/posts/c2c9eac1/%E7%9B%AE%E5%BD%9501.jpg"></li>
</ul>
<h5 id="创建服务提供者spring-provider-dept-8001模块"><a href="#创建服务提供者spring-provider-dept-8001模块" class="headerlink" title="创建服务提供者spring-provider-dept-8001模块"></a>创建服务提供者spring-provider-dept-8001模块</h5><p>注：后面的8001表示这个模块使用的端口号，以下其他模块后面的数字也是表示端口号</p>
<ul>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--我们写的api依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--druid数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志门面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springBoot测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jetty服务器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写apllication.yaml配置文件<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment">#配置mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.tSmile.springcloud.pojo</span> <span class="comment"># 为这个包下的实体类起别名</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span> <span class="comment"># 绑定mapper包下的所有mapper.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="comment"># 绑定mybatis可信配置文件</span></span><br><span class="line"><span class="comment">#配置spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-dept</span> <span class="comment">#设置spring配置的名称</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment">#配置数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db01?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li>
<li>编写mybatis核心配置文件mybatis-config.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启二级缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写DeptMapper接口和对应的DeptMapper.xml<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dept <span class="title">getDeptById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">getAllDept</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tSmile.springcloud.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from dept where deptNo=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllDept&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from dept;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addDept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        insert into dept(deptName, dbSource) values (#&#123;deptName, DATABASE());</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写service层的DeptService和DeptServiceImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dept <span class="title">getDeptById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">getAllDept</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDeptById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptMapper.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAllDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptMapper.getAllDept();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptMapper.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写Controller层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过这个controller来提供restful服务</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getOne/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getOne</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Dept dept = deptService.getDeptById(id);</span><br><span class="line">        <span class="comment">//如果没有抛出异常，当dept为空时，那么前端页面就会什么都没有返回，一片空白</span></span><br><span class="line">        <span class="comment">//添加了抛出异常后，如果dept为空，那么就会弹出错误页面，这算是一种处理错误信息的方法</span></span><br><span class="line">        <span class="keyword">if</span> (dept == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;id=&gt;&quot;</span> + id + <span class="string">&quot;的用户不存在，或者无法找到对应的用户~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.getAllDept();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>编写启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>目录<br><img src="/posts/c2c9eac1/%E7%9B%AE%E5%BD%9502.jpg"></li>
</ul>
<h5 id="创建消费者springcloud-consumer-80模块"><a href="#创建消费者springcloud-consumer-80模块" class="headerlink" title="创建消费者springcloud-consumer-80模块"></a>创建消费者springcloud-consumer-80模块</h5><ul>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入自定义的api依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写application.yaml配置文件<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li>
<li>编写BeanConfig类，将RestTemplate注入到容器中<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给RestTemplate添加ribbon，凡是通过RestTemplate访问的都会通过ribbon负载均衡进行调节</span></span><br><span class="line">    <span class="comment">// 将请求按照对应的负载均衡算法访问不同物服注册中心中的对应提供者服务名称的服务</span></span><br><span class="line">    <span class="comment">//ribbon的默认算法是轮询</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写controller<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/16 - 23:12</span></span><br><span class="line"><span class="comment"> * 消费者模块没有service层，怎么调用service？</span></span><br><span class="line"><span class="comment"> * 通过http的RestFul风格访问provider模块的controller来调用对应的service层</span></span><br><span class="line"><span class="comment"> * 怎么通过http的RestFul风格来访问provider的controller？</span></span><br><span class="line"><span class="comment"> * 通过restTemplate来访问对应的controller地址</span></span><br><span class="line"><span class="comment"> * 什么是restTemplate？</span></span><br><span class="line"><span class="comment"> * restTemplate就是提供了多种便捷访问远程http服务方法的一个类，是简单的RestFul模板</span></span><br><span class="line"><span class="comment"> * 访问远程服务的参数：(url地址,map(用来存放对象),Class&lt;T&gt; responseType(返回值的类型))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="comment">//通过服务名称对提供者服务进行访问,不再通过固定的端口访问服务</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/add&quot;</span>,dept,<span class="keyword">boolean</span>.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到对应的服务名，根据服务名获取服务的http://localhost:8001&quot;地址，然后进行拼接找到对应的提供者的请求</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/getOne/&quot;</span>+id,Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/getAll&quot;</span>,List.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>目录<br><img src="/posts/c2c9eac1/%E7%9B%AE%E5%BD%9503.jpg"></li>
</ul>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul>
<li>启动服务提供者模块和消费者模块</li>
<li>通过访问消费者模块的端口获取数据 <a href="http://localhost/consumer/dept/getAll">http://localhost/consumer/dept/getAll</a><br>注：80端口号在访问时可以省略掉端口号不写，默认为80端口号<br><img src="/posts/c2c9eac1/%E6%B5%8B%E8%AF%9501.jpg"></li>
</ul>
<p>测试成功，环境搭建成功！  </p>
<p>注：springCloud的学习的基本思路为：导入相应的依赖，编写对应的配置，编写项目启动类，开启依赖对应的功能@Enablexxx，后面的学习就是按照这个思路来进行学习的</p>
<p>本文是观看狂神说B站视频后整理的笔记——侵删<br>视频地址：<a href="https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver">https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver</a></p>
]]></content>
      <categories>
        <category>springCloud</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务与springcloud</title>
    <url>/posts/f0919c40/</url>
    <content><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文简单介绍了什么是微服务以及微服务架构的一套解决方案springcloud</p>
<span id="more"></span>
<h4 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h4><h5 id="什么是微服务？"><a href="#什么是微服务？" class="headerlink" title="什么是微服务？"></a>什么是微服务？</h5><ul>
<li>微服务是一种架构的思想或者说是一种架构的模式或者风格，就目前而言，微服务没有一个统一的标准的定义。</li>
<li>微服务提倡将单一的应用程序划分成一组组小的服务，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(HTTP)互相沟通，每个服务都围绕着具体的业务进行构建，并且能够被独立地部署到生产环境中。另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(Maven)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据储。<br>微服务的提出（汉化版）：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></li>
</ul>
<h5 id="微服务的特点"><a href="#微服务的特点" class="headerlink" title="微服务的特点"></a>微服务的特点</h5><ul>
<li>解耦：同一系统内的服务大部分可以被解耦，即服务于服务之间的耦合度被极大地降低了。因此应用，作为一个整体，可以轻易地被构建、修改和扩展。</li>
<li>组件化：微服务中的每一个服务可以被看成相互独立的组件，这些组件可以被轻易地替换和升级。</li>
<li>业务能力：微服务很小，它们可以专注于某种单一的能力，即每个服务都只专注某一种能力或者业务</li>
<li>自治：开发者和团队可以独立地工作，提高开发速度，也就是说每个服务都是独立的，可以被独立的开发出来，不需要密切的团队合作。</li>
<li>持续交付：允许持续发布软件新版本，通过系统化的自动手段来创建、测试和批准新版本，就是说可以不停地迭代开发。</li>
<li>职责明确：微服务不把应用看成一个又一个的项目。相反，它们把应用当成了自己需要负责的项目。</li>
<li>去中心化管理：关注于使用正确的工具来完成正确的工作。这也就是说，没有标准化的方式或者技术模式。开发者们有权选择最好的工具来解决问题，就是说不局限于使用某一种语言或者某一种工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据储。</li>
<li>敏捷性：微服务支持敏捷开发。任何新功能都可以被快速开发或丢弃。</li>
</ul>
<h5 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h5><ul>
<li>独立开发：基于各个微服务所独有的功能，它们可以被轻易开发出来。</li>
<li>独立部署：基于它们所提供的服务，它们可以被独立地部署到应用中。</li>
<li>错误隔离：即便其中某个服务发生了故障，整个系统还可以继续工作。</li>
<li>混合技术栈：可以使用不同的语言和技术来为同一个应用构建不同的服务。</li>
<li>按粒度扩展：可以根据需求扩展某一个组件，不需要将所有组件全部扩展。<br>（以上的特点和优点原文来自MrTebie：<a href="https://zhuanlan.zhihu.com/p/66190538%EF%BC%89">https://zhuanlan.zhihu.com/p/66190538）</a></li>
</ul>
<h5 id="微服务的缺点"><a href="#微服务的缺点" class="headerlink" title="微服务的缺点"></a>微服务的缺点</h5><ul>
<li>开发人员要处理分布式系统的复杂性；</li>
<li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li>
<li>系统部署依赖问题；</li>
<li>服务间通信成本问题；</li>
<li>数据一致性问题；</li>
<li>系统集成测试问题；</li>
<li>性能和监控问题；<br>微服务的概念和优缺点可以参考文章：<a href="https://blog.csdn.net/kunyus/article/details/90670710">https://blog.csdn.net/kunyus/article/details/90670710</a></li>
</ul>
<h4 id="微服务理解图"><a href="#微服务理解图" class="headerlink" title="微服务理解图"></a>微服务理解图</h4><p><img src="/posts/f0919c40/%E5%BE%AE%E6%9C%8D%E5%8A%A1.jpg"></p>
<h4 id="微服务技术栈简单概括"><a href="#微服务技术栈简单概括" class="headerlink" title="微服务技术栈简单概括"></a>微服务技术栈简单概括</h4><table>
<thead>
<tr>
<th>微服务技术条目</th>
<th>落地技术</th>
</tr>
</thead>
<tbody><tr>
<td>服务开发</td>
<td>SpringBoot、Spring、SpringMVC等</td>
</tr>
<tr>
<td>服务配置与管理</td>
<td>Netfix公司的Archaius、阿里的Diamond等</td>
</tr>
<tr>
<td>服务注册与发现</td>
<td>Eureka、Consul、Zookeeper等</td>
</tr>
<tr>
<td>服务调用</td>
<td>Rest、PRC、gRPC</td>
</tr>
<tr>
<td>服务熔断器</td>
<td>Hystrix、Envoy等</td>
</tr>
<tr>
<td>负载均衡</td>
<td>Ribbon、Nginx等</td>
</tr>
<tr>
<td>服务接口调用(客户端调用服务的简化工具)</td>
<td>Fegin等</td>
</tr>
<tr>
<td>消息队列</td>
<td>Kafka、RabbitMQ、ActiveMQ等</td>
</tr>
<tr>
<td>服务配置中心管理</td>
<td>SpringCloudConfig、Chef等</td>
</tr>
<tr>
<td>服务路由(API网关)</td>
<td>Zuul等</td>
</tr>
<tr>
<td>服务监控</td>
<td>Zabbix、Nagios、Metrics、Specatator等</td>
</tr>
<tr>
<td>全链路追踪</td>
<td>Zipkin、Brave、Dapper等</td>
</tr>
<tr>
<td>数据流操作开发包</td>
<td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td>
</tr>
<tr>
<td>时间消息总栈</td>
<td>SpringCloud Bus</td>
</tr>
<tr>
<td>服务部署</td>
<td>Docker、OpenStack、Kubernetes等</td>
</tr>
</tbody></table>
<h5 id="微服务的四大难题"><a href="#微服务的四大难题" class="headerlink" title="微服务的四大难题"></a>微服务的四大难题</h5><ul>
<li>服务这么多，客户端该怎么访问</li>
<li>这么多服务之间该如何通信</li>
<li>如何管理这么多服务</li>
<li>服务挂了怎么办  </li>
</ul>
<h5 id="三大解决方案："><a href="#三大解决方案：" class="headerlink" title="三大解决方案："></a>三大解决方案：</h5><ul>
<li>Spring Cloud Netflix</li>
<li>Apache Dubbo ZooKeeper</li>
<li>Spring Cloud Alibaba</li>
</ul>
<h4 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h4><h5 id="什么是springcloud"><a href="#什么是springcloud" class="headerlink" title="什么是springcloud"></a>什么是springcloud</h5><p>Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。简单来说springclou就是微服务中遇到的问题的一套解决方案。<br>官网地址：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p>
<h5 id="springcloud能做什么"><a href="#springcloud能做什么" class="headerlink" title="springcloud能做什么"></a>springcloud能做什么</h5><p>Distributed/versioned configuration<br>分布式/版本化配置<br>Service registration and discovery 服务注册和发现<br>Routing 路由<br>Service-to-service calls 服务间的通信调用<br>Load balancing 负载均衡<br>Circuit Breakers 断路器<br>Global locks 全局锁<br>Leadership election and cluster state 选举及集群状态<br>Distributed messaging 分布式消息传递  </p>
<h5 id="springcloud-Netflix中的四大核心组件"><a href="#springcloud-Netflix中的四大核心组件" class="headerlink" title="springcloud-Netflix中的四大核心组件"></a>springcloud-Netflix中的四大核心组件</h5><p>springcloud中的四大核心组件就是为了解决微服务中的四大难题，还有很多其他的组件解决其他的问题，此处只学习使用四大组件来解决四大问题</p>
<ul>
<li>api网关：zuul组件 ——解决客户访问问题</li>
<li>Http通信方式：Ribbon+RestTemplates/Feign（同步，阻塞）——解决服务之间通信问题</li>
<li>服务注册与发现：Eureka ——解决服务管理的问题</li>
<li>熔断机制：Hystrix（断路器） ——解决服务挂了的问题</li>
</ul>
<h5 id="springCloud的理解图"><a href="#springCloud的理解图" class="headerlink" title="springCloud的理解图"></a>springCloud的理解图</h5><p><img src="/posts/f0919c40/springcloud.jpg"></p>
<h5 id="springBoot和springCloud"><a href="#springBoot和springCloud" class="headerlink" title="springBoot和springCloud"></a>springBoot和springCloud</h5><ul>
<li>springBoot是专注于对一个个微服务进行开发的一个框架</li>
<li>springCloud是专注于对使用springBoot开发的所有的微服务进行协调管理的一个框架，也就是对这些所有的微服务进行集成的一个框架，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li>
<li>springBoot可以独立开发项目，但是springCloud必须依赖springBoot开发的服务才能对所有的服务集成为一个项目</li>
<li>简单来说就是：SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架；</li>
</ul>
<h5 id="springBoot与SpringCloud的版本对应"><a href="#springBoot与SpringCloud的版本对应" class="headerlink" title="springBoot与SpringCloud的版本对应"></a>springBoot与SpringCloud的版本对应</h5><p><img src="/posts/f0919c40/%E7%89%88%E6%9C%AC.jpg"><br>注：此处使用2020版本以下的版本进行学习，因为2020版本及以上版本的springCloud中把Ribbon相关的集成的东西全部去掉了，但是我们这里要学习的就是Eureka、Ribbon，所以建议使用2020版本以下的版本进行学习</p>
<h5 id="springCloud其他组件自学网站"><a href="#springCloud其他组件自学网站" class="headerlink" title="springCloud其他组件自学网站"></a>springCloud其他组件自学网站</h5><ul>
<li>官网：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></li>
<li>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></li>
<li>SpringCloud 中文API文档(官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></li>
<li>SpringCloud中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></li>
<li>W3CSchool的springCloud教程：<a href="https://www.w3cschool.cn/spring_cloud/spring_cloud-2hgl2ixf.html">https://www.w3cschool.cn/spring_cloud/spring_cloud-2hgl2ixf.html</a></li>
</ul>
<p>本文是观看狂神说B站视频后整理的笔记——侵删<br>视频地址：<a href="https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver">https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver</a></p>
]]></content>
      <categories>
        <category>springCloud</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springBoot集成dubbo和zookeeper</title>
    <url>/posts/d7e6747c/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文简单介绍了分布式系统，并对dubbo进行了简介，并且介绍了springBoot集成dubbo和zookeeper的流程，并对其进行了简单的测试</p>
<span id="more"></span>
<h4 id="什么是分布式系统"><a href="#什么是分布式系统" class="headerlink" title="什么是分布式系统"></a>什么是分布式系统</h4><p>在《分布式系统原理与范型》书中将分布式系统定义为：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；<br>也就是说：分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用更多的机器，处理更多的数据。————狂神说</p>
<h4 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h4><p>参考文章：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a>  </p>
<h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><p>参考文章：<a href="https://www.jianshu.com/p/2accc2840a1b">https://www.jianshu.com/p/2accc2840a1b</a>  </p>
<h4 id="dubbo的简介"><a href="#dubbo的简介" class="headerlink" title="dubbo的简介"></a>dubbo的简介</h4><p>Apache Dubbo 是一款高性能、轻量级的开源Java RPC框架，它提供了六大核心能力：面向接口代理的高性能RPC调用，智能容错和负载均衡，服务自动注册和发现，高度可扩展能力，运行期流量调度，可视化的服务治理与运维。<br>dubbo官网：<a href="https://dubbo.apache.org/zh/">https://dubbo.apache.org/zh/</a>  </p>
<ul>
<li>基本概念<br><img src="/posts/d7e6747c/dubbo.jpg">  </li>
<li>服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。  </li>
<li>服务消费者（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。  </li>
<li>注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li>
<li>监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心  </li>
<li><em>调用关系说明</em>*</li>
<li>服务容器负责启动，加载，运行服务提供者。</li>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。<br>(注：以上解释为狂神说所作)</li>
</ul>
<h4 id="dubbo环境的搭建"><a href="#dubbo环境的搭建" class="headerlink" title="dubbo环境的搭建"></a>dubbo环境的搭建</h4><p>点进dubbo官方文档，推荐使用Zookeeper 注册中心<br>zookeeper介绍：<br>官方文档：<a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a>  </p>
<h5 id="win系统下zookeeper的下载与安装"><a href="#win系统下zookeeper的下载与安装" class="headerlink" title="win系统下zookeeper的下载与安装"></a>win系统下zookeeper的下载与安装</h5><p>版本：zookeeper-3.4.14<br>官网地址：<a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a>  </p>
<ol>
<li>官网下载zookeeper，并进行解压</li>
<li>修改配置文件<ol>
<li>将zookeeper-3.4.14\conf目录下的zoo_sample.cfg复制一份，并改名为zoo.cfg</li>
<li>点击进入zoo.cfg文件，修改配置文件<br><img src="/posts/d7e6747c/zooconfig.jpg">  </li>
</ol>
</li>
<li>进入zookeeper-3.4.14\bin目录下，双击zkServer.cmd启动zookeeper服务端<br><img src="/posts/d7e6747c/zoo%E5%90%AF%E5%8A%A8.jpg"></li>
</ol>
<h5 id="win系统下dubbo的下载与安装"><a href="#win系统下dubbo的下载与安装" class="headerlink" title="win系统下dubbo的下载与安装"></a>win系统下dubbo的下载与安装</h5><p>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。<br>版本：带admin版本的dubbo-admin-master，即目录为中有admin的版本，新版没有带admin的<br><img src="/posts/d7e6747c/dubbo%E7%9B%AE%E5%BD%95.jpg"><br>下载地址：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a>  </p>
<ol>
<li>进入dubbo-admin\src\main\resources目录下修改application.properties配置文件中zookeeper的地址<br><img src="/posts/d7e6747c/dubboconfig.jpg">   </li>
<li>在项目目录即dubbo-admin目录下进入cmd窗口进行打包<br>打包命令：<code>mvn clean package -Dmaven.test.skip=true</code><br>第一次打包有点慢，如果打包失败，找到错误原因，重新打包</li>
<li>打包成功后到dubbo-admin\target目录下，进入cmd窗口运行dubbo-admin-0.0.1-SNAPSHOT.jar<br>运行命令：<code>java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</code><br><img src="/posts/d7e6747c/dubbo%E8%BF%90%E8%A1%8C.jpg"><br>【注：运行jar包时zookeeper服务端要打开】</li>
<li>jar包运行成功后，我们去访问一下 <a href="http://localhost:7001/">http://localhost:7001/</a> ， 这时候我们需要输入登录账户和密码，默认的账户和密码都为root<br><img src="/posts/d7e6747c/dubbo%E8%AE%BF%E9%97%AE.jpg"> </li>
</ol>
<p><strong>dubbo环境搭建成功！</strong>  </p>
<h4 id="测试框架搭建"><a href="#测试框架搭建" class="headerlink" title="测试框架搭建"></a>测试框架搭建</h4><ol>
<li>启动zookeeper  </li>
<li>在IDEA中创建一个空项目；</li>
<li>创建一个springBoot模块，实现服务提供者：provider-server ，选择web依赖即可</li>
<li>模块创建完毕，写一个服务，比如卖票的服务；</li>
</ol>
<ul>
<li>编写接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写接口实现类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//将对象放到spring容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《java编程思想》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
5、再创建一个springBoot模块，实现服务消费者：consumer-server ， 选择web依赖即可<br>6、项目创建完毕，再写一个服务，比如用户的服务；</li>
<li>编写用户服务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需求：用户想使用买票的服务，怎么获取到这个服务呢？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
测试环境搭建成功！</li>
</ul>
<h4 id="服务提供者提供服务"><a href="#服务提供者提供服务" class="headerlink" title="服务提供者提供服务"></a>服务提供者提供服务</h4><ol>
<li>在服务者模块导入相应的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入dubbo依赖jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--导入zookeeper客户端的jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--zookeeper的日志可能会和springboot的日志产生冲突--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入zookeeper及其依赖jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--排除这个排除springBoot的日志slf4j-log4j12依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在springboot配置文件中配置dubbo相关属性<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="comment"># 配置服务应用的名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider-service</span></span><br><span class="line"><span class="comment"># 配置注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment"># 哪些应用要被注册，即配置扫描指定包下的接口</span></span><br><span class="line"><span class="meta">dubbo.scan.base-packages</span>=<span class="string">com.tsmile.service</span></span><br></pre></td></tr></table></figure></li>
<li>在服务者中的service的实现类中配置服务注解，发布服务，注意不要导错包！<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>  <span class="comment">//将服务发布到指定的注册中心去</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//将对象放到spring容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《java编程思想》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
当这个服务的springBoot项目启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中！</li>
</ol>
<h4 id="消费者进行消费"><a href="#消费者进行消费" class="headerlink" title="消费者进行消费"></a>消费者进行消费</h4><ol>
<li>导入相关依赖(和服务者导入的依赖一样)</li>
<li>配置消费者参数<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8002</span></span><br><span class="line"><span class="comment">#配置当前应用名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">consumer-server</span></span><br><span class="line"><span class="comment">#配置注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure></li>
<li>原本正常步骤是需要将服务提供者的接口进行打包，然后用pom文件导入这个jar包，我们这里为了测试简便，使用简单的方式，直接将服务的接口复制过来，复制的接口所在的路径必须保证和服务接口的路径一致，即和服务提供者接口的路径相同；  </li>
<li>编写消费者消费代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需求：用户想使用买票的服务，怎么获取到这个服务呢？</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span> <span class="comment">//远程引用指定的服务，他会按照全类名进行匹配，看谁给注册中心注册了这个全类名</span></span><br><span class="line">    TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bugTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String ticket = ticketService.getTicket();</span><br><span class="line">        System.out.println(<span class="string">&quot;在注册中心买到&quot;</span>+ticket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><ol>
<li>启动zookeeper服务  </li>
<li>启动dubbo监控中心，即到dubbo-admin\target目录下，进入cmd窗口运行dubbo-admin-0.0.1-SNAPSHOT.jar  </li>
<li>在idea中开启服务者，即启动服务者的springBoot项目</li>
<li>在idea中开启消费者，即启动消费者的springBoot项目<br>运行结果： 在 <a href="http://localhost:7001/%E4%B8%AD%E6%9F%A5%E7%9C%8B">http://localhost:7001/中查看</a><br><img src="/posts/d7e6747c/%E6%8F%90%E4%BE%9B%E8%80%85.jpg"> </li>
<li>在测试类中进行消费者测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerServerApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.bugTicket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
运行结果：拿到了服务端的东西了<br><img src="/posts/d7e6747c/test.jpg"> </li>
</ol>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>异步-邮件-定时任务</title>
    <url>/posts/d0efce07/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文简单介绍了异步任务和注解异步任务开启的流程，介绍了定时任务的开启和cron表达式，并且实现了邮件的发送</p>
<span id="more"></span>
<h4 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h4><ul>
<li>什么是异步任务？<br>异步任务其实跟ajax的异步请求类似，异步任务就是开启多线程处理任务，主线程中的程序运行不受影响，另一个线程处理任务，这样就不会因为要处理任务而产生延迟了。异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</li>
</ul>
<ol>
<li>创建一个springBoot项目</li>
<li>同步任务的模仿(即不开启异步任务)</li>
</ol>
<ul>
<li>编写一个HelloService1来进行任务的处理<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据正在处理中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//此线程睡眠5秒来模仿正在处理任务</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写HelloController类，里面编写hello1接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    HelloService1 helloService1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        helloService1.asyncHello();</span><br><span class="line">        <span class="comment">//如果不开启异步任务，那么要等5秒后才能返回字符串ok</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello1-OK&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务进行访问hello1进行测试，要等待5秒胡才能收到hello1-OK<br>这种方式对用户的体验及其不好，延迟非常严重</li>
</ul>
<p>3、手动开启线程进行异步任务的处理</p>
<ul>
<li>编写一个HelloService2线程来进行任务的处理<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        asyncHello();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据正在处理中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在HelloController类里面编写hello2接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HelloService2 helloService2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//手动创建一个线程去执行这个方法，这样可以不用等待调用的方法执行完才返回hello2-OK</span></span><br><span class="line">    Thread helloService1 = <span class="keyword">new</span> Thread(helloService2);</span><br><span class="line">    helloService1.start();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello2-OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务进行访问hello2进行测试，发现立刻就能接收到hello2-OK。<br>我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们有没有一个简单的办法呢？有，就是在我们的方法上加一个简单的注解即可。</li>
</ul>
<p>4、注解开启异步任务处理</p>
<ul>
<li>编写一个HelloService类来进行任务的处理，并使用注解标注这是一个异步任务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span> <span class="comment">//标记此类为异步任务类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据正在处理中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解<span class="meta">@EnableAsync</span> ，开启异步注解功能；  </span><br><span class="line">* 在主启动类上开启异步任务功能</span><br><span class="line">```java</span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在HelloController类里面编写hello接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HelloService helloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        helloService.asyncHello();</span><br><span class="line">        <span class="comment">//如果不开启异步任务，那么要等5秒后才能返回字符串ok</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello-OK&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务进行访问hello进行测试，发现立刻就能接收到hello-OK。</li>
</ul>
<h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口和两个注解，分别为：<br>TaskExecutor接口<br>TaskScheduler接口<br>@EnableScheduling 注解<br>@Scheduled 注解  </p>
<ul>
<li>定时任务的两个核心接口：<br>TaskScheduler：任务调度者，对应着注解@EnableScheduling：开启定时任务<br>TaskExecutor：任务执行者，对应着注解@Scheduled(cron表达式)：定时执行任务*</li>
</ul>
<ol>
<li>cron表达式<br>是用于定义时间规则的一种表达方式<br><img src="/posts/d0efce07/cron.jpg"><br>常用特殊字符的含义：<br>●星号(<em>)：可用在所有字段中，表示对应时间域的每一个时刻，例如，</em>在分钟字段时，表示“每分钟”；<br>●问号（?）：该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于点位符；<br>●减号(-)：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12；<br>●逗号(,)：表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五；<br>●斜杠(/)：x/y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒，而5/15在分钟字段中表示5,20,35,50，你也可以使用*/y，它等同于0/y；<br>详细请见 锐洋智能 地址：<a href="https://www.cnblogs.com/interdrp/p/5003257.html">https://www.cnblogs.com/interdrp/p/5003257.html</a>  </li>
<li>定时任务测试</li>
</ol>
<ul>
<li>编写一个ScheduleService类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&quot;0/2 * * * * ?&quot; : 每两秒执行一次</span></span><br><span class="line">    <span class="comment">//cron表达式相关内容了解：https://www.cnblogs.com/interdrp/p/5003257.html</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello执行了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在主启动类上添加开启定时功能注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启定时功能</span></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务进行测试</li>
</ul>
<h4 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h4><p>邮件发送，在我们的日常开发中用得也非常的多，Springboot也帮我们做了支持</p>
<ol>
<li>导入相关依赖<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--邮件依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li>我们看一下springBoot的邮件自动发送类MailSenderAutoConfiguration<br><img src="/posts/d0efce07/mail01.jpg"><br>发现这个类中没有注册bean，我们点到这个类中导入的类<br><img src="/posts/d0efce07/mail02.jpg"><br>发现这个类中注册了一个mailSender邮件发送类，可以知道我们是通过这个bean进行邮件发送的，这个bean中创建了一个mailSenderImpl实现类，我们点进去看一下<br><img src="/posts/d0efce07/mail03.jpg"><br>发现这里全是我们可以配置的属性，好了，我们知道要怎么做了</li>
<li>在application.properties中进行配置<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">此处填写qq邮箱账号</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">此处填写qq授权码</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment"># 开启加密认证</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.stp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
<li>获取qq授权码<br>打开QQ邮箱，点击设置<br><img src="/posts/d0efce07/qq01.jpg"><br>进入设置后，点击账户<br><img src="/posts/d0efce07/qq02.jpg"><br>在账户页面，开启POP3服务<br><img src="/posts/d0efce07/qq03.jpg"><br>跟着开启的步骤进行开启，最后会有一个qq授权码给你  </li>
<li>简单邮件发送测试(在测试类中进行)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要配置了相关的mail配置才能进行自动注入</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//发送一个简单的邮件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个简单邮件信息对象</span></span><br><span class="line">    SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">    <span class="comment">//设置邮件的标题</span></span><br><span class="line">    message.setSubject(<span class="string">&quot;言笑，你好呀~&quot;</span>);</span><br><span class="line">    <span class="comment">//设置邮件的内容</span></span><br><span class="line">    message.setText(<span class="string">&quot;谢谢言笑的努力学习，加油哦~&quot;</span>);</span><br><span class="line">    <span class="comment">//发送者的邮箱，即邮件的来源</span></span><br><span class="line">    message.setFrom(<span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//接受者的邮箱，即邮件的去处</span></span><br><span class="line">    message.setTo(<span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将信息发出去</span></span><br><span class="line">    mailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>复杂邮件发送测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    <span class="comment">//发送一个复杂的邮件，可以将发送邮件封装成一个util类，这样就更加方便了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个复杂邮件</span></span><br><span class="line">    MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">    <span class="comment">//将复杂邮件给到一个helper助手对邮件进行组装，true为是否开启多附件模式</span></span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage,<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//通过助手设置邮件标题</span></span><br><span class="line">    helper.setSubject(<span class="string">&quot;言笑，你好呀~&quot;</span>);</span><br><span class="line">    <span class="comment">//通过助手设置邮件内容,并开启是否为html文本</span></span><br><span class="line">    helper.setText(<span class="string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;谢谢言笑的努力学习，加油哦~&lt;/p&gt;&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//为邮件添加附件,参数一：附件名称，参数二：附件地址路径</span></span><br><span class="line">    helper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;F:\\桌面1\\图片\\beauty1.jpg&quot;</span>));</span><br><span class="line">    helper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;F:\\桌面1\\图片\\ttt.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">//发送者的邮箱，即邮件的来源</span></span><br><span class="line">    helper.setFrom(<span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//接受者的邮箱，即邮件的去处</span></span><br><span class="line">    helper.setTo(<span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//邮件发送</span></span><br><span class="line">    mailSender.send(mimeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>打开邮箱查看，已发送成功！！</li>
</ol>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger</title>
    <url>/posts/bf71eba1/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文简单介绍了swagger，和springBoot继承swagger的流程，在集成的过程中分别从配置swagger文档信息，配置扫描接口，swagger的开关和分组，实体类配置和swagger在线测试接口进行了介绍</p>
<span id="more"></span>
<h4 id="swagger简介"><a href="#swagger简介" class="headerlink" title="swagger简介"></a>swagger简介</h4><ul>
<li>什么是swagger<br>swagger是一个实时在线生成api文档的工具。<br>swagger官网：<a href="https://swagger.io/">https://swagger.io/</a></li>
<li>swagger有什么用<br>1、适合多人合作开发，并解决了前后端分离后交流延时的难题<br>2、可以通过swagger给一些难以理解的接口，属性等添加一些注释信息<br>3、接口文档实时更新<br>4、可以在线测试<br>5、支持多种语言 （如：Java，PHP等）<br>注意： 在项目的生产环境中记得要关闭swagger，因为不能让用户知道我们程序的接口等信息，为了项目的安全，并且为了减小项目的运行的内存，也要关掉swagger，因为开启swagger要加载很多东西的   </li>
<li>为什么要使用swagger<br>1、背景：现在是前后端分离的时代，前端：前端控制层、视图层；后端：后端控制层、服务层、数据访问层；前后端变得相对独立，并且松耦合，前后端通过api文档来进行交互。<br>2、产生的问题：当前后端进行集成时，前端或者后端无法做到通过实时更新api文档进行“及时协商，尽早解决”，最终导致问题集中爆发<br>3、解决：首先要定义计划的提纲，并实时跟踪最新的API，降低集成风险<br>swagger正是为了解决这个问题而生的，它能实时更新api文档，并且可以对接口进行在线测试，这样就能够解决前后端交流不及时的问题，降低了继承的风险</li>
</ul>
<h4 id="springBoot集成swagger的环境配置"><a href="#springBoot集成swagger的环境配置" class="headerlink" title="springBoot集成swagger的环境配置"></a>springBoot集成swagger的环境配置</h4><p>注：运行环境：jdk8 + swagger 2</p>
<ol>
<li>新建一个springBoot项目</li>
<li>导入相依的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--swagger的jar包,注：swagger 3.0.0版本进入不了swagger-ui.html页面--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger-ui依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger 2 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger注解依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写一个HelloController，确保springBoot项目能运行起来<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写SwaggerConfig配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启swagger</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，测试访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> swagger-ui界面</li>
</ol>
<h4 id="在SwaggerConfig配置类中进行swagger的配置"><a href="#在SwaggerConfig配置类中进行swagger的配置" class="headerlink" title="在SwaggerConfig配置类中进行swagger的配置"></a>在SwaggerConfig配置类中进行swagger的配置</h4><ol>
<li>通过apiInfo()属性配置文档信息<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//作者信息</span></span><br><span class="line">       Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;言笑&quot;</span>,</span><br><span class="line">               <span class="string">&quot;https://1815972815.github.io/&quot;</span>, <span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line">       <span class="comment">//通过查看apiInfo的默认构造器参数，根据它的默认构造器参数修改成自己的参数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(<span class="string">&quot;言笑的Api文档&quot;</span>,</span><br><span class="line">               <span class="string">&quot;对于可控的事情要谨慎，对于不可控的事情要乐观，&lt;br/&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;人只能做自己能力范围内的事情，我们要接受这个事实&quot;</span>,</span><br><span class="line">               <span class="string">&quot;v1.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;https://1815972815.github.io/&quot;</span>,</span><br><span class="line">               contact,</span><br><span class="line">               <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">               <span class="keyword">new</span> ArrayList&lt;VendorExtension&gt;());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>Swagger实例就是是Docket，所以要通过配置Docket实例来配置Swaggger。<br>在Docket通过apiInfo()方法关联配置文档信息<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置swagger中的Docket的bean对象，通过这个对象将swagger的基本信息传递到swagger-ui页面中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置要开启swagger的环境</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        <span class="comment">//判断设置的环境是否被激活</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，测试访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> 页面查看ui文档的信息改变</li>
</ol>
<h4 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h4><p>构建Docket时通过select()方法配置怎么扫描接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            <span class="comment">//配置扫描接口的方式</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.basePackage 扫描对应的包下的接口（常用）</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.any 扫描所有包下的接口</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.none 全部都不扫描</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.withClassAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.withMethodAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">            <span class="comment">//通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">            .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.tsmile.controller&quot;</span>))</span><br><span class="line">            <span class="comment">//指定扫描某个路径下的所有接口</span></span><br><span class="line">            <span class="comment">//.paths(PathSelectors.ant(&quot;/tsmile/**&quot;))</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置swagger的开关"><a href="#配置swagger的开关" class="headerlink" title="配置swagger的开关"></a>配置swagger的开关</h4><ol>
<li>通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">       <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">               <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">               .apiInfo(apiInfo())</span><br><span class="line">               <span class="comment">//设置是否启用swagger，这个方法可以设置在不同环境下是否启用swagger</span></span><br><span class="line">               .enable(<span class="keyword">false</span>)</span><br><span class="line">               <span class="comment">//配置扫描接口的方式</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.basePackage 扫描对应的包下的接口（常用）</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.any 扫描所有包下的接口</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.none 全部都不扫描</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withClassAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withMethodAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">               .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.tsmile.controller&quot;</span>))</span><br><span class="line">               <span class="comment">//指定扫描某个路径下的所有接口</span></span><br><span class="line">               <span class="comment">//.paths(PathSelectors.ant(&quot;/tsmile/**&quot;))</span></span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>如何动态配置swagger在项目处于不同的环境时的开关，如处于dev和test环境时swagger开启，处于pro环境时swagger关闭<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">       <span class="comment">//设置要开启swagger的环境</span></span><br><span class="line">       Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="comment">//判断设置的环境是否被激活，如果激活了，返回true，否则返回false</span></span><br><span class="line">       <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">       <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">               <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">               .apiInfo(apiInfo())</span><br><span class="line">               <span class="comment">//设置是否启用swagger，这个方法可以设置在不同环境下是否启用swagger</span></span><br><span class="line">               .enable(flag)</span><br><span class="line">               <span class="comment">//配置扫描接口的方式</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.basePackage 扫描对应的包下的接口（常用）</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.any 扫描所有包下的接口</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.none 全部都不扫描</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withClassAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withMethodAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">               .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.tsmile.controller&quot;</span>))</span><br><span class="line">               <span class="comment">//指定扫描某个路径下的所有接口</span></span><br><span class="line">               <span class="comment">//.paths(PathSelectors.ant(&quot;/tsmile/**&quot;))</span></span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>在resources目录下创建多两个环境，一个application-dev.yaml环境和一个application-pro.yaml环境<br>application-dev.yaml环境<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="string">```</span>  </span><br><span class="line"><span class="string">application-pro.yaml环境</span>  </span><br><span class="line"><span class="string">```yaml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure>
在默认环境中激活dev环境<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">&quot;dev&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>启动服务，查看swagger有没有被开启</li>
</ol>
<h4 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h4><ol>
<li>如果没有配置分组，默认是default。通过groupName()方法即可配置分组<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">       <span class="comment">//设置要开启swagger的环境</span></span><br><span class="line">       Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">       <span class="comment">//判断设置的环境是否被激活</span></span><br><span class="line">       <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">       <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">               <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">               .apiInfo(apiInfo())</span><br><span class="line">               <span class="comment">//设置组名，即如果多人合作开发的话，需要用到组名来分辨那个人开发了什么</span></span><br><span class="line">               .groupName(<span class="string">&quot;tSmile&quot;</span>)</span><br><span class="line">               <span class="comment">//设置是否启用swagger，这个方法可以设置在不同环境下是否启用swagger</span></span><br><span class="line">               .enable(flag)</span><br><span class="line">               <span class="comment">//配置扫描接口的方式</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.basePackage 扫描对应的包下的接口（常用）</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.any 扫描所有包下的接口</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.none 全部都不扫描</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withClassAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withMethodAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">               .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.tsmile.controller&quot;</span>))</span><br><span class="line">               <span class="comment">//指定扫描某个路径下的所有接口</span></span><br><span class="line">               <span class="comment">//.paths(PathSelectors.ant(&quot;/tsmile/**&quot;))</span></span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>如何配置多个分组？如果想要配置多个分组只需要配置多个docket即可<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果多个人开发，那么就会有多个docket，每个docket都只扫描自己开发的那个包，</span></span><br><span class="line"><span class="comment">// 然后通过分组来查看每个人负责写的接口</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，测试访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a><br><img src="/posts/bf71eba1/%E5%88%86%E7%BB%84.jpg"></li>
</ol>
<h4 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h4><ol>
<li>注解的解释<br>@ApiModel 为类添加注释<br>@ApiModelProperty 为类属性添加注释<br>@ApiOperation 为控制类controller添加注释(即为请求的接口注释)<br>这些swagger的api注解都是为了给类，方法，属性或者参数加注释，增强可读性，并没有其他的作用</li>
<li>创建实体类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter和setter方法和toString方法自己补充</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写controller <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;hello控制类&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;user控制类&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//只有当返回值中有这个类，那么这个类才会被放到swagger的module中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;username控制类&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/username&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user1</span><span class="params">(<span class="meta">@ApiParam(&quot;用户名&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;getUser控制类&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@ApiParam(&quot;用户&quot;)</span> User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，测试访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a><br><img src="/posts/bf71eba1/controller.jpg"><br>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。 </li>
</ol>
<h4 id="在swagger-ui界面上测试接口"><a href="#在swagger-ui界面上测试接口" class="headerlink" title="在swagger-ui界面上测试接口"></a>在swagger-ui界面上测试接口</h4><p>swagger的另一个强大之处就是能够在线实时测试接口，以下以测试一个接口为例，如图为测试流程：<br><img src="/posts/bf71eba1/%E6%B5%8B%E8%AF%9501.jpg"><br><img src="/posts/bf71eba1/%E6%B5%8B%E8%AF%9502.jpg"><br><img src="/posts/bf71eba1/%E6%B5%8B%E8%AF%9503.jpg"></p>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro</title>
    <url>/posts/1c025fc/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文描述了什么是shiro，以及shiro通过shiro的快速开始来初步了解shiro，然后shiro和springBoot的整合的环境，通过登录拦截，用户认证，请求授权，整合thymeleaf和用户注销来对shiro进行进一步的了解</p>
<span id="more"></span>
<h4 id="什么是shiro"><a href="#什么是shiro" class="headerlink" title="什么是shiro"></a>什么是shiro</h4><ol>
<li>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</li>
<li>主要功能</li>
</ol>
<ul>
<li>三个核心组件：Subject, SecurityManager 和 Realms.</li>
<li>Subject：即“当前操作用户”。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。</li>
<li>SecurityManager：它是Shiro框架的核心，典型的Facade模式，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。</li>
<li>Realm： Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。</li>
<li>Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。如果系统默认的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。<br>3、 shiro官网：<a href="https://shiro.apache.org/">https://shiro.apache.org/</a></li>
</ul>
<h4 id="shiro快速开始（参考官网）"><a href="#shiro快速开始（参考官网）" class="headerlink" title="shiro快速开始（参考官网）"></a>shiro快速开始（参考官网）</h4><ol>
<li>创建一个普通maven项目</li>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- configure logging --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在resources目录下创建一个shiro.ini文件，并配置ini文件<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span></span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27; (&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="comment"># my luggage!!!&quot; ;)), and role &#x27;president&#x27;</span></span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="comment"># user &#x27;darkhelmet&#x27; with password &#x27;ludicrousspeed&#x27; and roles &#x27;darklord&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="comment"># user &#x27;lonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Each line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard &#x27;*&#x27;</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span></span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="comment"># The &#x27;goodguy&#x27; role is allowed to &#x27;drive&#x27; (action) the winnebago (type) with</span></span><br><span class="line"><span class="comment"># license plate &#x27;eagle5&#x27; (instance specific id)</span></span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure></li>
<li>在resources目录下创建log4j.properties文件，并进行配置<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m %n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># General Apache libraries</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Default Shiro logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro</span>=<span class="string">INFO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Disable verbose logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.util.ThreadContext</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure></li>
<li>创建Quickstart类，快速开始shiro<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quickstart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The easiest way to create a Shiro SecurityManager with configured</span></span><br><span class="line">        <span class="comment">// realms, users, roles and permissions is to use the simple INI config.</span></span><br><span class="line">        <span class="comment">// We&#x27;ll do that by using a factory that can ingest a .ini file and</span></span><br><span class="line">        <span class="comment">// return a SecurityManager instance:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the shiro.ini file at the root of the classpath</span></span><br><span class="line">        <span class="comment">// (file: and url: prefixes load from files and urls respectively):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原来的方法</span></span><br><span class="line">        <span class="comment">/*Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory(&quot;classpath:shiro.ini&quot;);</span></span><br><span class="line"><span class="comment">        SecurityManager securityManager = factory.getInstance();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//新方法   shiro更新问题</span></span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        IniRealm iniRealm = <span class="keyword">new</span> IniRealm(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        securityManager.setRealm(iniRealm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for this simple example quickstart, make the SecurityManager</span></span><br><span class="line">        <span class="comment">// accessible as a JVM singleton.  Most applications wouldn&#x27;t do this</span></span><br><span class="line">        <span class="comment">// and instead rely on their container configuration or web.xml for</span></span><br><span class="line">        <span class="comment">// webapps.  That is outside the scope of this simple quickstart, so</span></span><br><span class="line">        <span class="comment">// we&#x27;ll just do the bare minimum so you can continue to get a feel</span></span><br><span class="line">        <span class="comment">// for things.</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        <span class="comment">//获取当前用户</span></span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        <span class="comment">//通过当前用户获取shiro的session</span></span><br><span class="line">        Session session = currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        String value = (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="comment">//判断当前用户是否被认证</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">//如果被认证，通过用户的账号和密码生成一个token令牌</span></span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="keyword">true</span>);<span class="comment">//执行登录操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        <span class="comment">//currentUser.getPrincipal()获取当前用户的认证信息</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a role:</span></span><br><span class="line">        <span class="comment">//测试这个用户是否有这个角色</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="comment">//粗粒度判断用户权限</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="comment">//细粒度判断用户权限</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!</span></span><br><span class="line">        <span class="comment">//注销</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束系统</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="shiro整合springBoot的环境搭建"><a href="#shiro整合springBoot的环境搭建" class="headerlink" title="shiro整合springBoot的环境搭建"></a>shiro整合springBoot的环境搭建</h4><ol>
<li>导入相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--shiro依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j日志依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid数据库连接池依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis整合springBoot依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--shiro-thymeleaf整合依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写user实体类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写对应的mapper接口UserMapper<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在resources/mybatis/mapper下编写对应的mapper映射文件UserMapper.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tsmile.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from `user` where `name`=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写service层<br>UserService接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
UserServiceImpl实现类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        User user = userMapper.queryUserByName(name);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写controller<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello_shiro&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;add&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;update&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>配置yanl配置文件<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#给pojo包下的实体类起别名，让mapper接口和对应的mapper映射文件尽力连接</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.tSmile.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure></li>
<li>编写html页面<br>index页面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果session中没有登录的用户名，那么就显示登录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果用户有user:add权限，那么就显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果session中有登录的用户名，那么就显示注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser != null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
login页面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;exception&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:action=&quot;@&#123;/index&#125;&quot;中的action属性的值不能只写“”双引号，如果只写双引号，那么就会包500错误--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>密 码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
add页面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
update页面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>update<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>update<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建ShiroConfig类，并配置shiroConfig<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*shiroConfig中有三大对象，分别是</span></span><br><span class="line"><span class="comment">    * shiroFilterFactoryBean shiro过滤器工厂对象</span></span><br><span class="line"><span class="comment">    * defaultWebSecurityManager 默认web安全管理对象</span></span><br><span class="line"><span class="comment">    * realm 认证授权对象</span></span><br><span class="line"><span class="comment">    * 这三大对象从下往上配，其中realm对象要自定义*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//shiroFilterFactoryBean shiro过滤器工厂对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//defaultWebSecurityManager 创建默认的web安全管理对象，并关联Realm对象</span></span><br><span class="line">    <span class="comment">//通过@Qualifier(&quot;getUserRealm&quot;)注解将DefaultWebSecurityManager和getUserRealm绑定起来</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;getUserRealm&quot;)</span> UserRealm userRealm)</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//关联realm对象</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//realm 创建认证授权对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">getUserRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>自定义realm对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了==&gt; 授权方法doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了==&gt; 认证方法doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试mapper和service <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShiroSpringbootApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userService.queryUserByName(<span class="string">&quot;段誉&quot;</span>);</span><br><span class="line"><span class="comment">//        User user = userMapper.queryUserByName(&quot;段誉&quot;);</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，测试Controller</li>
</ol>
<p><strong>终于配置好环境了，好长的环境准备啊，不过很多都是学习过的内容，就当是复习啦！</strong></p>
<h4 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截"></a>登录拦截</h4><ol>
<li>在ShiroFilterFactoryBean过滤工厂添加拦截<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加shiro的内置过滤器，对访问的某个路径进行拦截</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * anon: 无需认证就可以访问</span></span><br><span class="line"><span class="comment">        * authc: 必须认证才可以访问</span></span><br><span class="line"><span class="comment">        * user: 必须要有记住我功能才能访问</span></span><br><span class="line"><span class="comment">        * perms: 必须拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">        * role: 必须拥有某个角色才能访问</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//对user路径下的所有资源进行过滤，必须要认证才可以访问</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        <span class="comment">//设置登录的请求，若未登录，则跳转到此路径</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br></pre></td></tr></table></figure></li>
<li>启动服务，测试add和update是否被拦截了</li>
</ol>
<h4 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h4><ol>
<li>在Controller中修改login请求，并在登录的loginController中接收用户传过来的用户名和密码，并将用户名和密码封装成一个token令牌，然后通过当前用户执行登录方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//封装用户登录数据,形成一个令牌</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">        <span class="comment">//创建当前对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过当前用户执行登录方法</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">            <span class="comment">//捕获用户名不存在异常</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;exception&quot;</span>, <span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">            <span class="comment">//捕获密码错误异常</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;exception&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>在realm对象中进行用户认证<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此自动注入放在授权方法的上面</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"><span class="comment">//认证</span></span><br><span class="line"><span class="comment">//执行登录请求会跳转到认证方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了==&gt; 认证方法doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">    <span class="comment">//登录的时候会将controller中的令牌token传过来</span></span><br><span class="line">    <span class="comment">//将AuthenticationToken类型的令牌转换成在controller中令牌的类型UsernamePasswordToken</span></span><br><span class="line">    UsernamePasswordToken userToken = (UsernamePasswordToken)token;</span><br><span class="line">    <span class="comment">//通过username获取数据库的user</span></span><br><span class="line">    User user = userService.queryUserByName(userToken.getUsername());</span><br><span class="line">    <span class="comment">//对比用户输入的用户名和密码数据是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果用户不存在，返回null，就会抛出用户名不存在的异常</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//密码认证是shiro来进行认证的，？？？为什么将密码传进去就可以了？不用用户传进来的数据就能进行比较？？？</span></span><br><span class="line">    <span class="comment">//还是这个方法会获取封装用户数据成token时或者登录时的密码？？？</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数一：当前用户的信息,将用户传进来，就可以通过当前用户获取该用户的信息了</span></span><br><span class="line"><span class="comment">    参数二：密码对象</span></span><br><span class="line"><span class="comment">    参数三：参数认证名</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，测试用户认证是否成功</li>
</ol>
<h4 id="请求授权"><a href="#请求授权" class="headerlink" title="请求授权"></a>请求授权</h4><ol>
<li>拦截：拦截那些没有对应权限的用户。在shiroFilterFactoryBean过滤工厂中，使用授权代替认证，设置用户需要某个权限才能访问某个页面<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拦截</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//对user路径下的所有资源进行过滤，必须要认证才可以访问</span></span><br><span class="line">        <span class="comment">//filterMap.put(&quot;/user/add&quot;, &quot;authc&quot;);</span></span><br><span class="line">        <span class="comment">//filterMap.put(&quot;/user/update&quot;, &quot;authc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置用户拥有某些权限才能访问这个路径,</span></span><br><span class="line">        <span class="comment">// 如perms[user:add]说明必须要有user:add权限才能访问</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录的请求，若未登录，则跳转到此路径</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//设置授权的请求,若未授权，则跳转到此路径</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/unauthorized&quot;</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br></pre></td></tr></table></figure></li>
<li>编写未授权跳转的Controller<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/unauthorized&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">unauthorized</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;您未被授权进入此页面!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>给数据库中的表格添加perms权限字段，并未每个用户添加相应的权限</li>
<li>授权：对用户授予对应的权限。在realm对象中进行权限的授予<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了==&gt; 授权方法doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="comment">//在检查有没有授予权力时，会进入这个方法进行检查</span></span><br><span class="line">        <span class="comment">// 对进来的用户授予权力</span></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//对所有进入这个方法的用户授予user:add权限，所以所有用户都能访问需要这个权限的路径</span></span><br><span class="line"><span class="comment">//        info.addStringPermission(&quot;user:add&quot;);</span></span><br><span class="line">        <span class="comment">//获取当前用户对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//能够强行转换成User对象是因为在shiroFilterFactoryBean过滤工厂中进行密码认证时将用户传递了进来</span></span><br><span class="line">        User currentUser = (User) subject.getPrincipal();</span><br><span class="line">        <span class="comment">//获取当前用户的权限信息来赋予当前用户，那么当前用户就只能访问用户有的权限的路径了</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务进行授权测试</li>
</ol>
<h4 id="整合thymeleaf"><a href="#整合thymeleaf" class="headerlink" title="整合thymeleaf"></a>整合thymeleaf</h4><p>整合thymeleaf就是要和前端做交互，用户有哪个权限，就显示对应权限能够点击进入对应页面的标签</p>
<ol>
<li>将ShiroDialect注入到容器中，用来整合shiro和thymeleaf，html页面才能使用shiro:hasPermission=”user:add”等方法获取到对应的值，shiro:hasPermission用来判断当前用户的权限是否拥有某个权限<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将shiro和thymeleaf整合交给springBoot管理</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改index前端页面(准备阶段已修改好)，但是这样的话如果没有登录的话，页面就什么都不会显示，也就没办法登录了<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果用户有user:add权限，那么就显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>我们在index页面编写一个登录标签(准备阶段已修改好)<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果session中没有登录的用户，那么就显示登录标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在realm对象认账方法中，如果用户存在，就将用户名放到session中<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//对比用户输入的用户名和密码数据是否正确</span></span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="comment">//如果用户名不正确，返回null，就会抛出用户名不存在的异常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取用户后，将用户user放到session中，用于登录和注销标签的额显示和隐藏</span></span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">Session session = subject.getSession();</span><br><span class="line">session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br></pre></td></tr></table></figure></li>
<li>启动服务，进行测试</li>
</ol>
<h4 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h4><ol>
<li>在index页面添加logout退出标签(准备阶段已修改好)<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果session中有登录的用户名，那么就显示注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser != null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写logout Controller<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前用户</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//用户退出</span></span><br><span class="line">    subject.logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务测试</li>
</ol>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>最后附上shiro和springBoot整合的目录结构<br><img src="/posts/1c025fc/%E7%9B%AE%E5%BD%95.jpg"></p>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecrity</title>
    <url>/posts/2a612659/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文对springSecrity进行了初步了解，并对springSecrity和springBoot整合流程进行了描述</p>
<span id="more"></span>
<h4 id="安全简介"><a href="#安全简介" class="headerlink" title="安全简介"></a>安全简介</h4><p>在Web开发中，安全是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。————狂神说</p>
<h4 id="什么是springSecrity"><a href="#什么是springSecrity" class="headerlink" title="什么是springSecrity"></a>什么是springSecrity</h4><ul>
<li>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它是保护基于Spring的应用程序的事实标准。</li>
<li>SpringSecurity是一个框架，它关注于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正威力在于它可以多么容易地扩展以满足定制需求</li>
<li>一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。</li>
<li>springSecrity在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</li>
</ul>
<h4 id="springSecrity实验环境搭建"><a href="#springSecrity实验环境搭建" class="headerlink" title="springSecrity实验环境搭建"></a>springSecrity实验环境搭建</h4><ol>
<li>静态资源导入和依赖</li>
</ol>
<ul>
<li>jquery-3.1.1.min.js</li>
<li>semantic.min.js</li>
<li>导入依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>level页面的编写(此处以level1的1.html为例)<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/tSmile/css/style.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;index::nav-menu&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Level-1-1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/jquery-3.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/semantic.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>index页面的编写<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/tSmile/css/style.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">id</span>=<span class="string">&quot;index-header-nav&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;nav-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui secondary menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果未登录，显示登录按钮--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果已登录，显示注销按钮和用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                        用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--注销--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign-out icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Spring Security Study<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui three column stackable grid&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--菜单根据用户的角色动态呈现--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/jquery-3.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/semantic.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>login页面的编写<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui placeholder segment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui column very relaxed stackable grid&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui form&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;user icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;lock icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住我</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui blue submit button&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui label&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">i</span>&gt;</span>注册</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">small</span>&gt;</span>blog.kuangstudy.com<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Spring Security Study<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/jquery-3.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/semantic.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>style.css的编写<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1150px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#index-header-nav</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#blog-lable</span>&gt;<span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>静态资源具体目录如下<br><img src="/posts/2a612659/%E7%9B%AE%E5%BD%95.jpg"></li>
<li>controller的编写<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level1/&#123;page&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level1</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level1/&quot;</span>+page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level2/&#123;page&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level2</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level2/&quot;</span>+page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level3/&#123;page&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level3</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level3/&quot;</span>+page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，测试实验环境</li>
</ol>
<h4 id="springSecrity的认证和授权"><a href="#springSecrity的认证和授权" class="headerlink" title="springSecrity的认证和授权"></a>springSecrity的认证和授权</h4><p>在springSecrity中几个重要的类：  </p>
<ul>
<li>WebSecurityConfigurerAdapter：自定义Security策略</li>
<li>AuthenticationManagerBuilder：自定义认证策略</li>
<li>@EnableWebSecurity：开启WebSecurity模式<br>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</li>
<li>“认证”（Authentication）: 身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</li>
<li>“授权” （Authorization）: 授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</li>
</ul>
<ol>
<li>引入springSecrity和thymeleaf和springSecurity的整合依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--thymeleaf和springSecurity的整合包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写springSecrity位置类，并定制授权规则<br>参考springSecrity官网：<a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/">https://docs.spring.io/spring-security/site/docs/current/reference/html5/</a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相当于aop拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line"><span class="comment">//授权方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//链式编程</span></span><br><span class="line">    <span class="comment">//请求授权的规则</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            <span class="comment">// &quot;/&quot;下的即index页面允许所有人访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">            <span class="comment">//&quot;/level1/**&quot;目录下的所有资源要是vip1角色才能访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试，发现除了首页，其他页面都进不去，因为没有登录的角色，要进入其他页面，需要登录的角色拥有对应的权限才能进去</li>
<li>在授权方法中开启登录功能，跳到登录页面<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动没有授权默认会跳到登录页面，即跳转到/login页面</span></span><br><span class="line"><span class="comment">//自定义登录页面，记住页面中的表单中对应的name属性必须是username和password</span></span><br><span class="line"><span class="comment">//如果不是，那么就要用到usernameParameter(&quot;xxx&quot;)和passwordParameter(&quot;xxx&quot;)来接收对应的数据</span></span><br><span class="line"><span class="comment">//loginPage(&quot;/toLogin&quot;)跳转到这个登录页面</span></span><br><span class="line"><span class="comment">//loginProcessingUrl(&quot;/login&quot;):登陆表单提交请求,提交给springSecrity</span></span><br><span class="line">http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br></pre></td></tr></table></figure>
注意：此处前端也要对应的跳转到/toLogin页面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>重写认证方法，定义验证规则<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//认证方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//认证数据一般是从数据库中获取，此处演示的是从内存中获取的方法</span></span><br><span class="line">    <span class="comment">//在定义用户的密码时，要调用对密码进行编码加密的方法，如果不调用，那么springboot会认为密码不安全，会报错</span></span><br><span class="line">    auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">        <span class="comment">//在内存中存储一个用户名为admin，密码为123456，角色为vip1的用户</span></span><br><span class="line">        .withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">        <span class="comment">//可以通过and()方法来存储多个用户</span></span><br><span class="line">        .and()</span><br><span class="line">        <span class="comment">//用户的角色可以有多个</span></span><br><span class="line">        .withUser(<span class="string">&quot;tSmile&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务进行测试，发现点到需要登录才能进去的页面会跳转到登录页面，然后可以输入我们定义的角色的用户名和密码进行登录，然后就可以访问角色的对应权限的页面了</li>
</ol>
<h4 id="注销功能"><a href="#注销功能" class="headerlink" title="注销功能"></a>注销功能</h4><ol>
<li>在授权方法中中开启注销功能<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注销功能</span></span><br><span class="line">        <span class="comment">//关闭csrf防止网站工具，get、post请求都可以注销,如果不关闭，那么就会包404错误，因为现在的注销请求是get请求</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">//注销成功后跳转到首页</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>在首页添加注销按钮(上面的首页已添加)</li>
<li>启动服务进行测试</li>
</ol>
<h4 id="控制访问"><a href="#控制访问" class="headerlink" title="控制访问"></a>控制访问</h4><p>当没有用户登录登录时，页面只显示登录按钮，当用户登录后，只显示注销按钮和用户信息，并且没登录时看不大任何要登录才能看到的模块，登录后只显示登录用户拥有权限的模块，这个功能怎么实现呢？这就需要我们结合thymeleaf的一些功能进行实现了</p>
<ol>
<li>导入thymeleaf和springSecrity的整合包(上面已经导入)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf和springSecurity的整合包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>修改前端页面</li>
</ol>
<ul>
<li>导入命名空间<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;&gt;</span><br></pre></td></tr></table></figure></li>
<li>修改登录模块<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果未登录，显示登录按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果已登录，显示注销按钮和用户名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注销--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign-out icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>修改菜单的显示<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--菜单根据用户的角色动态呈现--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--角色有vip1权限，这个菜单显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--角色有vip2权限，这个菜单显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--角色有vip3权限，这个菜单显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>启动服务进行测试 </li>
</ol>
<h4 id="记住我功能"><a href="#记住我功能" class="headerlink" title="记住我功能"></a>记住我功能</h4><ol>
<li>在授权方法中开启记住我功能<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启记住我功能,使用名字叫remember-me的cookie来保存登录信息，并且有效期为两周</span></span><br><span class="line"><span class="comment">//如果将用户信息放在List集合中，那么只有最后一个元素可以点击记住我并登录成功</span></span><br><span class="line"><span class="comment">//如果不使用list存放用户信息，那么都可以点击记住我并登录</span></span><br><span class="line"><span class="comment">//接收name=remember的数据信息</span></span><br><span class="line">http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>修改登录页面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住我</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>启动服务进行测试<br><img src="/posts/2a612659/remember.jpg"></li>
<li>原理：<br>记住我功能就是将用户保存为一个cookie，cookie的有效期为14天，这样在14天内就能够直接登陆，而不需要每次退出浏览器后重新进来有要重新登录。<h4 id="完整springSecrity配置代码"><a href="#完整springSecrity配置代码" class="headerlink" title="完整springSecrity配置代码"></a>完整springSecrity配置代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相当于aop拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// &quot;/&quot;下的即index页面允许所有人访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">//&quot;/level1/**&quot;目录下的所有资源要是vip1角色才能访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">        <span class="comment">//启动没有授权默认会跳到登录页面，即跳转到/login页面</span></span><br><span class="line">        <span class="comment">//自定义登录页面，记住页面中的表单中对应的name属性必须是username和password</span></span><br><span class="line">        <span class="comment">//如果不是，那么就要用到usernameParameter(&quot;xxx&quot;)和passwordParameter(&quot;xxx&quot;)来接收对应的数据</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注销功能</span></span><br><span class="line">        <span class="comment">//关闭csrf防止网站工具，get、post请求都可以注销,如果不关闭，那么就会包404错误，因为现在的注销请求是get请求</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启记住我功能,使用名字叫remember-me的cookie来保存登录信息，并且有效期为两周</span></span><br><span class="line">        <span class="comment">//如果将用户信息放在List集合中，那么只有最后一个元素可以点击记住我并登录成功</span></span><br><span class="line">        <span class="comment">//如果不使用list存放用户信息，那么都可以点击记住我并登录</span></span><br><span class="line">        <span class="comment">//接收name=remember的数据信息</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//认证数据一般是从数据库中获取，此处演示的是从内存中获取的方法</span></span><br><span class="line">            <span class="comment">//要调用对密码进行编码加密的方法，如果不调用，那么springboot会认为密码不安全，会报错</span></span><br><span class="line">            auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                    .withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                    <span class="comment">//可以通过and()方法来存储多个用户</span></span><br><span class="line">                    .and()</span><br><span class="line"><span class="comment">//                    //用户的角色可以有多个</span></span><br><span class="line">                    .withUser(<span class="string">&quot;tSmile&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springBoot整合mybatis</title>
    <url>/posts/d602cfc7/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文描述了使用springBoot整合mybatis的流程</p>
<span id="more"></span>
<h4 id="springBoot整合mybatis"><a href="#springBoot整合mybatis" class="headerlink" title="springBoot整合mybatis"></a>springBoot整合mybatis</h4><ul>
<li>mybatis-spring-boot-autoconfigure整合官网：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/index.html">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/index.html</a></li>
</ul>
<ol>
<li>导入整合依赖，数据库驱动等依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springBoot整合mybatis依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jdbc依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--测试包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li>
<li>配置数据库连接信息<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure></li>
<li>测试数据库是否连接成功<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot06MybatisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(<span class="string">&quot;==&gt;&quot;</span> + connection);</span><br><span class="line">        connection.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;==&gt;&quot;</span> + dataSource.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建实体类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建mapper目录及实体类对应的mapper接口UserMapper<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在resources/mybatis/mapper目录下创建对应的mapper映射文件UserMapper.xml，并编写对应的SQL语句<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tSmile.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        insert into user(id, `name`, password) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        update user set name=#&#123;name&#125;, password=#&#123;password&#125; where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在application.yaml配置扫描mapper.xml文件设置和实体类别名<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.tSmile.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure></li>
<li>解决maven配置资源过滤问题(此处可以不用写，因为没有在src/main/java目录下有静态配置资源)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写UserController<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryUsers&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUsers();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryUserById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user = userMapper.queryUserById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userMapper.addUser(<span class="keyword">new</span> User(<span class="number">9</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;654321&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addUser_ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userMapper.updateUser(<span class="keyword">new</span> User(<span class="number">9</span>, <span class="string">&quot;root001&quot;</span>, <span class="string">&quot;123321&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;updateUser_ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        userMapper.deleteUserById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;deleteUser_ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务进行测试<br><img src="/posts/d602cfc7/%E6%9F%A5%E8%AF%A2.jpg"></li>
</ol>
<p><strong>整合成功！</strong></p>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springBoot整合jdbc</title>
    <url>/posts/2915545d/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文描述了springData，springBoot和jdbc的整合，使用druid数据源将springBoot和jdbc整合，配置druid的数据监控和jdbcTemplate的使用</p>
<span id="more"></span>
<h4 id="什么是spring-Data"><a href="#什么是spring-Data" class="headerlink" title="什么是spring Data"></a>什么是spring Data</h4><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架。<br>其主要目标是使得数据库的访问变得方便快捷，并支持map-reduce框架和云计算数据服务。此外，它还支持基于关系型数据库的数据服务，如Oracle RAC等。对于拥有海量数据的项目，可以用Spring Data来简化项目的开发，就如Spring Framework对JDBC、ORM的支持一样，Spring Data会让数据的访问变得更加方便。————<br>无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。<br>spring Data的官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a><br>spring Data的官方文档：<a href="https://docs.spring.io/spring-data/commons/docs/2.6.0/reference/html/#reference">https://docs.spring.io/spring-data/commons/docs/2.6.0/reference/html/#reference</a><br>数据库相关启动器，官网文档：<a href="https://docs.spring.io/spring-boot/docs/2.5.6.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.5.6.RELEASE/reference/htmlsingle/#using-boot-starter</a>  </p>
<h4 id="整合JDBC"><a href="#整合JDBC" class="headerlink" title="整合JDBC"></a>整合JDBC</h4><ol>
<li>新建一个springBoot项目名称叫springBoot-05-data，引入web依赖，jdbc依赖和数据库驱动依赖<br><img src="/posts/2915545d/%E5%88%9B%E5%BB%BA.jpg"></li>
<li>创建项目成功，我们会发现导入了以下依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jdbc依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库驱动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写yaml数据库连接<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li>
<li>配置完这些之后，我们就可以直接使用了，因为springBoot已经默认为我们进行了自动配置，我们可以直接进行测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot05DataApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//尝试一下获取数据库连接</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        <span class="comment">//输出数据库连接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==&gt;&quot;</span> + connection);</span><br><span class="line">        <span class="comment">//查看数据源</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==&gt;&quot;</span> + dataSource.getClass());</span><br><span class="line">        <span class="comment">//关闭数据库连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
测试成功！获得了数据库连接后就可以对数据库进行操作了。在输出的内容中，我们还可以知道springBoot默认使用的是HikariDataSource数据库连接池。</li>
</ol>
<h4 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h4><p>此数据库连接池是阿里巴巴的数据库连接池<br>github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p>
<ul>
<li>druid的基本配置参数</li>
</ul>
<table>
<thead>
<tr>
<th>配置</th>
<th>缺省值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td></td>
<td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：”DataSource-“ + System.identityHashCode(this)</td>
</tr>
<tr>
<td>jdbcUrl</td>
<td></td>
<td>连接数据库的url，不同数据库不一样。例如：<br>mysql : jdbc:mysql://10.20.153.104:3306/druid2 <br>oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td>
</tr>
<tr>
<td>username</td>
<td></td>
<td>连接数据库的用户名</td>
</tr>
<tr>
<td>password</td>
<td></td>
<td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td>
</tr>
<tr>
<td>driverClassName</td>
<td>根据url自动识别</td>
<td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td>
</tr>
<tr>
<td>initialSize</td>
<td>0</td>
<td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td>
</tr>
<tr>
<td>maxActive</td>
<td>8</td>
<td>最大连接池数量</td>
</tr>
<tr>
<td>maxIdle</td>
<td>8</td>
<td>已经不再使用，配置了也没效果</td>
</tr>
<tr>
<td>minIdle</td>
<td></td>
<td>最小连接池数量</td>
</tr>
<tr>
<td>maxWait</td>
<td></td>
<td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td>
</tr>
<tr>
<td>poolPreparedStatements</td>
<td>false</td>
<td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td>
</tr>
<tr>
<td>maxOpenPreparedStatements</td>
<td>-1</td>
<td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td>
</tr>
<tr>
<td>validationQuery</td>
<td></td>
<td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td>
</tr>
<tr>
<td>testOnBorrow</td>
<td>true</td>
<td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td>
</tr>
<tr>
<td>testOnReturn</td>
<td>false</td>
<td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td>
</tr>
<tr>
<td>testWhileIdle</td>
<td>false</td>
<td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td>
</tr>
<tr>
<td>timeBetweenEvictionRunsMillis</td>
<td></td>
<td>有两个含义：<br>1) Destroy线程会检测连接的间隔时间<br>2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td>
</tr>
<tr>
<td>numTestsPerEvictionRun</td>
<td></td>
<td>不再使用，一个DruidDataSource只支持一个EvictionRun</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td></td>
<td></td>
</tr>
<tr>
<td>connectionInitSqls</td>
<td></td>
<td>物理连接初始化的时候执行的sql</td>
</tr>
<tr>
<td>exceptionSorter</td>
<td>根据dbType自动识别</td>
<td>当数据库抛出一些不可恢复的异常时，抛弃连接</td>
</tr>
<tr>
<td>filters</td>
<td></td>
<td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有:监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td>
</tr>
<tr>
<td>proxyFilters</td>
<td></td>
<td>类型是<br>List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td>
</tr>
</tbody></table>
<h5 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h5><ul>
<li>引入druid数据源依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果导入druid依赖后出现错误：Cannot resolve com.sun:tools:1.8，那么就需要导入下面两个j依赖，如果没有出现错误的话，下面两个依赖可以不用导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>C:/Program Files (x86)/Java/jdk1.8.0_301/lib/tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 也可以 把这两个jar复制到 配置的Path路径下</span></span><br><span class="line"><span class="comment">    &lt;systemPath&gt;$&#123;java.home&#125;/lib/tools.jar&lt;/systemPath&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jconsole<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此地址为自己安装的jdk目录下的jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>C:/Program Files (x86)/Java/jdk1.8.0_301/lib/jconsole.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>切换数据源；Spring Boot 默认使用 com.zaxxer.hikari.HikariDataSource 数据源，可以通过 spring.datasource.type 指定数据源<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li>
<li>也可以对druid数据源进行其他配置<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">prm6577608</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure></li>
<li>因为上面的配置中使用到了log4j，所以导入log4j的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建DruidConfig配置文件将DruidDataSource组件放到容器中，并绑定属性；不再使用springBoot默认生成的属性配置文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*不再使用springBoot自动创建的数据源，使用自己配置的数据源，并绑定配置文件，将</span></span><br><span class="line"><span class="comment">    * 配置文件中设置的参数注入到自己配置的数据源中，即</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span></span><br><span class="line"><span class="comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span></span><br><span class="line"><span class="comment">       @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)：作用就是将 全局配置文件中</span></span><br><span class="line"><span class="comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDatasource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot05DataApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//尝试一下获取数据库连接</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        <span class="comment">//输出数据库连接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==&gt;&quot;</span> + connection);</span><br><span class="line">        <span class="comment">//查看数据源</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==&gt;&quot;</span> + dataSource.getClass());</span><br><span class="line">        DruidDataSource druidDataSource = (DruidDataSource) dataSource;</span><br><span class="line">        <span class="comment">//查看数据源的最大连接数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==&gt;&quot;</span> + druidDataSource.getMaxActive());</span><br><span class="line">        <span class="comment">//查看数据源的初始化连接数量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==&gt;&quot;</span> + druidDataSource.getInitialSize());</span><br><span class="line">        <span class="comment">//关闭数据库连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置druid数据源监控"><a href="#配置druid数据源监控" class="headerlink" title="配置druid数据源监控"></a>配置druid数据源监控</h4>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看</li>
</ul>
<ol>
<li>设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*配置druid数据源监控</span></span><br><span class="line"><span class="comment">* 配置 Druid 监控管理后台的Servlet；</span></span><br><span class="line"><span class="comment">* 内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个servlet，并配置访问/druid/*下的所有东西都要经过这个servlet，即都要登录，查看主机是否可以访问，</span></span><br><span class="line">    <span class="comment">// 查看主机是否被拒绝访问</span></span><br><span class="line">    ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">    <span class="comment">//设置初始化参数时要传入一个map集合，这里创建一个map集合，并且map集合的key和value的泛型都要是String类型</span></span><br><span class="line">    Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    map集合中的可以一般是固定的这些参数可以在 com.alibaba.druid.support.http.StatViewServlet</span></span><br><span class="line"><span class="comment">    的父类 com.alibaba.druid.support.http.ResourceServlet 中找到.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*允许谁可以访问，如果value是localhost，那么只有主机可以访问，如果value为空串或者null，</span></span><br><span class="line"><span class="comment">    那么就是所有人都可以方位*/</span></span><br><span class="line">    initParameters.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置登录后台的用户名和密码</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * initParams.put(&quot;allow&quot;, &quot;localhost&quot;)：表示只有本机可以访问</span></span><br><span class="line"><span class="comment">    * initParams.put(&quot;allow&quot;, &quot;&quot;)：为空或者为null时，表示允许所有访问</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    initParameters.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    initParameters.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deny：Druid 后台拒绝谁访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;tSmile&quot;, &quot;192.168.1.20&quot;);表示禁止此ip访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始化参数</span></span><br><span class="line">    bean.setInitParameters(initParameters);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在DruidConfig配置Druid web监控filter过滤器，并将过滤器放到容器中(按需求来看是否配置配置)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//filter过滤器的配置</span></span><br><span class="line">    <span class="comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">WebStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置过滤器为WebStatFilter</span></span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        <span class="comment">//创建一个map集合</span></span><br><span class="line">        Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.css,/druid/*,/jdbc/*&quot;</span>);</span><br><span class="line">        <span class="comment">//设置初始化参数</span></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="comment">//过滤所有请求</span></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>配置完毕后，启动服务，访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a> 就可以进入到监控页面了<br><img src="/posts/2915545d/%E7%9B%91%E6%8E%A7%E7%99%BB%E5%BD%95.jpg"><br><img src="/posts/2915545d/%E7%9B%91%E6%8E%A7%E9%A1%B5%E9%9D%A2.jpg"></li>
</ol>
<h4 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h4><ol>
<li>设么是jdbcTemplate？<br>有了数据库连接池获取到连接后，就可以通过连接来对数据库进行操作，而jdbcTemplate就是Spring本身也对原生的JDBC做的轻量级封装的操作数据库的模板，JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类。</li>
<li>JdbcTemplate主要提供的几类方法：  </li>
</ol>
<ul>
<li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li>
<li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除语句；batchUpdate方法用于执行批处理相关语句；</li>
<li>query方法及queryForXXX方法：用于执行查询相关语句；</li>
<li>call方法：用于执行存储过程、函数相关语句  </li>
</ul>
<p>3、 编写一个jdbcController对jdbcTemplate进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdbcController</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/userList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; userList()&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; userList = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into user(id, `name`, password) values (?, ?, ?)&quot;</span>;</span><br><span class="line">        Object[] objects = <span class="keyword">new</span> Object[<span class="number">3</span>];</span><br><span class="line">        objects[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">        objects[<span class="number">1</span>] = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        objects[<span class="number">2</span>] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, objects);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addUser_ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update user set name=?,password=? where id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="string">&quot;root01&quot;</span>, <span class="string">&quot;654321&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update_ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from user where id=&quot;</span> + id;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;deleteUser_ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、 启动服务，打开druid监控页面进行监控，然后访问对应写的controller </p>
<ul>
<li>访问userList<br><img src="/posts/2915545d/userList.jpg"></li>
<li>查看监控页面<br><img src="/posts/2915545d/sql%E7%9B%91%E6%8E%A7.jpg"></li>
</ul>
<p>注：启动服务时会出现log4j的警告<br><img src="/posts/2915545d/%E8%AD%A6%E5%91%8A.jpg"><br>这个警告是因为没有创建log4j的properties配置文件进行配置，由于这里用不到，所以没有配置，这个警告此处可以忽略。</p>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>页面国际化和拦截器以及错误页面</title>
    <url>/posts/4395d0c3/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文描述了关于页面国际化的原理和流程，并且简单描述了拦截器的扩展和错误页面的编写</p>
<span id="more"></span>
<h4 id="页面国际化的准备"><a href="#页面国际化的准备" class="headerlink" title="页面国际化的准备"></a>页面国际化的准备</h4><ol>
<li>什么是页面国际化<br>简单来说，页面国际化就是针对不同地区和不同人群来对页面的语言进行处理，符合人们的语言，如点击某个按钮页面就会办成中文版本或者英文版本。</li>
<li>页面国际化的实现</li>
</ol>
<ul>
<li>准备<br>先在idea中设置properties的编码问题，同一改成utf-8<br><img src="/posts/4395d0c3/%E7%BC%96%E7%A0%81.jpg"></li>
<li>编写一个登录页面放在templates目录下 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/login&#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!--如果登录不成功，回显信息--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span>[[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>[[#&#123;login.login&#125;]]<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(language=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(language=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置文件的编写  <ul>
<li>在resources目录下创建一个i18n目录，用来存放国际化配置文件</li>
<li>在i18n目录下创建一个login.properties文件，然后再创建一个login_zh_CN.properties文件，idea会自动识别我们要进行国际化操作，会自动创建一个Resource Bundle ‘login’ 目录。此时再多创建一个properties文件就使用另一种方法<br><img src="/posts/4395d0c3/properties01.jpg"><br><img src="/posts/4395d0c3/properties02.jpg"></li>
<li>编写配置文件<br>对默认的login.properties文件进行编写,默认中文<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">login.password</span>=<span class="string">密码</span></span><br><span class="line"><span class="meta">login.tip</span>=<span class="string">请登录</span></span><br><span class="line"><span class="meta">login.username</span>=<span class="string">用户名</span></span><br><span class="line"><span class="meta">login.remember</span>=<span class="string">记住我</span></span><br><span class="line"><span class="meta">login.login</span>=<span class="string">登录</span></span><br></pre></td></tr></table></figure>
对中文的properties文件进行编写<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">login.password</span>=<span class="string">密码</span></span><br><span class="line"><span class="meta">login.tip</span>=<span class="string">请登录</span></span><br><span class="line"><span class="meta">login.username</span>=<span class="string">用户名</span></span><br><span class="line"><span class="meta">login.remember</span>=<span class="string">记住我</span></span><br><span class="line"><span class="meta">login.login</span>=<span class="string">登录</span></span><br></pre></td></tr></table></figure>
对英文的properties文件进行编写<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">login.password</span>=<span class="string">username</span></span><br><span class="line"><span class="meta">login.tip</span>=<span class="string">Please sign in</span></span><br><span class="line"><span class="meta">login.username</span>=<span class="string">password</span></span><br><span class="line"><span class="meta">login.remember</span>=<span class="string">remember me</span></span><br><span class="line"><span class="meta">login.login</span>=<span class="string">login</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="配置默认国际化语言"><a href="#配置默认国际化语言" class="headerlink" title="配置默认国际化语言"></a>配置默认国际化语言</h4><ol>
<li>配置默认国际化语言<br>在springBoot的application配置文件中进行配置<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#i18n国际化,通过basename获取到配置文件的路径，并进行绑定</span></span><br><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n.login</span></span><br></pre></td></tr></table></figure></li>
<li>配置页面国际化<br>对登录页面的值进行修改，是登录页面的值变为国际化值(上面的页面的值已完成修改)<br><img src="/posts/4395d0c3/login.jpg"></li>
<li>启动服务，访问页面，发现已经将语言更改成了默认的语言</li>
<li>配置默认国际化语言的探究<br>为什么配置之后就能够进行国际化语言的设置了呢？因为springBoot对国际化进行了自动配置，我们可以看一下MessageSourceAutoConfiguration这个类，在这个类中看一下messageSource这个方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取 properties 参数传递过来的值进行判断</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">		ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    <span class="comment">//设置国际化文件的基础名</span></span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">			messageSource.setBasenames(StringUtils</span><br><span class="line">					.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">		&#125;</span><br><span class="line">		messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">		Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">		<span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">			messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">		&#125;</span><br><span class="line">		messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">		messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">		<span class="keyword">return</span> messageSource;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li>MessageSourceAutoConfiguration类的探究图<br><img src="/posts/4395d0c3/%E5%9B%BE1.jpg"></li>
</ol>
<h4 id="按钮实现国际化语言的转换"><a href="#按钮实现国际化语言的转换" class="headerlink" title="按钮实现国际化语言的转换"></a>按钮实现国际化语言的转换</h4><ol>
<li>国际化语言转换探究<br>在WebMvcAutoConfiguration类中有LocaleResolver(获取区域信息对象)的解析器方法，这个方法就是用来实现语言的转换的，我们看一下这个方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.LOCALE_RESOLVER_BEAN_NAME)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//判断如果获取到的国际化信息和springBoot的默认配合信息一样，那么springBoot就会使用springBoot的默认国际化进行配置，如果不一样，那么就使用用户的配置</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.webProperties.getLocaleResolver() == WebProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.webProperties.getLocale());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过localeResolversetDefaultLocale(locale);方法对用户的配置进行设置</span></span><br><span class="line">  AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">  Locale locale = (<span class="keyword">this</span>.webProperties.getLocale() != <span class="keyword">null</span>) ? <span class="keyword">this</span>.webProperties.getLocale()</span><br><span class="line">      : <span class="keyword">this</span>.mvcProperties.getLocale();</span><br><span class="line">  localeResolver.setDefaultLocale(locale);</span><br><span class="line">  <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
那么localeResolversetDefaultLocale(locale);这个方法怎么通过用户的配置进行国际化设置的呢？我们点进去这个方法，发现这个方法是将locale赋值给了defaultLocale<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultLocale</span><span class="params">(<span class="meta">@Nullable</span> Locale defaultLocale)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
往下找，发现resolveLocale这个类返回了defaultLocale属性，那么我们来研究一下这个方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">		Locale defaultLocale = getDefaultLocale();</span><br><span class="line">    <span class="comment">//如果请求头中的语言信息为空，那么就返回springBoot默认区域信息对象</span></span><br><span class="line">		<span class="keyword">if</span> (defaultLocale != <span class="keyword">null</span> &amp;&amp; request.getHeader(<span class="string">&quot;Accept-Language&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> defaultLocale;</span><br><span class="line">		&#125;</span><br><span class="line">		Locale requestLocale = request.getLocale();</span><br><span class="line">		List&lt;Locale&gt; supportedLocales = getSupportedLocales();</span><br><span class="line">    <span class="comment">//如果请求头中的区域信息对象在支持的区域信息对象集合中，那么就返回请求头的区域信息对象</span></span><br><span class="line">		<span class="keyword">if</span> (supportedLocales.isEmpty() || supportedLocales.contains(requestLocale)) &#123;</span><br><span class="line">			<span class="keyword">return</span> requestLocale;</span><br><span class="line">		&#125;</span><br><span class="line">    <span class="comment">//如果找到和请求中对应的区域信息对象，那么就返回对应的区域信息对象</span></span><br><span class="line">		Locale supportedLocale = findSupportedLocale(request, supportedLocales);</span><br><span class="line">		<span class="keyword">if</span> (supportedLocale != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> supportedLocale;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (defaultLocale != <span class="keyword">null</span> ? defaultLocale : requestLocale);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
findSupportedLocale这个方法时如何找对应的区域语言的呢？我们进去这个方法看一下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Locale <span class="title">findSupportedLocale</span><span class="params">(HttpServletRequest request, List&lt;Locale&gt; supportedLocales)</span> </span>&#123;</span><br><span class="line">		Enumeration&lt;Locale&gt; requestLocales = request.getLocales();</span><br><span class="line">		Locale languageMatch = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span> (requestLocales.hasMoreElements()) &#123;</span><br><span class="line">			Locale locale = requestLocales.nextElement();</span><br><span class="line">			<span class="keyword">if</span> (supportedLocales.contains(locale)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (languageMatch == <span class="keyword">null</span> || languageMatch.getLanguage().equals(locale.getLanguage())) &#123;</span><br><span class="line">          <span class="comment">//从这个注释中可以看到是通过语言+国家来找到对应的区域信息对象的</span></span><br><span class="line">					<span class="comment">// Full match: language + country, possibly narrowed from earlier language-only match</span></span><br><span class="line">					<span class="keyword">return</span> locale;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (languageMatch == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// Let&#x27;s try to find a language-only match as a fallback</span></span><br><span class="line">				<span class="keyword">for</span> (Locale candidate : supportedLocales) &#123;</span><br><span class="line">					<span class="keyword">if</span> (!StringUtils.hasLength(candidate.getCountry()) &amp;&amp;</span><br><span class="line">							candidate.getLanguage().equals(locale.getLanguage())) &#123;</span><br><span class="line">						languageMatch = candidate;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> languageMatch;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
那么我们也可以用请求携带参数，然后根据参数判断，通过语言+国家创建一个locale，并将这个locale放到容器中，因为springBoot中如果用户自己配置了国际化就会使用用户的配置，那么我们我们的配置就会生效了<br>下面我们就来实现一下  </li>
<li>修改页面，通过按钮来实现国际化语言的转换<br><img src="/posts/4395d0c3/login02.jpg"></li>
<li>自定义国际化类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现了接口LocaleResolver的类，就是一个国际化的配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String language = request.getParameter(<span class="string">&quot;language&quot;</span>);</span><br><span class="line">        <span class="comment">//如果携带的参数不是空的</span></span><br><span class="line">        <span class="keyword">if</span> (language != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//那么将参数分解成国家和地区，通过国家和地区来使用自己传过来的语言</span></span><br><span class="line">            String[] splits = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            <span class="comment">//将国家和地区传进去，来创建一个语言</span></span><br><span class="line">            Locale locale = <span class="keyword">new</span> Locale(splits[<span class="number">0</span>], splits[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> locale;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Locale defaultLocale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">return</span> defaultLocale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>将自定义的国际化放到容器中，因为国际化是在mvc中实现的，所以我们要将在springMvc中将它放到容器中，也就是对springBoot的mvc进行扩展<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//扩展视图跳转功能</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//将页面国际化添加到自动配置容器中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务，访问页面，点击按钮进行测试</li>
</ol>
<h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>在MyMvcConfig类中重写addInterceptors添加拦截器方法，就能实现简单的拦截功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将拦截器添加到自动配置容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拦截所有经过/user/地址的请求</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                <span class="comment">//排除访问/user/login地址的请求</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h4><p>只要在templates目录下创建一个error目录，在这个目录下创建对应的错误页面即可，在这里创建的错误页面能够被springBoot自动识别到，如果出现对应的错误时，springBoot会到error目录下找对应的错误页面，并显示出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">发生了404错误</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>500<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">发生了500错误</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>目录如下：<br><img src="/posts/4395d0c3/%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2.jpg"></li>
<li>启动服务进行测试</li>
</ul>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC的原理及扩展</title>
    <url>/posts/1fc8079c/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文描述了视图解析器自动装配的原理，视图解析器如何扩展以及修改springBoot的默认配置生效的原理</p>
<span id="more"></span>
<h4 id="官方文档解释"><a href="#官方文档解释" class="headerlink" title="官方文档解释"></a>官方文档解释</h4><ul>
<li>想要了解spring MVC的原理,可以通过官方文档进行学习，了解其原理<br>官网地址：<a href="https://docs.spring.io/spring-boot/docs/2.5.6/reference/htmlsingle/#features.developing-web-applications.spring-mvc.auto-configuration">https://docs.spring.io/spring-boot/docs/2.5.6/reference/htmlsingle/#features.developing-web-applications.spring-mvc.auto-configuration</a>  </li>
<li>当引入thymeleaf模板引擎后，就自动配置了视图解析器，添加了前缀：classpath:/templates/和后缀：.html 。这样 访问方法的映射路径时，就不用添加文件的路径和后缀名，但是如果访问的文件不在 tmplates文件夹下或者是你想要访问的文件后缀不是html，那要怎么重新修改mvc的配置呢？我们看一下官方文档看mvc扩展/修改的说明：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spring Boot 为 Spring MVC 提供了自动配置，适用于大多数应用程序。</span><br><span class="line"></span><br><span class="line">自动配置在 Spring 的默认值之上添加了以下功能：</span><br><span class="line"></span><br><span class="line">包括ContentNegotiatingViewResolver和BeanNameViewResolver对象。</span><br><span class="line"></span><br><span class="line">支持提供静态资源，包括对 WebJars 的支持（本文档稍后介绍）。</span><br><span class="line"></span><br><span class="line">自动注册Converter，GenericConverter和Formatter对象类。</span><br><span class="line"></span><br><span class="line">支持HttpMessageConverters（在本文档后面介绍）。</span><br><span class="line"></span><br><span class="line">的自动注册MessageCodesResolver（在本文档后面介绍）。</span><br><span class="line"></span><br><span class="line">静态index.html支持。</span><br><span class="line"></span><br><span class="line">ConfigurableWebBindingInitializerbean 的自动使用（本文档稍后介绍）。</span><br><span class="line"></span><br><span class="line">如果您想保留那些 Spring Boot MVC 自定义并进行更多MVC 自定义（拦截器、格式化程序、视图控制器和其他功能），您可以添加自己@Configuration的类型类，WebMvcConfigurer但不添加 @EnableWebMvc.</span><br><span class="line"></span><br><span class="line">如果你想提供的定制情况RequestMappingHandlerMapping，RequestMappingHandlerAdapter或者ExceptionHandlerExceptionResolver，仍然保持弹簧引导MVC自定义，你可以声明类型的对象WebMvcRegistrations，并用它来提供这些组件的定制实例。</span><br><span class="line"></span><br><span class="line">如果你想利用Spring MVC中的完全控制，你可以添加自己的@Configuration注解为@EnableWebMvc，或者添加自己的@Configuration-annotatedDelegatingWebMvcConfiguration中的Javadoc中所述@EnableWebMvc。</span><br></pre></td></tr></table></figure>
可以发现官网告诉我们springBoot已经自动装配好了视图解析器，并且告诉我们想要修改或者扩展 mvc配置 需要给自定义的mvc类添加 @Configuration注解 和 实现 WebMvcConfigurer接口。那么springBoot是怎么样对视图解析器进行自动装配的呢？我们又该如何扩展视图解析器呢？</li>
</ul>
<h4 id="自动装配视图解析器的原理解析"><a href="#自动装配视图解析器的原理解析" class="headerlink" title="自动装配视图解析器的原理解析"></a>自动装配视图解析器的原理解析</h4><ul>
<li>springboot的自动装配的视图解析器是通ContentNegotiatingViewResolver类来实现的，我们进去这个类看一下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentNegotiatingViewResolver</span> <span class="keyword">extends</span> <span class="title">WebApplicationObjectSupport</span></span></span><br><span class="line"><span class="class">    //可以发现这个类实现了<span class="title">ViewResolver</span>接口，实现了<span class="title">ViewResolver</span>接口的类就是一个视图解析器</span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">ViewResolver</span>, <span class="title">Ordered</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...... </span></span><br><span class="line">    <span class="comment">//我们看一下实现了ViewResolver接口重写的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		RequestAttributes attrs = RequestContextHolder.getRequestAttributes();</span><br><span class="line">		Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">&quot;No current ServletRequestAttributes&quot;</span>);</span><br><span class="line">		List&lt;MediaType&gt; requestedMediaTypes = getMediaTypes(((ServletRequestAttributes) attrs).getRequest());</span><br><span class="line">		<span class="keyword">if</span> (requestedMediaTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取候选的视图</span></span><br><span class="line">			List&lt;View&gt; candidateViews = getCandidateViews(viewName, locale, requestedMediaTypes);</span><br><span class="line">            <span class="comment">//选择一个最适合的视图对象，然后把这个对象返回</span></span><br><span class="line">			View bestView = getBestView(candidateViews, requestedMediaTypes, attrs);</span><br><span class="line">			<span class="keyword">if</span> (bestView != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> bestView;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		String mediaTypeInfo = logger.isDebugEnabled() &amp;&amp; requestedMediaTypes != <span class="keyword">null</span> ?</span><br><span class="line">				<span class="string">&quot; given &quot;</span> + requestedMediaTypes.toString() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.useNotAcceptableStatusCode) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">&quot;Using 406 NOT_ACCEPTABLE&quot;</span> + mediaTypeInfo);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> NOT_ACCEPTABLE_VIEW;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			logger.debug(<span class="string">&quot;View remains unresolved&quot;</span> + mediaTypeInfo);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//...... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>我们进去getCandidateViews获取候选视图方法看一下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;View&gt; <span class="title">getCandidateViews</span><span class="params">(String viewName, Locale locale, List&lt;MediaType&gt; requestedMediaTypes)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		List&lt;View&gt; candidateViews = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Assert.state(<span class="keyword">this</span>.contentNegotiationManager != <span class="keyword">null</span>, <span class="string">&quot;No ContentNegotiationManager set&quot;</span>);</span><br><span class="line">            <span class="comment">//循环遍历所有视图，并将视图添加到候选视图中</span></span><br><span class="line">			<span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</span><br><span class="line">				View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">				<span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">					candidateViews.add(view);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (MediaType requestedMediaType : requestedMediaTypes) &#123;</span><br><span class="line">					List&lt;String&gt; extensions = <span class="keyword">this</span>.contentNegotiationManager.resolveFileExtensions(requestedMediaType);</span><br><span class="line">                    <span class="comment">//循环遍历所有扩展视图，并将扩展视图也加到候选视图中</span></span><br><span class="line">					<span class="keyword">for</span> (String extension : extensions) &#123;</span><br><span class="line">						String viewNameWithExtension = viewName + <span class="string">&#x27;.&#x27;</span> + extension;</span><br><span class="line">						view = viewResolver.resolveViewName(viewNameWithExtension, locale);</span><br><span class="line">						<span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">							candidateViews.add(view);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="keyword">this</span>.defaultViews)) &#123;</span><br><span class="line">            <span class="comment">//将所有默认视图也加到候选视图中</span></span><br><span class="line">			candidateViews.addAll(<span class="keyword">this</span>.defaultViews);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> candidateViews;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
可以得出一个结论：ContentNegotiatingViewResolver 这个视图解析器是将所有视图解析器都组合到一起的一个视图解析器</li>
<li>那么它是怎么将所有视图解析器组合到一起的呢？我们可以看一下initServletContext方法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServletContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用BeanFactoryUtils工具类从容器中获取所有的视图解析器</span></span><br><span class="line">		Collection&lt;ViewResolver&gt; matchingBeans =</span><br><span class="line">				BeanFactoryUtils.beansOfTypeIncludingAncestors(obtainApplicationContext(), ViewResolver.class).values();</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.viewResolvers = <span class="keyword">new</span> ArrayList&lt;&gt;(matchingBeans.size());</span><br><span class="line">            <span class="comment">//将获取的所有视图解析器放到viewResolvers集合中</span></span><br><span class="line">			<span class="keyword">for</span> (ViewResolver viewResolver : matchingBeans) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span> != viewResolver) &#123;</span><br><span class="line">					<span class="keyword">this</span>.viewResolvers.add(viewResolver);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.viewResolvers.size(); i++) &#123;</span><br><span class="line">				ViewResolver vr = <span class="keyword">this</span>.viewResolvers.get(i);</span><br><span class="line">				<span class="keyword">if</span> (matchingBeans.contains(vr)) &#123;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				String name = vr.getClass().getName() + i;</span><br><span class="line">				obtainApplicationContext().getAutowireCapableBeanFactory().initializeBean(vr, name);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//对集合中的所有视图进行优先级排序</span></span><br><span class="line">		AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.viewResolvers);</span><br><span class="line">		<span class="keyword">this</span>.cnmFactoryBean.setServletContext(servletContext);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
既然是从容器中获取所有的额视图解析器的，那么我们是不是也可以自定义一个视图解析器，然后将它放到容器中就可以被获取到了呢？</li>
</ul>
<h4 id="视图解析器的扩展"><a href="#视图解析器的扩展" class="headerlink" title="视图解析器的扩展"></a>视图解析器的扩展</h4><p>根据官网的建议，我们可以在一个实现了WebMvcConfigurer的类中对视图解析器进行扩展，并且根据提示<code>如果您想保留那些 Spring Boot MVC 自定义并进行更多MVC 自定义（拦截器、格式化程序、视图控制器和其他功能），您可以添加自己@Configuration的类型类，WebMvcConfigurer但不添加 @EnableWebMvc.</code>我们可以按照提示来对我们的视图解析器进行扩展：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扩展springMVC，用注解@Configuration标注的类，就是自动配置类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现视图跳转方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加一个路径为 项目名/tSmile 的controller，并跳转到test视图</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/tSmile&quot;</span>).setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果你想自定义一些功能，你只要写这个组件（如实现了ViewResolver的类就是视图解析器组件了），</span></span><br><span class="line">    <span class="comment">// 然后注册bean，交给springBoot管理，这样就能实现自动装配了</span></span><br><span class="line">    <span class="comment">//将视图解析器交给spring管理</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个内部类，即创建一个视图解析器</span></span><br><span class="line">    <span class="comment">//实现了ViewResolver接口的类就是视图解析器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//可以参考ContentNegotiatingViewResolver类中重写的resolveViewName方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>因为所有的的请求都会走DispatcherServlet 中的 doDispatch方法，所以我们可以在doDispatch方法中添加断点，debug启动项目进行查看：<br><img src="/posts/1fc8079c/doDispach.jpg"><br>debug启动后我们先访问test页面，然后找到debug下的this下的viewResolvers：<br><img src="/posts/1fc8079c/view.jpg"><br>果然，我们写的扩展视图解析器生效了！所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot就会帮我们做了！</p>
</li>
<li><p>springBoot MVC原理流程图<br><img src="/posts/1fc8079c/%E5%8E%9F%E7%90%86%E6%B5%81%E7%A8%8B.jpg"></p>
</li>
</ul>
<h4 id="修改springBoot的默认配置原理"><a href="#修改springBoot的默认配置原理" class="headerlink" title="修改springBoot的默认配置原理"></a>修改springBoot的默认配置原理</h4><p>修改springBoot默认配置包含了对springBoot的视图解析器的扩展，那么修改springBoot的默认配置的原理是什么呢？</p>
<ul>
<li>根据官网<code>如果你想提供的定制情况RequestMappingHandlerMapping，RequestMappingHandlerAdapter或者ExceptionHandlerExceptionResolver，仍然保持弹簧引导MVC自定义，你可以声明类型的对象WebMvcRegistrations，并用它来提供这些组件的定制实例。</code>的建议进行修改<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现视图跳转方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加一个路径为 项目名/tSmile 的controller，并跳转到test视图</span></span><br><span class="line">        <span class="comment">// 浏览器发送/tSmile请求就会跳转到test页面</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/tSmile&quot;</span>).setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果你想自定义一些功能，你只要写这个组件（如实现了ViewResolver的类就是视图解析器组件了），</span></span><br><span class="line">    <span class="comment">// 然后注册bean，交给springBoot管理，这样就能实现自动装配了</span></span><br><span class="line">    <span class="comment">//将视图解析器交给spring管理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//jsp视图解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个内部类，即创建一个视图解析器</span></span><br><span class="line">    <span class="comment">//实现了ViewResolver接口的类就是视图解析器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//可以参考ContentNegotiatingViewResolver类中重写的resolveViewName方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试，启动服务后访问 <a href="http://localhost:8080/tSmile">http://localhost:8080/tSmile</a> 地址<br><img src="/posts/1fc8079c/test.jpg"><br>发现我们修改springBoot的默认配置的类MyMvcConfig是生效的，为什么会生效呢？我们分析一下原理</li>
<li>WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)<br><img src="/posts/1fc8079c/%E6%89%A9%E5%B1%95%E5%8E%9F%E7%90%8601.jpg"><br>我们点进EnableWebMvcConfiguration这个类看一下，发现它继承了一个父类：DelegatingWebMvcConfiguration<br><img src="/posts/1fc8079c/%E6%89%A9%E5%B1%95%E5%8E%9F%E7%90%8602.jpg"><br>我们再点进去这个父类看一下<br><img src="/posts/1fc8079c/%E6%89%A9%E5%B1%95%E5%8E%9F%E7%90%8603.jpg"><br>发现父类找那个有一个set方法获取了所有的webmvcConfigurer，我们再根据刚才我们写的MyMvcConfig中重写了addViewControllers方法，再这个类中也找一下这个方法<br><img src="/posts/1fc8079c/%E6%89%A9%E5%B1%95%E5%8E%9F%E7%90%8604.jpg"><br>发现这个方法有调用了一个addViewControllers方法，我们点进去这个方法看一下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (WebMvcConfigurer delegate : <span class="keyword">this</span>.delegates) &#123;</span><br><span class="line">		delegate.addViewControllers(registry);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
发现addViewControllers方法将delegates中的所有元素都进行注册，那么delegates中的元素是什么呢？我们在这个类中找一下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;WebMvcConfigurer&gt; delegates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWebMvcConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">			<span class="keyword">this</span>.delegates.addAll(configurers);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
发现delegates是一个存储WebMvcConfigurer的集合，并且这个集合将容器中所有的WebMvcConfigurer都放进去了，包括我们配置的WebMvcConfigurer。</li>
<li>结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</li>
</ul>
]]></content>
      <categories>
        <category>springMVC</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>web静态资源和thymeleaf模板</title>
    <url>/posts/21168332/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><h4 id="web静态资源处理"><a href="#web静态资源处理" class="headerlink" title="web静态资源处理"></a>web静态资源处理</h4><p>在springBoot中对静态资源的放置是有规定的，SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；我们先进去这个类中，看一下addResourceHandlers添加资源处理器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        <span class="comment">//如果禁用默认资源处理，那么直接结束</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；</span></span><br><span class="line">    addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    <span class="comment">//静态资源处理</span></span><br><span class="line">    addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">        registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletContextResource resource = <span class="keyword">new</span> ServletContextResource(<span class="keyword">this</span>.servletContext, SERVLET_LOCATION);</span><br><span class="line">            registration.addResourceLocations(resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>webjars静态资源映射</li>
</ol>
<ul>
<li>什么是webjars？<br>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。<br>如果要使用webjars静态资源，可以到webjars官网搜索相应的资源。<br>webjars官网地址：<a href="https://www.webjars.org/">https://www.webjars.org</a>   </li>
<li>如我们要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>springBoot会自动到jQuery的jar包下的/META-INF/resources/webjars/去找对应的静态资源。  </li>
</ul>
<p><img src="/posts/21168332/jquery.jpg"></p>
<ul>
<li>如我们访问地址<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js%EF%BC%8C%E9%82%A3%E4%B9%88springBoot%E5%B0%B1%E4%BC%9A%E5%88%B0/META-INF/resources/webjars/%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%8E%BB%E6%89%BE%E5%AF%B9%E5%BA%94%E9%A2%9D%E8%B5%84%E6%BA%90%E3%80%82">http://localhost:8080/webjars/jquery/3.5.1/jquery.js，那么springBoot就会到/META-INF/resources/webjars/目录下去找对应额资源。</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>自定义starter</title>
    <url>/posts/e1ef3d2c/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文描述了如何自定义一个starter启动器，并且描述了如何使用自定义的启动器</p>
<span id="more"></span>
<h4 id="自定义启动器starter的流程"><a href="#自定义启动器starter的流程" class="headerlink" title="自定义启动器starter的流程"></a>自定义启动器starter的流程</h4><ol>
<li>创建一个空项目  </li>
</ol>
<p><img src="/posts/e1ef3d2c/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE01.jpg"></p>
<p><img src="/posts/e1ef3d2c/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE02.jpg"><br>2. 创建一个springBoot的maven模块，名称叫smile-spring-boot-starter-autoconfigure，不要添加任何依赖<br>3. 导入pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>编写xxxProperties类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;smile.hello&quot;,ignoreInvalidFields = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建业务实现类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//业务实现方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix() + <span class="string">&quot; &quot;</span> + name +<span class="string">&quot; &quot;</span> + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建自动配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将HelloService注入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个HelloService</span></span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        <span class="comment">//将helloProperties配置文件注入到HelloService的属性中，</span></span><br><span class="line">        <span class="comment">//因为HelloService可能会用到properties中的属性</span></span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在resources目录下创建META-INF目录，在META-INF目录下创建spring.factories文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.tSmile.auto.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure></li>
<li>将启动器打包安装到maven本地仓库中<br><img src="/posts/e1ef3d2c/%E6%89%93%E5%8C%85%E5%AE%89%E8%A3%85.jpg"></li>
</ol>
<p>自定义starter启动器完成！！！</p>
<h4 id="使用自定义的启动器"><a href="#使用自定义的启动器" class="headerlink" title="使用自定义的启动器"></a>使用自定义的启动器</h4><p>自定义启动器和平时使用启动器的方法一样，都是将依赖导入到pom文件中，然后进行使用</p>
<ol>
<li>新创建一个springBoot项目</li>
<li>导入自定义启动器到pom文件中<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>smile-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写controller<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello(<span class="string">&quot;tSmile&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在application.properties中配置属性<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">smile.hello.prefix</span>=<span class="string">hello</span></span><br><span class="line"><span class="meta">smile.hello.suffix</span>=<span class="string">diy_starter</span></span><br></pre></td></tr></table></figure>
注：可能会没有提示，但是不影响使用</li>
<li>启动项目进行测试<br><img src="/posts/e1ef3d2c/%E6%B5%8B%E8%AF%95.jpg"></li>
</ol>
<p>测试成功！！！</p>
]]></content>
  </entry>
  <entry>
    <title>自动配置原理探析</title>
    <url>/posts/13628cd3/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>为什么在配置文件application.properties或者application.yaml中进行配置就能够生效呢？配置文件中能写什么呢？又该怎么写呢？下面就来解决这些问题</p>
<span id="more"></span>
<h4 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h4><p>为什么在配置文件中的配置能够生效呢？因为在配置文件中的配置能够实现自动配置。那什么是自动配置？我们一HttpEncodingAutoConfiguration（Http编码自动配置）为例进行探析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个注解表明这个类是一个配置类，和普通的配置类没有区别，可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">//启动指定类的属性配置功能，进入这个ServerProperties类中查看，会发现 properties文件中就是能够配置的属性，这些属性就是在配置文件中能够配置的东西，并且是通过prefix = &quot;server&quot;中的前缀server进行配置的</span></span><br><span class="line"><span class="comment">//并且这个配置类绑定了这个Properties文件，并把properties文件放到了ioc容器中 </span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class="line"><span class="comment">//根据不同的判断条件，判断这个类是否生效</span></span><br><span class="line"><span class="comment">//此处为判断当前应用是否为web应用，如果是，那么这个类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class="line"><span class="comment">//判断当前应用是否有解决springMVC乱码问题过滤器CharacterEncodingFilter这个类，如果有这个类就生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置：erver.servlet.encoding；</span></span><br><span class="line">  <span class="comment">//如果不存在，判断也是成立的</span></span><br><span class="line">  <span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义properties属性，此处绑定的properties文件已经和springBoot的配置文件进行映射了</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    <span class="comment">//只有一个构造方法的情况下，默认参数会从容器中拿</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(ServerProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties.getServlet().getEncoding();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给容器添加组件，组件中的某些值会中properties中获取</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//判断容器中有没有这个组件，如果没有才会往容器中添加这个组件</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Encoding.Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Encoding.Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进入ServerProperties.class中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义从配置文件中获取指定属性的前缀，并和对应的配置类进行绑定(此处指的是上面的配置类)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Server HTTP port.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">     <span class="comment">//可以配置的属性</span></span><br><span class="line">	<span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：  </p>
<ol>
<li>为什么能够进行自动配置呢？<br>根据当前不同的条件进行判断，当条件满足时，配置类生效，并绑定对应的properties默认配置文件，如果没有在springBoot配置文件中对这些属性进行配置，那么就会使用默认的配置文件中的值，如果进行了配置，因为配置类映射到了springBoot的配置文件，就会识别到我们手动的配置，并将我们手动配置的属性的值替换掉默认配置的属性的值。</li>
<li>那在springBoot配置文件中能配置什么呢？<br>在配置文件中能配置的属性都在xxxProperties文件中，如上面可以配置的东西就在ServerProperties.class中。那怎么找到对应的xxxProperties呢？首先要知道你配置的东西是在哪个包下的，然后到spring.factories中搜索到对应的全包名，然后点进去查看对应的配置类，在配置类上的注解中找到注解@EnableConfigurationProperties(xxxProperties.class)，点进去注解中的这个xxxProperties.class就能查看你可以在springBoot配置文件中能配置的东西了</li>
<li>在springBoot配置文件中进行配置该怎么写呢？<br>进入到了xxxAutoConfigurartion类中，类上有注解@ConditionalOnProperty(prefix = “server.servlet.encoding”, value = “enabled”, matchIfMissing = true)，根据注解上的前缀prefix = “xxx”就可以知道在springBoot配置文件中的前缀怎么写，然后在配置文件中把前缀写出来，再往后点就会出现对应的可以配置的属性了，然后根据需要进行配置就可以了</li>
</ol>
<p>自动配置的精髓：</p>
<ol>
<li>springBoot在启动是会加载很多自动配置类，即xxxAutoConfigurartion</li>
<li>我们再看我们需要的功能有没有在springBoot写好的配置文件中，如果有，再看我们要用到的组件有没有被springBoot配置类注册到容器中，如果有，那么就不用我们手动配置了，springBoot会自动帮我们进行配置，当然，如果想修改配置也是可以的。前提是这个配置类xxxAutoConfigurartion要被激活了，一般激活就是在pom.xml文件找那个配置对应的启动器就行了</li>
<li>springBoot自动配置类再祖册组件时会从对应的xxxProperties中获取一些属性，并且会赋予默认值，如果想要对这些属性的值进行更改，可以在springBoot配置文件中进行更改<br>注：<br>xxxAutoConfigurartion：自动配置类，给容器中添加组件<br>xxxProperties：封装配置文件中的相关属性</li>
</ol>
<h4 id="自动配置类的条件判断-Conditional"><a href="#自动配置类的条件判断-Conditional" class="headerlink" title="自动配置类的条件判断@Conditional"></a>自动配置类的条件判断@Conditional</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；<br>@Conditional有很多派生的注解：<br><img src="/posts/13628cd3/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD.webp"><br>springBoot启动加载了很多自动配置类，但不是每配置类都会生效的，只有满足了条件判断注解的配置类才会生效，而那些没有满足条件的配置类都会被排除掉，最终加载的自动配置类只有那些满足条件的</p>
<p>转载自狂神说，原文地址：<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;chksm=ce6107d5f9168ec34f59d88c5a7cfa592ab2c1a5bf02cc3ed7bbb7b4f4e93d457144a6843a23&amp;idx=1&amp;mid=2247483766&amp;scene=21&amp;sn=27739c5103547320c505d28bec0a9517#wechat_redirect">https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg%3D%3D&amp;chksm=ce6107d5f9168ec34f59d88c5a7cfa592ab2c1a5bf02cc3ed7bbb7b4f4e93d457144a6843a23&amp;idx=1&amp;mid=2247483766&amp;scene=21&amp;sn=27739c5103547320c505d28bec0a9517#wechat_redirect</a></p>
]]></content>
  </entry>
  <entry>
    <title>spingBoot原理初探</title>
    <url>/posts/3db545d4/</url>
    <content><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文从pom.xml，然后通过My自动装配了解自动装配的原理，再探索springBoot的自动装配原理，最后通过探索main方法中的SpringApplication.run方法对springBoot的自动装配原理进行初步探析，若要深入探析，可以进行debug一步一步跟着程序往下探析。</p>
<span id="more"></span>
<h4 id="pom-xml文件的分析"><a href="#pom-xml文件的分析" class="headerlink" title="pom.xml文件的分析"></a>pom.xml文件的分析</h4><p>在创建的springBoot项目中的pom.xml文件中有一个父依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点进去这个父依赖，会发现里面还有一个父依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再点进去这个父依赖，你会发现在这个父依赖里面全部都是自动装配的依赖,并且配置了版本号</p>
<p><img src="/posts/3db545d4/%E4%BE%9D%E8%B5%9601.jpg"></p>
<p>这些依赖都是已经被springBoot装配好了的，这种装配好了的依赖也叫启动器。不过这些启动器都没有被激活，不过只要在最开始的项目的pom.xml文件中导入相应的启动器（不用导入版本号，版本号已经被装配好了）就能激活对应的启动器，并对激活的启动器进行装配。</p>
<h4 id="springBoot自动装配实例化前做的准备工作"><a href="#springBoot自动装配实例化前做的准备工作" class="headerlink" title="springBoot自动装配实例化前做的准备工作"></a>springBoot自动装配实例化前做的准备工作</h4><ol>
<li>AbstractBeanDefinition：是spring中所有bean的抽象定义对象（bean定义）</li>
<li>BeanDefinitionMap&lt;beanName, BeanDefinition&gt;：当bean.class被JVM类加载到内存中时，会被spring扫描到一个这个map容器中，这个容器存储了bean定义（xxxBean的BeanDefinition），但是bean此时还没有进行实例化</li>
<li>BeanFactoryPostProcessor：实现了BeanFactoryPostProcessor这个接口的类，可以在bean实例化之前完成一些对bean的改动</li>
<li>大致流程图：</li>
</ol>
<p><img src="/posts/3db545d4/%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%89%8D.jpg"><br>5. 由上面可以知道自动装配的中装配的对象时：bean定义(BeanDefinition)</p>
<h4 id="My自动装配"><a href="#My自动装配" class="headerlink" title="My自动装配"></a>My自动装配</h4><p>在了解springBoot的自动装配前，我们可以先写一个自己的自动装配</p>
<ol>
<li>导入spring-webMvc，junit，lombok依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建一个普通的maven项目，并并在pojo包下编写两个实体类A和B，并将两个实体类注册到spring容器中<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component(&quot;a&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;我是AAA&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component(&quot;b&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;我是BBB&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在config包下创建一个MyConfig配置类，并将这两个类交给springBoot进行自动装配<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在config包下创建一个MyImportSelector类，并实现ImportSelector接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="comment">//读取properties配置文件</span></span><br><span class="line">        Properties properties = MyPropertyReader.readPropertyForMe(<span class="string">&quot;/MyProperty.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//通过properties配置文件的key获取value</span></span><br><span class="line">        String strings = (String) properties.get(MyEnableAutoConfig.class.getName());</span><br><span class="line">        <span class="comment">//@Importer注解中返回的类如果是组件bean对象，就会被加载进来使用；如果是一个配置类，就会加载这个配置类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;strings&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在util包下创建一个读取properties配置文件的工具类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPropertyReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">readPropertyForMe</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream sin = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            sin = MyPropertyReader.class.getResourceAsStream(path);</span><br><span class="line">            properties.load(sin);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;读取异常...&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sin.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在resources包下创建一个properties文件<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">com.tSmile.config.MyEnableAutoConfig</span>=<span class="string">com.tSmile.config.MyConfig</span></span><br></pre></td></tr></table></figure></li>
<li>在config包下创建MyEnableAutoConfig注解类，并通过@Import注解将MyImportSelector.class加载到注解类上<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyEnableAutoConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在config包下创建自动配置类MyAutoConfig，并通过注解类MyEnableAutoConfig将加载到注解类上的数据加载到自动配置类中<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MyEnableAutoConfig</span> <span class="comment">//将注解中的配置类继续加载到这个配置类中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAutoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建测试类进行测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取所有MyConfig中所有的bean定义(beanDefinition)，并将所有的bean定义放到BeanDefinitionMap中，</span></span><br><span class="line">        <span class="comment">// 并将所有数据封装到上下文内容中</span></span><br><span class="line">        AnnotationConfigApplicationContext ac =</span><br><span class="line">                <span class="keyword">new</span> AnnotationConfigApplicationContext(MyAutoConfig.class);</span><br><span class="line">        <span class="comment">//通过上下文内容来找到对应的bean定义，调用其空参构造器来创建对象</span></span><br><span class="line">        A a = ac.getBean(<span class="string">&quot;a&quot;</span>, A.class);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
MY自动装配编写完成！！！  </li>
<li>MyAutoConfig自动装配流程图</li>
</ol>
<p><img src="/posts/3db545d4/myConfig%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg"></p>
<h4 id="springBoot自动装配源码分析"><a href="#springBoot自动装配源码分析" class="headerlink" title="springBoot自动装配源码分析"></a>springBoot自动装配源码分析</h4><p>springBoot自动装配源码分析从启动类开始进行分析</p>
<h5 id="启动类上的-SpringBootApplication注解"><a href="#启动类上的-SpringBootApplication注解" class="headerlink" title="启动类上的@SpringBootApplication注解"></a>启动类上的@SpringBootApplication注解</h5><p>@SpringBootApplication这个注解包含了三个注解：<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan  </p>
<ol>
<li>@SpringBootConfiguration注解<br>点进去发现是一个注解类，并且这个注解类上使用了@Configuration进行注解:</li>
</ol>
<p><img src="/posts/3db545d4/springBootConfiguration.jpg"><br>所以@SpringBootConfiguration注解的作用就是把启动类标注为一个javaConfig配置类，也就是说也可以像在上面的MyConfig配置类中一样，在启动类中添加对象进行自动装配:</p>
<p><img src="/posts/3db545d4/myconfig.jpg"><br>2. @ComponentScan注解<br>组件扫描注解，扫描范围是springBoot启动类的同级目录及子路径<br>3. @EnableAutoConfiguration注解<br>这个注解时springBoot最核心的注解，和我们上面写的@MyEnableAutoConfiguration一样，知识在这里它变得更加复杂了，<br>点进这个注解：</p>
<p><img src="/posts/3db545d4/EnableAutoConfiguration01.jpg"><br>这个@Import(AutoConfigurationImportSelector.class)和我们写的一样，做个注解的作用是导入了 AutoConfigurationImportSelector 这个类的bean定义，这个类实现了ImportSelector接口，那么必定实现了这个接口的方法，就是上面我们实现这个接口时实现的那个方法，点进去：<br><img src="/posts/3db545d4/selectImports.jpg"><br>果然，实现了selectImports这个方法，并且返回值也是一个String数组。<br>这个数组存储的是什么呢？当然是返回的是要加载的Config配置文件的全包名，通过返回这个全包名，我们就能自动装配上这些配置文件下定义的bean对象，从而达到了自动装配的目的！和我们上面写的返回的值是一样的，也是返回存储在properties文件中的config配置全包名。<br>根据刚才我们自己实现的selectImports方法，我们是通过注解类的名字来查找，并且最终得到需要加载的Config类的全类名，最后返回的。<br>因此，这里必然有一个根据注解类名字来查找相应的Config文件的操作<br><img src="/posts/3db545d4/selectImports01.jpg"><br>果然，它将一个集合放到了数组里，那么这个集合放的应该就是config配置配的全包名了。<br>这个集合时通过getAutoConfigurationEntry()方法获取的，我们点进这个方法看一下：<br><img src="/posts/3db545d4/getAutoConfigurationEntry.jpg"><br>果然，返回的是一个新建的集合，那么集合里面放了两个参数，那个是我们要找的config配置类全包名参数呢？根据参数的字面意思，可以锁定configurations就是我们要找的参数。<br>那么configurations是怎么得来的呢？看上面的代码，我们可以发现configurations是通过getCandidateConfigurations()方法获取的。<br>getCandidateConfigurations()方法看字面意思是获取候选的configurations和我们上面自己定义的从properties文件读取数据的方法MyPropertyReader.readPropertyForMe()是不是有点像，也是时获取在properties中候选的config配置类的全包名。<br>点进去getCandidateConfigurations()方法：<br><img src="/posts/3db545d4/getCandidateConfigurations.jpg"><br>从这个loadFactoryNames方法体来看，好像没有给他传递一个具体路径,但是通过下面的断言：在 META-INFspring.factories 中找不到自动配置类。如果您“+”正在使用自定义包装，请确保该文件是正确的。我们可以判断他的这个配置文件就叫spring.factories，存放的路径是META-INF/spring.factories。<br>打开对应路径的文件：<br><img src="/posts/3db545d4/factory.jpg"><br>果然，在这个路径下存在着一个配置文件，让我们点进这个配置文件：<br><img src="/posts/3db545d4/configurations.jpg"><br>果然，这里存放着大量的config配置类的全包名，并且key为EnableAutoConfiguration注解的全包名路径，和我们上面写的properties存放的数据格式一样！<br>所以什么是自动装配呢？<br>    手动装配：在spring的xml配置文件中使用bean标签将一个bean注入到另一个bean的property中。<br>    自动装配：加载存储了很多的config配置类的全包名的配置文件，通过config配置文件的全包名获取到对应的config配置文件，并将配置文件中的bean实例化注入到对应的properties文件中的property属性中。</p>
<p>springBoot自动装配流程图：  </p>
<p><img src="/posts/3db545d4/springBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%B5%81%E7%A8%8B.png"><br>4. getAutoConfigurationEntry方法再探<br>我们看一下这个方法除了getCandidateConfigurations获取候选的config配置类还做了什么：</p>
<p><img src="/posts/3db545d4/remove.jpg"><br>getAutoConfigurationEntry方法还将没有在pom.xml使用启动器激活的config配置类移除掉，还把用户在pom.xml文件中exclude排除的config配置类移除掉，这样就不用加载那些没有用到的配置类了，只需要对剩下的有用的配置类进行加载即可<br>5. 结论：<br>    1. SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值<br>    2. 将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；<br>    3. SpringBoot自动装配的本质就是通过Spring去读取META-INF/spring.factories中保存的配置类文件然后加载bean定义的过程。<br>    4. 如果是标了@Configuration注解，就是批量加载了里面的bean定义<br>    5. 如何实现”自动“：通过配置文件获取对应的批量配置类，然后通过配置类批量加载bean定义，只要有写好的配置文件spring.factories就实现了自动。</p>
<p>以上的自动装配原理探析为转载CC_且听风吟的，原文地址：<a href="https://blog.csdn.net/weixin_43826242/article/details/106005176?utm_source=app&amp;app_version=4.16.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen">https://blog.csdn.net/weixin_43826242/article/details/106005176?utm_source=app&amp;app_version=4.16.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen</a></p>
<h5 id="启动类上的SpringApplication-run方法"><a href="#启动类上的SpringApplication-run方法" class="headerlink" title="启动类上的SpringApplication.run方法"></a>启动类上的SpringApplication.run方法</h5><ol>
<li>SpringApplication<br>这个类主要做了四件事：<br>1、推断应用的类型是普通的项目还是Web项目<br>2、查找并加载所有可用初始化器 ， 设置到initializers属性中<br>3、找出所有的应用程序监听器，设置到listeners属性中<br>4、推断并设置main方法的定义类，找到运行的主类<br>查看如下构造器： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">		Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">		<span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">		<span class="keyword">this</span>.bootstrapRegistryInitializers = getBootstrapRegistryInitializersFromSpringFactories();</span><br><span class="line">		setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">		setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">		<span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li>run方法<br><img src="/posts/3db545d4/main.webp"></li>
</ol>
<p>以上启动类上的SpringApplication.run方法转载自狂神说，原文地址：<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;chksm=ce6107fcf9168eeaa5381228dad0e888ffc03401bc51e4bc7637bd46604b8e6e468cc8b43956&amp;idx=1&amp;mid=2247483743&amp;scene=21&amp;sn=431a5acfb0e5d6898d59c6a4cb6389e7#wechat_redirect">https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg%3D%3D&amp;chksm=ce6107fcf9168eeaa5381228dad0e888ffc03401bc51e4bc7637bd46604b8e6e468cc8b43956&amp;idx=1&amp;mid=2247483743&amp;scene=21&amp;sn=431a5acfb0e5d6898d59c6a4cb6389e7#wechat_redirect</a></p>
]]></content>
  </entry>
  <entry>
    <title>springBoot-HelloWorld</title>
    <url>/posts/57d02989/</url>
    <content><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文介绍了什么是springBoot，并记录了创建和编写第一个springBoot的helloWorld程序，还扩展了关于yaml配置文件的语法，环境的切换和PSR303数据校验的知识。</p>
<span id="more"></span>
<h4 id="什么是springBoot"><a href="#什么是springBoot" class="headerlink" title="什么是springBoot"></a>什么是springBoot</h4><p>SpringBoot基于Spring4.0设计，不仅继承了Spring框架原有的优秀特性，而且还通过简化配置来进一步简化了Spring应用的整个搭建和开发过程。另外SpringBoot通过集成大量的框架使得依赖包的版本冲突，以及引用的不稳定性等问题得到了很好的解决。————百度百科<br>springBoot 2.5.6版本参考文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">https://docs.spring.io/spring-boot/docs/current/reference/html/</a></p>
<h4 id="springBoot的特征"><a href="#springBoot的特征" class="headerlink" title="springBoot的特征"></a>springBoot的特征</h4><ol>
<li>springBoot内嵌了Tomcat或Jetty等Servlet容器，是得springBoot启动服务器的速度比在spring中启动Tomcat等服务器的速度更快</li>
<li>springBoot提供自动配置的“starter”项目对象模型，简化了maven配置</li>
<li>springBoot开箱即用，提供了各种默认的配置来简化项目的配置，即提供了各种“starter”启动器，开发者只要在 Maven 的 pom 文件中添加相关依赖后，Spring Boot 就会针对这个应用自动创建和注入需要的 Spring Bean 到上下文中。</li>
<li>springBoot中约定大于配置，这个特征减少了冗余代码生成和大量XML配置</li>
</ol>
<h4 id="第一个springBoot程序的创建"><a href="#第一个springBoot程序的创建" class="headerlink" title="第一个springBoot程序的创建"></a>第一个springBoot程序的创建</h4><h5 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h5><ol>
<li>jdk8</li>
<li>springBoot版本：2.5.6</li>
<li>maven版本：3.8.2</li>
</ol>
<h5 id="idea创建springBoot"><a href="#idea创建springBoot" class="headerlink" title="idea创建springBoot"></a>idea创建springBoot</h5><ol>
<li>选择spring initializr</li>
</ol>
<p><img src="/posts/57d02989/%E5%88%9B%E5%BB%BA01.jpg"><br>2. 对springBoot项目进行设置</p>
<p><img src="/posts/57d02989/%E5%88%9B%E5%BB%BA02.jpg"><br>3. 选择要自动导入的依赖和选择springBoot的版本</p>
<p><img src="/posts/57d02989/%E5%88%9B%E5%BB%BA03.jpg"><br>4. 对springBoot项目名称和存储位置的设置<br><img src="/posts/57d02989/%E5%88%9B%E5%BB%BA04.jpg"></p>
<h5 id="springBoot的maven项目目录介绍"><a href="#springBoot的maven项目目录介绍" class="headerlink" title="springBoot的maven项目目录介绍"></a>springBoot的maven项目目录介绍</h5><p>本目录删除了一些目录，只剩下了maven项目需要的目录</p>
<p><img src="/posts/57d02989/%E7%9B%AE%E5%BD%95.jpg"></p>
<p>注：pom.xml文件中的starter启动器，spring-boot-starter-XXX就是就是启动器，如果导入了启动器，那么对应的springBoot中的自动配置的启动器就会触发，即对应的依赖就会生效</p>
<h4 id="第一个springBoot程序的编写"><a href="#第一个springBoot程序的编写" class="headerlink" title="第一个springBoot程序的编写"></a>第一个springBoot程序的编写</h4><ol>
<li>在pom.xml中导web启动器<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在与启动类同级目录下创建一个controller包，并在controller包下创建一个HelloController类<br>注：必须要在启动类的同级目录下创建包，因为只有在特动位置下的资源才能被springBoot项目扫描到（约定大于配置）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在启动类中启动项目，项目启动完成后在浏览器上访问<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 进行测试</li>
</ol>
<p>是不是感觉springBoot项目比spring项目简单了很多，少了各种xml配置文件的繁琐，直接简单就可以完成了一个web接口的开发，nice！</p>
<h4 id="扩展一：yaml配置文件与properties配置文件的对比"><a href="#扩展一：yaml配置文件与properties配置文件的对比" class="headerlink" title="扩展一：yaml配置文件与properties配置文件的对比"></a>扩展一：yaml配置文件与properties配置文件的对比</h4><ol>
<li>springBoot项目一般不使用自动生成的properties文件作为springBoot的配置文件因为它只能保存键值对，推荐使用yaml文件作为配置文件，因为yaml文件可以保存多种数据，比如键值对，对象，数组等，yaml文件还可以注入到配置类中,并且可以实现一些逻辑表达式等<br>注：可以同时存在两个配置文件，一个properties和一个yaml但是文件名都必须是application（约定大于配置），如果yml和properties同时都配置了端口，并且没有激活其他环境 ，默认会使用自动生成的properties配置文件！</li>
<li>配置文件的作用：修改SpringBoot自动配置的默认值，当引入某个依赖时，springBoot会自动帮我们配置好默认值，如果我们没有在配置文件中配置的话，但是如果配置文件中有配置，那么就会使用我们在配置文件中的配置<br>如配置端口号：<br>properties：key=value<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure>
yaml: key: (冒号后有空格)value<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></li>
<li>yaml基本格式<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置普通的key-value</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">tSmile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置对象</span></span><br><span class="line"><span class="comment">#写法一</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tSmile</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"><span class="comment">#写法二:行内写法</span></span><br><span class="line"><span class="attr">people:</span> &#123;<span class="attr">name:</span> <span class="string">言笑</span>, <span class="attr">age:</span> <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置数组</span></span><br><span class="line"><span class="comment">#写法一</span></span><br><span class="line"><span class="attr">animal:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line"><span class="comment">#写法二：行内写法</span></span><br><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure></li>
<li>yaml对空格的要求非常严格，空格不能省略；已缩进来控制层级关系；大小写十分敏感</li>
<li>双引号不会转换特殊字符串，单引号会将特殊字符串转换成普通字符串<br>如：<br>“hello \n world” ==&gt; hello 换行 world<br>‘hello \n world’ ==&gt; hello \n world</li>
<li>yaml文件支持松散绑定，即yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的</li>
<li>yaml支持JSR303数据校验，在properties中不支持</li>
</ol>
<h4 id="使用yaml文件进行属性注入"><a href="#使用yaml文件进行属性注入" class="headerlink" title="使用yaml文件进行属性注入"></a>使用yaml文件进行属性注入</h4><ol>
<li>在与启动类同级目录下创建一个pojo包，在pojo包下创建两个实体类Dog和People类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//通过这个注解绑定全局配置文件，并且将dog设置为配置文件中的对象</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String lastName, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter，setter和toString方法自己补充</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//通过这个注解绑定全局配置文件，并且将dog设置为配置文件中的对象</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;people&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> sex;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; info;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">boolean</span> sex,</span></span></span><br><span class="line"><span class="params"><span class="function">                  Date birth, Map&lt;String, Object&gt; info,</span></span></span><br><span class="line"><span class="params"><span class="function">                  List&lt;Object&gt; hobbies, Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter，setter和toString方法自己补充</span></span><br></pre></td></tr></table></figure></li>
<li>导入属性注入的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在application.yaml配置文件中对属性进行注入<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">people:</span></span><br><span class="line">  <span class="comment">#生成随机数，随机UUID</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tSmile$&#123;random.uuid&#125;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span> <span class="comment">#$&#123;random.int&#125;</span></span><br><span class="line">  <span class="attr">sex:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/01/21</span></span><br><span class="line">  <span class="comment">#注意：key不能是中文，如果是中文的话会绑定失败，即对对应的属性注入失败，运行出现错误</span></span><br><span class="line">  <span class="attr">info:</span> &#123;<span class="attr">hith:</span> <span class="number">178</span>, <span class="attr">weight:</span> <span class="number">120</span>&#125;</span><br><span class="line">  <span class="attr">hobbies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">book</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="comment">#选择逻辑，如果people.hello没有，那么就输出other_旺财，如果有那么就输出people.hello+_旺财</span></span><br><span class="line">    <span class="attr">last-name:</span> <span class="string">$&#123;people.hello:other&#125;_旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="comment">#松散绑定，即&quot;-&quot;命名和驼峰命名可以相互识别转换进行属性注入</span></span><br><span class="line">  <span class="comment">#如yaml中写的last-name，属性中写的lastName，也可以直接注入</span></span><br><span class="line">  <span class="attr">last-name:</span> <span class="string">marry</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></li>
<li>在测试类中进行测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> People people;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> Dog dog;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(dog);</span><br><span class="line">       System.out.println(people);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="扩展二：使用yaml进行环境切换"><a href="#扩展二：使用yaml进行环境切换" class="headerlink" title="扩展二：使用yaml进行环境切换"></a>扩展二：使用yaml进行环境切换</h4><p>在程序开发中一般有多套环境，比如有开发环境，测试环境等各种环境，每个环境配置的东西都有区别，如开发环境配置了swagger，而在发布环境就不会配置swagger，使用yaml进行环境的切换如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多环境切换，使用---来分隔每个环境</span></span><br><span class="line"><span class="comment">#环境一；默认使用第一个配置的环境</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">#环境切换，即激活某个环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment">#环境二：开发环境</span></span><br><span class="line"><span class="comment">#给环境使用的端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="comment">#给环境命名</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment">#环境三：测试环境</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>
<h4 id="扩展三：JSR303数据校验"><a href="#扩展三：JSR303数据校验" class="headerlink" title="扩展三：JSR303数据校验"></a>扩展三：JSR303数据校验</h4><ol>
<li>什么是JSR303数据校验<br>JSR303数据校验就是检验数据再进行属性注入的时候检验注入的数据是不是符合这个属性的数据规则，如果符合，那么就会进行注入，如果不符合，那么就抛出异常，属性注入失败</li>
<li>常见的数据校验参数：<br>空检查：<br>@Null       验证对象是否为null<br>@NotNull    验证对象是否不为null, 无法查检长度为0的字符串<br>@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格：<br>@NotEmpty   检查约束元素是否为NULL或者是EMPTY.<br>Booelan检查<br>@AssertTrue     验证 Boolean 对象是否为 true<br>@AssertFalse    验证 Boolean 对象是否为 false<br>长度检查：<br>@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内<br>@Length(min=, max=) string is between min and max included.<br>日期检查：<br>@Past       验证 Date 和 Calendar 对象是否在当前时间之前<br>@Future     验证 Date 和 Calendar 对象是否在当前时间之后<br>@Pattern    验证 String 对象是否符合正则表达式的规则  </li>
<li>导入JSR303数据校验的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在People实体类中开启JSR303数据校验<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;people&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span>  <span class="comment">//开启jrs303数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email(message = &quot;格式错误，此格式不是邮箱格式&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Max(value = 120, message = &quot;年龄不能超过120岁&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;性别不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> sex;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; info;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure></li>
<li>修改yaml配置文件后在测试类中进行测试</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>拦截器和文件的上传下载</title>
    <url>/posts/ce873c74/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文描述了拦截器的作用和演示了拦截器的使用，并且演示了文件的上传和下载</p>
<span id="more"></span>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器类似于过滤器，拦截器会在访问某个目录下的资源时进行请求拦截，要到达某个条件拦截器才会<br>放行，拦截器放行后才能够访问这个目录下的资源。</p>
<h3 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h3><p>拦截器是aop的具体的应用，即拦截器是通过aop来实现的。也就是说，拦截器是一个切面，某个目录作为切点，<br>拦截器就是对某个目录下的所有资源的前置通知，要访问某个目录下的资源，都会经过这个前置通知，如果<br>不符合前置通知的要求，那么请求就会被拦截下来，不能访问那个目录下的所有资源。</p>
<h3 id="使用登录示例演示拦截器的实现前的准备工作"><a href="#使用登录示例演示拦截器的实现前的准备工作" class="headerlink" title="使用登录示例演示拦截器的实现前的准备工作"></a>使用登录示例演示拦截器的实现前的准备工作</h3><ol>
<li>创建一个maven模块，并添加web支持</li>
<li>除了项目的依赖，再在模块中添加两个依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建module的lib目录，将所有的依赖都放进去</li>
<li>为这个module配置一个tomcat服务器</li>
<li>配置web.xml文件</li>
<li>创建并配置springmvc-servlet.xml文件</li>
<li>创建com.tSmile.controller包</li>
<li>创建com.tSmile.statics包</li>
<li>在WEB-INF下创建一个jsp目录</li>
</ol>
<h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><ul>
<li>在首页创建三个a标签，分别是“登录页面”，“进入管理员页面”，“注销账号”</li>
<li>当点击登录页面时，跳转到登录页面，可以在登录页面输入正确的账号和密码进行登录，登录成功进入<br>管理员页面，登录失败，继续留在登录页面，如果已经登录，再点击登录页面时，会跳转到管理员页面</li>
<li>当点击进入管理员页面时，如果没有登录，那么就跳转到登录页面，如果已经登录，那么就进入管理<br>员页面</li>
<li>当点击注销账号时，如果没有登录，那么就跳转到登录页面，如果已经登录，那么就注销登录</li>
</ul>
<h3 id="使用登录示例演示拦截器的实现"><a href="#使用登录示例演示拦截器的实现" class="headerlink" title="使用登录示例演示拦截器的实现"></a>使用登录示例演示拦截器的实现</h3><ol>
<li>编写web.xml页面<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/log/toLoginPage&quot;</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/log/toManager&quot;</span>&gt;</span>进入管理员页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/log/logout&quot;</span>&gt;</span>注销账号<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建loginPage.jsp，并编写jsp页面<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/log/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;密 码&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;pwd&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建manager.jsp页面，并编写jsp页面<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;manage&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;欢迎来到管理页面&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>在controller包下创建LoginController<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/log&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳转到登录页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;toLoginPage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLoginPage</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;loginInfo&quot;</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;manager&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;loginPage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳转到管理员页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;toManager&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;manager&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录功能</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request, String username, String pwd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(pwd))&#123;</span><br><span class="line">            HttpSession session = request.getSession();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginInfo&quot;</span>, username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;manager&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;loginPage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注销登录功能</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;logout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        session.removeAttribute(<span class="string">&quot;loginInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在statics包下创建拦截器LogInterceptor<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可以只重写第一个方法，这里为了演示把其他两个方法也写出来了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;============前置拦截处理方法执行================&quot;</span>);</span><br><span class="line">        <span class="comment">//如果用户已经登录，放行</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;loginInfo&quot;</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是进入登录页面，放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;toLoginPage&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是想要登录，放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//其他一律跳转到登录页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/loginPage.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;============后置拦截处理方法执行================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;============拦截处理清理方法执行================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在springmvc-servlet.xml配置文件中配置拦截器<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以在这里配置多个拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置拦截请求地址--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/log/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置使用哪个拦截器拦截--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.tSmile.statics.LogInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>启动tomcat服务器进行测试</li>
</ol>
<h2 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h2><p>文件上传时前端表单的要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为<br>multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器</p>
<h3 id="文件上传和下载演示前的准备"><a href="#文件上传和下载演示前的准备" class="headerlink" title="文件上传和下载演示前的准备"></a>文件上传和下载演示前的准备</h3><ol>
<li>创建一个maven模块，并添加web支持</li>
<li>除了项目的依赖，再在模块中添加两个依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建module的lib目录，将所有的依赖都放进去</li>
<li>为这个module配置一个tomcat服务器</li>
<li>配置web.xml文件</li>
<li>创建并配置springmvc-servlet.xml文件</li>
<li>创建com.tSmile.controller包</li>
<li>在WEB-INF下创建一个jsp目录</li>
<li>在web目录下添加statics/photo目录</li>
</ol>
<h3 id="文件上传的演示"><a href="#文件上传的演示" class="headerlink" title="文件上传的演示"></a>文件上传的演示</h3><p>在springmvc-servlet.xml中进行文件上传配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注：id必须为 multipartResolver 不能随便起，不然会报400错误--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--请求的编码格式必须和jsp的pageEncoding属性一直，一边能够正确读取表单数据，默认为ISO-8859-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置文件上传的上限，单位为字节（10485760=10M）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="文件上传方式一"><a href="#文件上传方式一" class="headerlink" title="文件上传方式一"></a>文件上传方式一</h4><ol>
<li>在index.jsp中编写一个表单<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/fileUp&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br></pre></td></tr></table></figure></li>
<li>在controller包下创建一个UpLoadController，并编写上传方式一代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpLoadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fileUp&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUp</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String filename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//如果文件名为空，直接返回到原来页面</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(filename))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传的文件名：&quot;</span> + filename);</span><br><span class="line">        <span class="comment">//获取请求的路径，对应着到项目名的路径，加上/upload目录作为保存上传文件的路径</span></span><br><span class="line">        <span class="comment">//对上传文件路径的设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件上传的保存路径：&quot;</span> + path);</span><br><span class="line">        <span class="comment">//创建上传文件保存地址，因为第一次创建时这个地址不存在，所以后面要加一个判断</span></span><br><span class="line">        File realpath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="comment">//如果路径不存在，那个创建一个</span></span><br><span class="line">        <span class="keyword">if</span> (!realpath.exists())&#123;</span><br><span class="line">            realpath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件上传后保存的路径为：&quot;</span> + realpath);</span><br><span class="line">        <span class="comment">//通过上传的文件获取一个输入流读取上传文件</span></span><br><span class="line">        InputStream inputStream = file.getInputStream();</span><br><span class="line">        <span class="comment">//创建一个输出流,将文件写到路径为realpath的文件名为filename的文件中</span></span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realpath, filename));</span><br><span class="line">        <span class="comment">//读取输入流的文件，通过输出流写出</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffere = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=inputStream.read(buffere))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(buffere,<span class="number">0</span>,len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/indecx.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动tomcat服务器进行测试</li>
</ol>
<h4 id="文件上传方式二"><a href="#文件上传方式二" class="headerlink" title="文件上传方式二"></a>文件上传方式二</h4><ol>
<li>在index.jsp中再编写一个表单<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/fileUp2&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br></pre></td></tr></table></figure></li>
<li>在UpLoadController中编写上传方式二的代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;fileUp2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUp2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置文件上传路径</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        File realpath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realpath.exists())&#123;</span><br><span class="line">            realpath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span> + realpath);</span><br><span class="line">        <span class="comment">//通过CommonsMultipartFile的方法直接写到对应路径的文件中</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> File(realpath + <span class="string">&quot;/&quot;</span> + file.getOriginalFilename()));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>启动tomcat服务器进行测试</li>
</ol>
<h3 id="文件下载演示"><a href="#文件下载演示" class="headerlink" title="文件下载演示"></a>文件下载演示</h3><p>文件下载也有两种实现方式</p>
<h4 id="文件下载方式一"><a href="#文件下载方式一" class="headerlink" title="文件下载方式一"></a>文件下载方式一</h4><ol>
<li>在index.xml中编写一个a标签<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/fileLoad&quot;</span>&gt;图片<span class="number">1</span>下载&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
<li>在UpLoadController中编写下载方式一的代码（此代码以刚上传上来的文件作为下载资源提供下载）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/fileLoad&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileLoad</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        String fileName = <span class="string">&quot;图片1.png&quot;</span>;</span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        <span class="comment">//清空页面的缓存，设置页面不缓存</span></span><br><span class="line">        response.reset();</span><br><span class="line">        <span class="comment">//设置相应数据的字符集编码</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//设置以二进制的方式传输数据</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">                + URLEncoder.encode(fileName,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        File realpath = <span class="keyword">new</span> File(path, fileName);</span><br><span class="line">        <span class="comment">//创建一个输入流读取文件</span></span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(realpath);</span><br><span class="line">        <span class="comment">//使用response获取输出流</span></span><br><span class="line">        OutputStream outputStream = response.getOutputStream();</span><br><span class="line">        <span class="comment">//读取文件并进行输出</span></span><br><span class="line">        <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//4、执行 写出操作</span></span><br><span class="line">        <span class="keyword">while</span>((index= inputStream.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(buff, <span class="number">0</span>, index);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>启动tomcat服务器进行测试</li>
</ol>
<h4 id="文件下载方式二"><a href="#文件下载方式二" class="headerlink" title="文件下载方式二"></a>文件下载方式二</h4><ol>
<li>在index.xml中编写一个a标签<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/photo/图片1.png&quot;</span>&gt;图片<span class="number">1.</span>png下载&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
<li>在模块中的web/statics/photo目录下转备好要下载的资源提供下载</li>
<li>启动tomcat服务器进行测试</li>
<li>点击跳转到图片标签后右键，将图片另存为</li>
</ol>
<hr>
<p>本文是观看狂神说B站视频写的笔记—–侵权删</p>
]]></content>
  </entry>
  <entry>
    <title>ajax</title>
    <url>/posts/c5a6a264/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文描述了什么是ajax，ajax的执行流程图和ajax的三个体验异步请求和局部更新的代码</p>
<span id="more"></span>
<h3 id="什么是ajax？"><a href="#什么是ajax？" class="headerlink" title="什么是ajax？"></a>什么是ajax？</h3><ul>
<li>ajax： Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</li>
<li>ajax是一种用于创建更好更快的交互性更强的一种web应用程序</li>
<li>ajax的作用就是实现异步请求，局部更新来提高用户的体验</li>
</ul>
<h3 id="ajax的执行流程图"><a href="#ajax的执行流程图" class="headerlink" title="ajax的执行流程图"></a>ajax的执行流程图</h3><p><img src="/posts/c5a6a264/ajax.jpg"></p>
<h3 id="ajax的体验"><a href="#ajax的体验" class="headerlink" title="ajax的体验"></a>ajax的体验</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol>
<li>使用maven创建一个模块，并调价web支持</li>
<li>创建module的lib目录，将所有的依赖都放进去</li>
<li>为这个module配置一个tomcat服务器</li>
<li>配置web.xml文件</li>
<li>创建并配置springmvc-servlet.xml文件</li>
<li>创建controller控制器</li>
<li>创建一个pojo类 User</li>
<li>在WEB_INF目录下创建一个statics目录，在statics目录下创建一个js目录，将jquery.js文件放到js目录下</li>
</ol>
<h4 id="ajax体验一：失去焦点事件体验异步请求"><a href="#ajax体验一：失去焦点事件体验异步请求" class="headerlink" title="ajax体验一：失去焦点事件体验异步请求"></a>ajax体验一：失去焦点事件体验异步请求</h4><p>1.在index.jsp中编写页面和编写jsp代码</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;%--导入jquery文件--%&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;%--编写jquery代码--%&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="comment">/*a函数*/</span></span><br><span class="line">      <span class="function">function <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*使用ajax发起get请求*/</span></span><br><span class="line">        $.get(&#123;</span><br><span class="line">          url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/ajax01&quot;</span>,</span><br><span class="line">          data:&#123;<span class="string">&quot;name&quot;</span>:$(<span class="string">&quot;#username1&quot;</span>).val()&#125;,</span><br><span class="line">          success:function (data,status) &#123;</span><br><span class="line">            console.log(<span class="string">&quot;data=&quot;</span> + data);</span><br><span class="line">            console.log(<span class="string">&quot;status=&quot;</span> + status);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*b函数*/</span></span><br><span class="line">      <span class="function">function <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*使用ajax发起post请求*/</span></span><br><span class="line">        $.post(&#123;</span><br><span class="line">          url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/ajax02&quot;</span>,</span><br><span class="line">          data:&#123;<span class="string">&quot;name&quot;</span>:$(<span class="string">&quot;#username2&quot;</span>).val()&#125;,</span><br><span class="line">          success:function (data,status) &#123;</span><br><span class="line">            console.log(<span class="string">&quot;data=&quot;</span> + data);</span><br><span class="line">            console.log(<span class="string">&quot;status=&quot;</span> + status);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;%--测试使用response返回数据。使用失去焦点属性绑定a函数--%&gt;</span><br><span class="line">  用户名<span class="number">1</span>：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username1&quot;</span> onblur=<span class="string">&quot;a()&quot;</span>&gt;</span><br><span class="line">  &lt;br/&gt;</span><br><span class="line">  &lt;%--测试直接返回数据。使用失去焦点属性绑定b函数--%&gt;</span><br><span class="line">  用户名<span class="number">2</span>：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username2&quot;</span> onblur=<span class="string">&quot;b()&quot;</span>&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>编写对应的controller中的功能<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ajax01&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ajaxTest02</span><span class="params">(String name, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//使用response返回数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;smile&quot;</span>.equals(name))&#123;</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;ajax01=true&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;ajax01=false&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/ajax02&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ajaxTest03</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//直接返回数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;smile&quot;</span>.equals(name))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;ajax02=true&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;ajax02=false&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>启动tomcat服务器，启动完成后在浏览器中按下f2，在控制台console中查看效果</li>
</ol>
<h4 id="ajax体验二：遍历list结合体验局部更新"><a href="#ajax体验二：遍历list结合体验局部更新" class="headerlink" title="ajax体验二：遍历list结合体验局部更新"></a>ajax体验二：遍历list结合体验局部更新</h4><ol>
<li>在web目录下创建一个foreach.jsp页面文件，并对jsp页面进行编写<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;foreach&lt;/title&gt;</span><br><span class="line">    &lt;%--引入jquery文件--%&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;%--编写jquery代码--%&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            <span class="comment">/*绑定id为btn的按钮标签，添加点击事件*/</span></span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                <span class="comment">/*使用ajax发起post请求*/</span></span><br><span class="line">                $.post(&#123;</span><br><span class="line">                    url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/users&quot;</span>,</span><br><span class="line">                    <span class="comment">/*使用回调函数进行字符串拼接*/</span></span><br><span class="line">                    success:function (data) &#123;</span><br><span class="line">                        let str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; data.length; i ++)&#123;</span><br><span class="line">                            str += <span class="string">&quot;&lt;tr&gt;&quot;</span></span><br><span class="line">                                    +  <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                                    + <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                                    + <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].high + <span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                                + <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">/*将拼接的字符串拼接到id为body的标签后面*/</span></span><br><span class="line">                        $(<span class="string">&quot;#body&quot;</span>).html(str);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;加载数据&lt;/button&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;身高&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody id=<span class="string">&quot;body&quot;</span>&gt;&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>编写对应的controller中的功能<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="string">&quot;张楚岚&quot;</span>, <span class="number">21</span>, <span class="number">181</span>));</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="string">&quot;张三丰&quot;</span>, <span class="number">99</span>, <span class="number">178</span>));</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="string">&quot;张之维&quot;</span>, <span class="number">89</span>, <span class="number">189</span>));</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>启动tomcat服务器，启动完成后在浏览器中点击加载数据按钮遍历集合进行测试</li>
</ol>
<h4 id="ajax体验三：登录操作体验异步请求和局部更新"><a href="#ajax体验三：登录操作体验异步请求和局部更新" class="headerlink" title="ajax体验三：登录操作体验异步请求和局部更新"></a>ajax体验三：登录操作体验异步请求和局部更新</h4><ol>
<li>在web目录下创建一个log.jsp页面文件，并对jsp页面进行编写<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;log&lt;/title&gt;</span><br><span class="line">    &lt;%--引入jquery文件--%&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;%--编写jquery代码--%&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            <span class="comment">/*为id为username的标签绑定失去焦点事件*/</span></span><br><span class="line">            $(<span class="string">&quot;#username&quot;</span>).blur(function () &#123;</span><br><span class="line">                <span class="comment">/*异步请求：使用ajax发起get请求*/</span></span><br><span class="line">                $.get(&#123;</span><br><span class="line">                    url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/log&quot;</span>,</span><br><span class="line">                    data:&#123;<span class="string">&quot;username&quot;</span>:$(<span class="string">&quot;#username&quot;</span>).val()&#125;,</span><br><span class="line">                    success:function (data) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;ok&quot;</span> === data)&#123;</span><br><span class="line">                            $(<span class="string">&quot;#namespan&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            $(<span class="string">&quot;#namespan&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">/*局部更新：显示回调函数的数据*/</span></span><br><span class="line">                        $(<span class="string">&quot;#namespan&quot;</span>).html(data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">/*给id为password的标签绑定失去焦点函数*/</span></span><br><span class="line">            $(<span class="string">&quot;#password&quot;</span>).blur(function () &#123;</span><br><span class="line">                <span class="comment">/*异步请求：使用ajax发起get请求*/</span></span><br><span class="line">                $.get(&#123;</span><br><span class="line">                    url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/log&quot;</span>,</span><br><span class="line">                    data:&#123;<span class="string">&quot;password&quot;</span>:$(<span class="string">&quot;#password&quot;</span>).val()&#125;,</span><br><span class="line">                    success:function (data) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;ok&quot;</span> === data)&#123;</span><br><span class="line">                            $(<span class="string">&quot;#pswspan&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            $(<span class="string">&quot;#pswspan&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">/*局部更新：显示回调函数的数据*/</span></span><br><span class="line">                        $(<span class="string">&quot;#pswspan&quot;</span>).html(data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span>&gt;&lt;br/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;span id=<span class="string">&quot;namespan&quot;</span>&gt;&lt;/span&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;密 码&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;password&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;span id=<span class="string">&quot;pswspan&quot;</span>&gt;&lt;/span&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>编写对应的controller中的功能<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/log&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test05</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">       String msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">if</span> (username != <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username))&#123;</span><br><span class="line">               msg = <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               msg = <span class="string">&quot;用户名不正确&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (password != <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="string">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class="line">               msg = <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               msg = <span class="string">&quot;密码不正确&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> msg;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>启动tomcat服务器，启动完成后在浏览器中的输入框中输入字符，进行测试</li>
</ol>
<hr>
<p>本文是观看狂神说B站视频后做的笔记—侵权删</p>
]]></content>
  </entry>
  <entry>
    <title>ssm整合</title>
    <url>/posts/91794a99/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文是对mybatis、spring、springMVC框架的整合，以及实现了基本的增删改查功能，另外扩展了根据书名查询<br>图书的功能。</p>
<span id="more"></span>

<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ol>
<li>idea版本 2020.1</li>
<li>mysql版本 8.0</li>
<li>maven版本 3.8.2</li>
<li>Tomcat服务器版本 8.0.50</li>
</ol>
<h3 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h3><p>创建一个存放书籍的数据库表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database `ssmbuild`;</span><br><span class="line"></span><br><span class="line">use `ssmbuild`;</span><br><span class="line"></span><br><span class="line">create table books(</span><br><span class="line">	bookID int(10) primary key auto_increment comment &#x27;书id&#x27;,</span><br><span class="line">    bookName varchar(100) not null comment &#x27;书名&#x27;,</span><br><span class="line">    bookCount int(11) comment &#x27;数量&#x27;,</span><br><span class="line">    detail varchar(200) not null comment &#x27;描述&#x27;</span><br><span class="line">) engine=InnoDB default charset=utf8;</span><br><span class="line"></span><br><span class="line">insert into books(bookName,bookCount,detail) values</span><br><span class="line">(&#x27;java&#x27;,1,&#x27;从入门到放弃&#x27;),</span><br><span class="line">(&#x27;MySQL&#x27;,10,&#x27;从删库到跑路&#x27;),</span><br><span class="line">(&#x27;Linux&#x27;,5,&#x27;从入门到入狱&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h3><ol>
<li>创建一个ssm新项目，添加web支持</li>
<li>在pom中导入相应的jar包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--junit测试--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--servlet和jsp--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--事务--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在pom中解决静态资源过滤问题<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决静态资源导出不存在问题--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在build中配置resource，来防止资源导出时遇到资源不存在问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--将src/main/resources目录下的所有properties文件和xml文件导出--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--将src/main/java目录下的所有properties文件和xml文件导出--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>建立项目的基本结构和配置框架<br> com.tSmile.pojo<br> com.tSmile.mapper<br> com.tSmile.service<br> com.tSmile.controller<br> 在WEB-INF目录下创建一个jsp目录</li>
</ol>
<p>applicationContext.xml : </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line">mybatis-config.xml : </span><br><span class="line">```xml</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mybatis层编写"><a href="#mybatis层编写" class="headerlink" title="mybatis层编写"></a>mybatis层编写</h3><ol>
<li>database.properties : <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></li>
<li>mybatis-config.xml : <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    &lt;settings&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/settings&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.tSmile.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.tSmile.mapper.BooksMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写pojo类Books<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCount;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写mapper层  </li>
</ol>
<p>BooksMapper : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">//    增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"><span class="comment">//    删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="meta">@Param(&quot;bookId&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="comment">//    更新一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"><span class="comment">//    查询一本书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="meta">@Param(&quot;bookId&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="comment">//    查询所有书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryBooks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BooksMapper.xml : </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tSmile.mapper.BooksMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        insert into books(`bookName`, `bookCount`, `detail`)</span><br><span class="line">        values (#&#123;bookName&#125;,#&#123;bookCount&#125;,#&#123;detail&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from books</span><br><span class="line">        where bookID=#&#123;bookId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        update books set bookName=#&#123;bookName&#125;,</span><br><span class="line">        bookCount=#&#123;bookCount&#125;, detail=#&#123;detail&#125;</span><br><span class="line">        where bookID=#&#123;bookID&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select * from books where bookID=#&#123;bookId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBooks&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select * from books;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>编写service层  </li>
</ol>
<p>BooksService : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="comment">//    删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//    更新一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="comment">//    查询一本书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//    查询所有书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryBooks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BooksServiceImpl : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooksServiceImpl</span> <span class="keyword">implements</span> <span class="title">BooksService</span> </span>&#123;</span><br><span class="line"><span class="comment">//  service层调用mapper层</span></span><br><span class="line">    <span class="keyword">private</span> BooksMapper booksMapper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksMapper</span><span class="params">(BooksMapper booksMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksMapper = booksMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以在这里写一些相应的业务</span></span><br><span class="line">        <span class="keyword">return</span> booksMapper.addBook(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以在这里写一些相应的业务</span></span><br><span class="line">        <span class="keyword">return</span> booksMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以在这里写一些相应的业务</span></span><br><span class="line">        <span class="keyword">return</span> booksMapper.updateBook(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以在这里写一些相应的业务</span></span><br><span class="line">        <span class="keyword">return</span> booksMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以在这里写一些相应的业务</span></span><br><span class="line">        <span class="keyword">return</span> booksMapper.queryBooks();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spring层编写"><a href="#spring层编写" class="headerlink" title="spring层编写"></a>spring层编写</h3><ol>
<li>spring整合mybatis层<br>spring-mapper.xml : <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring整合mapper（dao）层--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--关联数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接池</span></span><br><span class="line"><span class="comment">        dbcp:半自动化操作，不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0:动化操作（自动化加载配置文件，并且可以自动设置到对象中）</span></span><br><span class="line"><span class="comment">        druid,hikari--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置连接池属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置最大和最小连接数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置sqlSessionFactory对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis核心配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置扫描mapper接口包，动态实现mapper接口注入到spring容器中</span></span><br><span class="line"><span class="comment">        MapperScannerConfigurer 自动扫描 将Mapper接口生成代理注入到Spring--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入sqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置需要扫描的包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.tSmile.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--不需要注册sqlSession的bean对象了，创建sqlSession对象是为了在mapperImpl中使用，</span></span><br><span class="line"><span class="comment">        现在mapperImpl已经被前面的 MapperScannerConfigure 自动扫描mapper接口</span></span><br><span class="line"><span class="comment">        并创建注入到了spring容器中了，所以不用再创建sqlSession对象了--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash;使用sqlSessionTemplate模板创建sqlSession对象&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;SqlSessionTemplate只能通过构造器注入参数，因为没有set方法&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>spring整合service层<br>spring-service.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring整合service层--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描service包下的所有类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tSmile.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将booksServiceImpl注入到spring容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;booksServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tSmile.service.BooksServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--因为已经将所有配置文件放在同一个spring的applicationContext目录下了，所以可以直接引用--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入booksMapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;booksMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;booksMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器,开启事务管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--因为已经将所有配置文件放在同一个spring的applicationContext目录下了，所以可以直接引用--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop事务切入--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结合aop进行事务的织入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;interceptor&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给所有的方法配置事务</span></span><br><span class="line"><span class="comment">        还可以给事务配置传播方式，如propagation=&quot;REQUIRED&quot;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.tSmile.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;interceptor&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="springMVC层编写"><a href="#springMVC层编写" class="headerlink" title="springMVC层编写"></a>springMVC层编写</h3></li>
<li>配置web.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.注册dispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置springnvc字符集过滤器来解决乱码问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置spring-mvc.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置spring-mvc--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启springMVC注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tSmile.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="将三层的spring配置文件整合的配置文件"><a href="#将三层的spring配置文件整合的配置文件" class="headerlink" title="将三层的spring配置文件整合的配置文件"></a>将三层的spring配置文件整合的配置文件</h3>applicaionContext.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入mapper、service和spring-mvc配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>—-配置文件部分暂时结束—-以上为纯净项目框架搭建—-以下为功能实现—-</p>
<h3 id="cootroller和视图的编写"><a href="#cootroller和视图的编写" class="headerlink" title="cootroller和视图的编写"></a>cootroller和视图的编写</h3><ol>
<li>编写首页index.jsp<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      a&#123;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        color: black;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">      &#125;</span><br><span class="line">      h3&#123;</span><br><span class="line">        width: 180px;</span><br><span class="line">        height: 38px;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 38px;</span><br><span class="line">        background: deepskyblue;</span><br><span class="line">        border-radius: 8px;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;%--  $&#123;pageContext.request.contextPath&#125; 项目名称 --%&gt;</span><br><span class="line">  &lt;h3&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBooks&quot;</span>&gt;</span><br><span class="line">      进入书籍展示页面</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>编写BooksController中查询所有图书allBooks<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/book&quot;)</span><br><span class="line">public class BooksController &#123;</span><br><span class="line">    //controller层调用service层</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;booksServiceImpl&quot;)</span><br><span class="line">    private BooksService booksServiceImpl;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/allBooks&quot;)</span><br><span class="line">    public String allBooks(Model model)&#123;</span><br><span class="line">        List&lt;Books&gt; books = booksServiceImpl.queryBooks();</span><br><span class="line">        model.addAttribute(&quot;listBook&quot;, books);</span><br><span class="line">        return &quot;allBooks&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写展示所有图书的页面allBooks.jsp<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍展示&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--bootstrap容器--%&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;%--清除浮动--%&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;%--栅格系统，将屏幕等分成<span class="number">12</span>列，<span class="number">12</span>列是满屏，如果不想满屏，可以下雨<span class="number">12</span>列,md是中等屏幕，ms是小屏幕--%&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;%--页面头部--%&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;&lt;small&gt;书籍列表————展示所有书籍&lt;/small&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;%--添加书籍按钮，占一行，占<span class="number">12</span>列中的<span class="number">1</span>列--%&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-1 column&quot;</span>&gt;</span><br><span class="line">                &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBookPage&quot;</span>&gt;</span><br><span class="line">                    添加书籍</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;%--显示全部书籍按钮，和添加书籍按钮在同一行，占<span class="number">12</span>列中的<span class="number">8</span>列--%&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-8 column&quot;</span>&gt;</span><br><span class="line">                &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBooks&quot;</span>&gt;</span><br><span class="line">                    显示全部书籍</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;%--搜索框和查询按钮，和添加书籍按钮在同一行--%&gt;</span><br><span class="line">            &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/queryBookByName&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">                &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入书籍的名称&quot;</span> style=<span class="string">&quot;height: 35px&quot;</span> name=<span class="string">&quot;bookName&quot;</span> required&gt;&amp;nbsp;</span><br><span class="line">                &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;查询&quot;</span>&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;%--上面的按钮和搜索框和书籍展示列表之间的间隔，<span class="number">1</span>像素--%&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span> style=<span class="string">&quot;height: 1px&quot;</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;%--占一行，并清除浮动--%&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;%--占满一行的<span class="number">12</span>列--%&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;%--table标签 表格标签</span><br><span class="line">                table-hover 隔行变色</span><br><span class="line">                table-striped 有格子</span><br><span class="line">            --%&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">                &lt;%--表格头部--%&gt;</span><br><span class="line">                &lt;head&gt;</span><br><span class="line">                    &lt;%--行--%&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;%--列,头部使用th：th为加粗--%&gt;</span><br><span class="line">                        &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;书籍简介&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/head&gt;</span><br><span class="line">                &lt;%--表格身体--%&gt;</span><br><span class="line">                &lt;body&gt;</span><br><span class="line">                &lt;%--循环遍历listBook集合--%&gt;</span><br><span class="line">                    &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;listBook&#125;&quot;</span>&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;%--身体使用td：td为不加粗--%&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;book.bookID&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;book.bookName&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;book.bookCount&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;book.detail&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;%--判断，如果error时空的，那么显示修改和删除标签--%&gt;</span><br><span class="line">                            &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;empty error&#125;&quot;</span>&gt;</span><br><span class="line">                                &lt;td&gt;</span><br><span class="line">                                    &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdatePage?id=$&#123;book.bookID&#125;&quot;</span>&gt;修改&lt;/a&gt;</span><br><span class="line">                                    &amp;nbsp;|&amp;nbsp;</span><br><span class="line">                                        &lt;%--使用RestFul风格--%&gt;</span><br><span class="line">                                    &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/deleteBook/$&#123;book.bookID&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                                &lt;/td&gt;</span><br><span class="line">                            &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                    &lt;/c:forEach&gt;</span><br><span class="line">                &lt;/body&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;%--显示error信息，在表格外，占一行--%&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">                &lt;div style=<span class="string">&quot;color: red; font-size: 24px&quot;</span> align=<span class="string">&quot;center&quot;</span> &gt;$&#123;error&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>编写controller中添加图书部分<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳转到添加书籍页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toAddBookPage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAddBookPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addBookPage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加书籍</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBook</span><span class="params">(Books books)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;addBook==&gt;&quot;</span> + books);</span><br><span class="line">        booksServiceImpl.addBook(books);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBooks&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>编写添加图书页面addBookPage.jsp<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;添加书籍&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;%--清除浮动--%&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;%--栅格系统，将屏幕等分成<span class="number">12</span>列，<span class="number">12</span>列是满屏，如果不想满屏，可以下雨<span class="number">12</span>列,md是中等屏幕，ms是小屏幕--%&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;%--页面头部--%&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;&lt;small&gt;添加书籍&lt;/small&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">                &lt;label&gt;书籍名称&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> name=<span class="string">&quot;bookName&quot;</span> required&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">                &lt;label&gt;书籍数量&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> name=<span class="string">&quot;bookCount&quot;</span> required&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">                &lt;label&gt;书籍简介&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> name=<span class="string">&quot;detail&quot;</span> required&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>编写controller修改图书部分<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳转到修改页面</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toUpdatePage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdatePage</span><span class="params">(Model model,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    Books book = booksServiceImpl.queryBookById(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;book&quot;</span>, book);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;updatePage&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改图书</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateBook</span><span class="params">(Books books)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;updateBook==&gt;&quot;</span> + books);</span><br><span class="line">    booksServiceImpl.updateBook(books);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBooks&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写修改图书页面updatePage.jsp<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;修改图书信息&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;%--清除浮动--%&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;%--栅格系统，将屏幕等分成<span class="number">12</span>列，<span class="number">12</span>列是满屏，如果不想满屏，可以下雨<span class="number">12</span>列,md是中等屏幕，ms是小屏幕--%&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;%--页面头部--%&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;&lt;small&gt;修改图书&lt;/small&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">        &lt;%--修改图书失败，没有传bookID，bookID默认为<span class="number">0</span>，没有默认为<span class="number">0</span>的这本书，增加隐藏域将bookID传过去--%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;$&#123;book.bookID&#125;&quot;</span> name=<span class="string">&quot;bookID&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label&gt;书籍名称&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> name=<span class="string">&quot;bookName&quot;</span> value=<span class="string">&quot;$&#123;book.bookName&#125;&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label&gt;书籍数量&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> name=<span class="string">&quot;bookCount&quot;</span> value=<span class="string">&quot;$&#123;book.bookCount&#125;&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label&gt;书籍简介&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> name=<span class="string">&quot;detail&quot;</span> value=<span class="string">&quot;$&#123;book.detail&#125;&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> value=<span class="string">&quot;确定修改&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>编写删除图书部分<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除图书</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/deleteBook/&#123;bookId&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(<span class="meta">@PathVariable(&quot;bookId&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">       booksServiceImpl.deleteBookById(id);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBooks&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>配置tomcat服务器，启动tomcat服务器进行测试！</li>
</ol>
<h3 id="扩展：通过书名查询图书功能"><a href="#扩展：通过书名查询图书功能" class="headerlink" title="扩展：通过书名查询图书功能"></a>扩展：通过书名查询图书功能</h3><ol>
<li>BooksMapper : <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    通过书名查询图书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookByName</span><span class="params">(String bookName)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>BooksMapper.xml : <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">    select * from books where bookName=#&#123;bookName&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>BooksService : <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过书名查询图书</span></span><br><span class="line"><span class="function">Books <span class="title">queryBookByName</span><span class="params">(String bookName)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>BooksServiceImpl : <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Books <span class="title">queryBookByName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksMapper.queryBookByName(bookName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>BooksController : <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过名称查询图书</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryBookByName&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryBookByName</span><span class="params">(String bookName, Model model)</span></span>&#123;</span><br><span class="line">        Books book = booksServiceImpl.queryBookByName(bookName);</span><br><span class="line">        System.out.println(<span class="string">&quot;queryBookByName==&gt;&quot;</span> + book);</span><br><span class="line">        ArrayList&lt;Books&gt; books= <span class="keyword">new</span> ArrayList&lt;Books&gt;();</span><br><span class="line">        books.add(book);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;listBook&quot;</span>, books);</span><br><span class="line">        <span class="keyword">if</span> (book == <span class="keyword">null</span>)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;没有这本书哦&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;allBooks&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>修改allBooks.jsp页面（已在上面编写的allBooks.jsp页面进行修改）</li>
<li>启动tomcat进行测试</li>
</ol>
<h3 id="项目的注意点"><a href="#项目的注意点" class="headerlink" title="项目的注意点"></a>项目的注意点</h3><ol>
<li><p>没有在Project Structure–&gt;Artifacts下项目中添加lib目录，导致<br>出现org.apache.catalina.core.StandardContext.filterStart 启动过滤器异常<br>或者找不到类的错误，导致Tomcat服务器启动失败后者项目运行出现错误</p>
</li>
<li><p>在mybatis中为某个包下的所有类其别名，是在mybatis-config.xml中用<br> package标签，如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.tSmile.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>mapper接口的mapper.xml文件记得要绑定命名空间</p>
</li>
<li><p>在web.xml中配置dispatcherServlet时，在初始化dispatcherServlet时<br> 要加载总的spring配置文件，这样才能将所有文件连接起来，才能调用<br> 各个文件总的东西，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="项目的目录结构"><a href="#项目的目录结构" class="headerlink" title="项目的目录结构"></a>项目的目录结构</h3><p><img src="/posts/91794a99/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg"></p>
<hr>
<p>本文是观看了B站中狂神说的视频，并根据其笔记所做的笔记—-侵权删<br>原文地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg%3D%3D&amp;chksm=</span><br><span class="line">ce6104c7f9168dd155d2d1db252f0717a4bdbe4189c388a4e6cff22282664d65f3093de30a88&amp;idx=</span><br><span class="line">1&amp;mid=2247484004&amp;scene=21&amp;sn=cef9d881d0a8d7db7e8ddc6a380a9a76#wechat_redirect</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>使用json字符串进行数据传输</title>
    <url>/posts/b4232daa/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文描述了json数据交换格式，json字符串和JavaScript对象的转换，在项目中使用json的转换和对应的测试</p>
<span id="more"></span>
<h3 id="什么是json"><a href="#什么是json" class="headerlink" title="什么是json?"></a>什么是json?</h3><p>json是一种轻量级的数据交换格式。</p>
<p>json格式：{“key1” : “value1”, “key2” : “value2”}</p>
<h3 id="javaScript对象和json字符串的转换"><a href="#javaScript对象和json字符串的转换" class="headerlink" title="javaScript对象和json字符串的转换"></a>javaScript对象和json字符串的转换</h3><p>在JavaScript中，一切皆对象，所以在JavaScript中一切都可以转换成json字符串<br>JavaScript对象的格式：{key1 : “value1”, key2 : “value2”}</p>
<ol>
<li>JavaScript对象转换成json字符串<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var json = JSON.stringify(&#123;key1 : &quot;value1&quot;, key2 : &quot;value2&quot;&#125;)</span><br></pre></td></tr></table></figure></li>
<li>json字符串转换成JavaScript对象<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = JSON.parse(&#123;&quot;key1&quot; : &quot;value1&quot;, &quot;key2&quot; : &quot;value2&quot;&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="json测试"><a href="#json测试" class="headerlink" title="json测试"></a>json测试</h3><ol>
<li>导入json相关jar包<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!--导入jackjson依赖或者阿里的fastjson依赖其中一个即可，此处使用jackjson演示--&gt;</span><br><span class="line">        &lt;!--导入jackjson依赖--&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.13.0-rc2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--导入阿里的fastjson依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.78&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--导入lombok--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.16&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li>
<li>配置web.xml文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--1.注册dispatcherServlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;!--所有请求都会被springmvc拦截 --&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置springnvc字符集过滤器来解决乱码问题--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></li>
<li>在resource包下创建springMVC-servlet.xml配置文件，并进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.tSmile.controller&quot;/&gt;</span><br><span class="line">    &lt;!--启动不处理静态资源,即过滤掉HTML、css、视频、图片等静态资源--&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">    &lt;!--启动映射处理器和适配器处理器--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--springmvc解决json乱码问题的配置--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven&gt;</span><br><span class="line">        &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">                &lt;constructor-arg value=&quot;UTF-8&quot;/&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;objectMapper&quot;&gt;</span><br><span class="line">                    &lt;bean class=&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;</span><br><span class="line">                        &lt;property name=&quot;failOnEmptyBeans&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">                    &lt;/bean&gt;</span><br><span class="line">                &lt;/property&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/mvc:message-converters&gt;</span><br><span class="line">    &lt;/mvc:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 视图解析器 --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">          id=&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 前缀 --&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</span><br><span class="line">        &lt;!-- 后缀 --&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>在WEB-INF目录下创建jsp目录，然后在jsp目录下创建test.jsp<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>在pojo包下创建一个User类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在controller包下创建一个UserController类<ol>
<li>如果要使用@Controller和@RequestMapping搭配，那么方法上除了要加@RequestMapping外，还要使用@ResponseBody<br>这个注解，那么这个方法就不会经过视图解析器的解析，直接将json字符串返回给原来的页面，这个注解搭配@Controller使用，<br>加上了@ResponseBody的方法不走视图解析器，没有加的方法走视图解析器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class JsonController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/j1&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String json1() throws JsonProcessingException &#123;</span><br><span class="line">        //创建一个user对象</span><br><span class="line">        User user = new User(&quot;张无忌&quot;,&quot;男&quot;,34);</span><br><span class="line">        /*创建一个objectMapping对象，调用其writeValueAsString()</span><br><span class="line">        方法将对象转换成json格式的字符串*/</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        String jsons = objectMapper.writeValueAsString(user);</span><br><span class="line">        return jsons;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>类上使用@RestController这个注解以下的所有方法都不会走视图解析器，直接将json字符串返回给原来<br>的页面，不会进行页面转发或者重定向,@RestController搭配@RequestMapping搭配使用，即@RestController搭配<br>会经过视图解析器的注解使用，就是也可以搭配postMapping，GetMapping等使用。<br>如果使用@Controller和@RequestMapping搭配使用，那么就会走视图解析器，就会报404找不到页面的错误，<br>因为会对json字符串进行拼接，拼接后去找对应的jsp页面，这自然是找不到的 。一般使用@RestController搭配@RequestMapping使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping</span><br><span class="line">public class JsonController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/j1&quot;)</span><br><span class="line">    public String json1() throws JsonProcessingException &#123;</span><br><span class="line">        //创建一个user对象</span><br><span class="line">        User user = new User(&quot;张无忌&quot;,&quot;男&quot;,34);</span><br><span class="line">        /*创建一个objectMapping对象，调用其writeValueAsString()</span><br><span class="line">        方法将对象转换成json格式的字符串*/</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        String jsons = objectMapper.writeValueAsString(user);</span><br><span class="line">        return jsons;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>objectMapper解析后的默认时间格式为时间戳，即从1970年到现在的毫秒数。以下是使用纯java的方法<br>对时间进行格式化<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/j2&quot;)</span><br><span class="line">    public String json2() throws JsonProcessingException &#123;</span><br><span class="line">        Date date = new Date();</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        String jsons = objectMapper.writeValueAsString(sdf.format(date));</span><br><span class="line">        return jsons;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>以下使用objectMapping来对时间进行格式化<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/j3&quot;)</span><br><span class="line">    public String json3() throws JsonProcessingException &#123;</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        //关闭objectMapping的默认时间格式</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);</span><br><span class="line">        //设置时间格式</span><br><span class="line">        objectMapper.setDateFormat(sdf);</span><br><span class="line">        Date date = new Date();</span><br><span class="line">        return objectMapper.writeValueAsString(date);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>在Util包下创建一个jsonUtil类来将转换成json字符串和转换成json字符串并格式化时间封装成工具类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class JsonUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static String getJsonString(Object object)&#123;</span><br><span class="line">        return getJsonString(object, &quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getJsonString(Object object, String date)&#123;</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(date);</span><br><span class="line">        //关闭objectMapping的默认时间格式</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);</span><br><span class="line">        //设置时间格式</span><br><span class="line">        objectMapper.setDateFormat(sdf);</span><br><span class="line">        try &#123;</span><br><span class="line">            return objectMapper.writeValueAsString(object);</span><br><span class="line">        &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用转换json字符串并格式化时间工具类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/j4&quot;)</span><br><span class="line">    public String json4() throws JsonProcessingException &#123;</span><br><span class="line">        Date date = new Date();</span><br><span class="line">        return JsonUtils.getJsonString(date,&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>使用转换json字符串工具类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/j5&quot;)</span><br><span class="line">    public String json5() throws JsonProcessingException &#123;</span><br><span class="line">        List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(new User(&quot;谢逊&quot;,&quot;男&quot;,56));</span><br><span class="line">        list.add(new User(&quot;张无忌&quot;,&quot;男&quot;,34));</span><br><span class="line">        list.add(new User(&quot;张三丰&quot;,&quot;男&quot;,86));</span><br><span class="line">        list.add(new User(&quot;岳不群&quot;,&quot;男&quot;,46));</span><br><span class="line">        return JsonUtils.getJsonString(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>启动tomcat服务器进行测试</li>
</ol>
<h3 id="使用fastjson测试"><a href="#使用fastjson测试" class="headerlink" title="使用fastjson测试"></a>使用fastjson测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/j6&quot;)</span><br><span class="line">    public String json6()&#123;</span><br><span class="line">        //创建一个对象</span><br><span class="line">        User user1 = new User(&quot;张三丰&quot;, &quot;男&quot;,99);</span><br><span class="line">        User user2 = new User(&quot;张楚岚&quot;, &quot;男&quot;,21);</span><br><span class="line">        User user3 = new User(&quot;张之维&quot;, &quot;男&quot;,89);</span><br><span class="line">        User user4 = new User(&quot;张无忌&quot;, &quot;男&quot;,23);</span><br><span class="line">        List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user4);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;*******Java对象 转 JSON字符串*******&quot;);</span><br><span class="line">        String str1 = JSON.toJSONString(list);</span><br><span class="line">        System.out.println(&quot;JSON.toJSONString(list)==&gt;&quot;+str1);</span><br><span class="line">        String str2 = JSON.toJSONString(user1);</span><br><span class="line">        System.out.println(&quot;JSON.toJSONString(user1)==&gt;&quot;+str2);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n****** JSON字符串 转 Java对象*******&quot;);</span><br><span class="line">        User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">        System.out.println(&quot;JSON.parseObject(str2,User.class)==&gt;&quot;+jp_user1);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n****** Java对象 转 JSON对象 ******&quot;);</span><br><span class="line">        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">        System.out.println(&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;+jsonObject1.getString(&quot;name&quot;));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n****** JSON对象 转 Java对象 ******&quot;);</span><br><span class="line">        User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">        System.out.println(&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;+to_java_user);</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="json字符串传输乱码问题解决"><a href="#json字符串传输乱码问题解决" class="headerlink" title="json字符串传输乱码问题解决"></a>json字符串传输乱码问题解决</h3><p>在springMVC-servlet.xml配置文件中统一解决乱码问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--springmvc解决json乱码问题的配置--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven&gt;</span><br><span class="line">        &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">                &lt;constructor-arg value=&quot;UTF-8&quot;/&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;objectMapper&quot;&gt;</span><br><span class="line">                    &lt;bean class=&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;</span><br><span class="line">                        &lt;property name=&quot;failOnEmptyBeans&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">                    &lt;/bean&gt;</span><br><span class="line">                &lt;/property&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/mvc:message-converters&gt;</span><br><span class="line">    &lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>本文是观看了狂神说在B站的视频做的笔记—–侵权删</p>
]]></content>
  </entry>
  <entry>
    <title>springMVC中的数据接收和跳转-RestFul风格-字符集问题</title>
    <url>/posts/b7088771/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文记录了springMVC中接收从客户端传输的数据，调用相关业务方法后进行页面跳转，RestFul风格和使用springMVC<br>过滤器解决乱码问题</p>
<span id="more"></span>
<h3 id="数据的接收"><a href="#数据的接收" class="headerlink" title="数据的接收"></a>数据的接收</h3><h4 id="基本数据类型的接收"><a href="#基本数据类型的接收" class="headerlink" title="基本数据类型的接收"></a>基本数据类型的接收</h4><ol>
<li><p>当方法参数没有添加@RequestParam()注释时，参数可以直接获取和方法参数同名的请求<br>过来的参数，如果请求参数和方法不同名，则无法获取到参数，就会自动为方法的参数赋值为null<br>然后跳转到对应的页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/t1&quot;)</span><br><span class="line">    public String test01(String username, Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,username);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当方法的参数添加了@RequestParam()注释，那么请求的参数名就要和注解的参数明一样，可以和方法的参数<br>明不一样请求的参数会和注解中的名字相配对，配对成功后将数据赋值给注解的方法参数。</p>
<p> 用了注解后，如果请求参数名和方法参数名相同，但是和注解名不同时，页面跳转失败，出现400错误，<br>程序不执行，也不会给方法的同名参数赋值。</p>
<p> 推荐使用注解方式，无论请求参数名和方法参数名相不相同，基本数据类型都写上注解，这样就能避免参数<br>不对都可以进行页面跳转。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/t1&quot;)</span><br><span class="line">    public String test01(@RequestParam(&quot;username&quot;) String name, Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,name);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="对象数据的接收"><a href="#对象数据的接收" class="headerlink" title="对象数据的接收"></a>对象数据的接收</h4><p>如果提交的是一个对象，那么就用一个对象来接收，提交的数据会根据对象中的属性名相匹配<br>如果传的参数和对象的属性名相同，那么就会为对象的属性赋值，如果属性名不同，那么就会为对象的属性<br>赋值为默认值，如传参为：<a href="http://localhost:8080/springmvc_04/user/t2?name=yanxiao&amp;id=1&amp;age=10">http://localhost:8080/springmvc_04/user/t2?name=yanxiao&amp;id=1&amp;age=10</a></p>
<p>一般为表单提交传的参数要封装成为对象,如果使用对象的话，前端传递的参数名和对象属性名必须一致，<br>否则就是null。</p>
<p>注：提交对象，接收对象时方法中的对象参数不能使用@RequestParam注解来注解参数，否则会报400错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/t2&quot;)</span><br><span class="line">    public String test02(User user, Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,user);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="页面的跳转"><a href="#页面的跳转" class="headerlink" title="页面的跳转"></a>页面的跳转</h3><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><p>不需要注释掉视图解析器,返回字符串就是默认请求转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/t/t3&quot;)</span><br><span class="line">public String test03(Model model)&#123;</span><br><span class="line">    model.addAttribute(&quot;msg&quot;, &quot;RepostAndRedirectTest03&quot;);</span><br><span class="line">    return &quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：此处仅展示建议使用的方法</p>
<h4 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h4><p>不需要注释视图解析器，请求重定向要添加请求重定向的标志redirect</p>
<p>请求重定向不能重定向到WEB-INF下的jsp页面，因为请求转发是从服务器发起的请求，服务器发起的<br>请求是没有权限请求WEB-INF下的jsp页面的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;t/t4&quot;)</span><br><span class="line">public String test04()&#123;</span><br><span class="line">    return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：此处仅展示建议使用的方法</p>
<h3 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h3><h4 id="什么是restFul风格？"><a href="#什么是restFul风格？" class="headerlink" title="什么是restFul风格？"></a>什么是restFul风格？</h4><p>是一种资源定位和资源操作的的一种风格</p>
<h4 id="传统风格和restFul风格的对比"><a href="#传统风格和restFul风格的对比" class="headerlink" title="传统风格和restFul风格的对比"></a>传统风格和restFul风格的对比</h4><ol>
<li>传统风格：<ol>
<li>传统风格参数明显</li>
<li>传统风格通过传不同的参数，实现不同的效果</li>
<li>传统风格只有get和post两种请求方法<br>如：<a href="http://127.0.0.1/item/queryById.action?id=3">http://127.0.0.1/item/queryById.action?id=3</a> （参数id暴露了出来，通过传参实现不同的效果，默认get请求提交）</li>
</ol>
</li>
<li>restFul风格<ol>
<li>参数不明显</li>
<li>请求地址和参数可以一样，但是可以通过不一样的请求方式来实现不同的效果</li>
<li>多种提交方式POST（添加）、DELETE（删除）、PUT（更新）、GET（查询）<br>如：<a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> （get）和<a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> （delete）</li>
</ol>
</li>
</ol>
<p>参数隐藏了起来，虽然请求地址一样，但是请求方式不一样，达到不同的效果</p>
<h4 id="restFul风格的测试"><a href="#restFul风格的测试" class="headerlink" title="restFul风格的测试"></a>restFul风格的测试</h4><ol>
<li>在WEB-INF目录下创建一个jsp目录，在jsp目录下创建一个test.jsp文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建一个RestFulController进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class RestFulTest &#123;</span><br><span class="line">    //默认为get请求</span><br><span class="line">    @RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span><br><span class="line">    public String test01(@PathVariable int a, @PathVariable String b, Model model)&#123;</span><br><span class="line">        String res = a + b;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;, &quot;结果1为&quot; + res);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.DELETE)</span><br><span class="line">    public String test02(@PathVariable int a, @PathVariable String b, Model model)&#123;</span><br><span class="line">        String res = a + b;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;, &quot;结果2为&quot; + res);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //请求的简写：请求Mapping（路径和参数）如：@PostMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;),@GetMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span><br><span class="line">    @PostMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span><br><span class="line">    public String test03(@PathVariable int a, @PathVariable String b, Model model)&#123;</span><br><span class="line">        int res = a + Integer.parseInt(b);</span><br><span class="line">        model.addAttribute(&quot;msg&quot;, &quot;结果1为&quot; + res);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建一个form.jsp文件，在文件中创建一个表单，修改表单的提交方式对各种提交方式进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;form01&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;/springmvc_04/add/1/2&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用springMVC过滤器解决乱码问题"><a href="#使用springMVC过滤器解决乱码问题" class="headerlink" title="使用springMVC过滤器解决乱码问题"></a>使用springMVC过滤器解决乱码问题</h3><p>在web.xml中配置一个过滤器解决乱码问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--配置spring的字符集过滤器--&gt;</span><br><span class="line">   &lt;filter&gt;</span><br><span class="line">       &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">       &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;!--字符集设置为utf-8--&gt;</span><br><span class="line">           &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">           &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">       &lt;/init-param&gt;</span><br><span class="line">   &lt;/filter&gt;</span><br><span class="line">   &lt;filter-mapping&gt;</span><br><span class="line">       &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">       &lt;!--过滤所有资源，包括jsp页面--&gt;</span><br><span class="line">       &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>本文是观看了狂神说在B站的视频做的笔记—–侵权删</p>
]]></content>
  </entry>
  <entry>
    <title>第一个springMVC程序</title>
    <url>/posts/b6a2437a/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h4 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h4><p>第一个springMVC程序包含了要导入的依赖，没有使用springMVC时的程序，没有使用springMVC注解的程序，使用<br>springMVC注解的程序，tomcat的使用，是否使用springMVC的对比和创建springMVC模块的注意点。</p>
<span id="more"></span>
<h3 id="1、在项目中导入依赖"><a href="#1、在项目中导入依赖" class="headerlink" title="1、在项目中导入依赖"></a>1、在项目中导入依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--导入依赖--&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.18.16&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2、没有使用springMVC时的程序"><a href="#2、没有使用springMVC时的程序" class="headerlink" title="2、没有使用springMVC时的程序"></a>2、没有使用springMVC时的程序</h3><ol>
<li>创建一个servlet程序<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        System.out.println(&quot;进入了servlet程序&quot;);</span><br><span class="line">        //1、获取参数</span><br><span class="line">        String method = req.getParameter(&quot;method&quot;);</span><br><span class="line">        if (&quot;add&quot;.equals(method))&#123;</span><br><span class="line">            req.getSession().setAttribute(&quot;msg&quot;,&quot;调用了add方法&quot;);</span><br><span class="line">        &#125;else if (&quot;delete&quot;.equals(method))&#123;</span><br><span class="line">            req.getSession().setAttribute(&quot;msg&quot;,&quot;调用了delete方法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //2、调用业务层</span><br><span class="line"></span><br><span class="line">        //3、请求转发或重定向</span><br><span class="line">        req.getRequestDispatcher(&quot;/WEB-INF/jsp/hello.jsp&quot;).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在web.xml中配置servlet<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;helloServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.yanxiao.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;helloServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li>
<li>在WEB-INF目录下创建一个jsp目录，在jsp目录下创建一个hello.jsp<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>在index.jsp中创建一个表单<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/springmvc_01_servlet/hello&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;method&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li>
<li>启动Tomcat服务器测试</li>
</ol>
<h3 id="3、没有使用注解的springMVC时程序"><a href="#3、没有使用注解的springMVC时程序" class="headerlink" title="3、没有使用注解的springMVC时程序"></a>3、没有使用注解的springMVC时程序</h3><ol>
<li>配置web.xml文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--1.注册DispatcherServlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;!--启动级别-1--&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br><span class="line">    &lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li>
<li>在resource目录下创建一个springMVC-servlet.xml文件，并进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--添加处理器映射器:根据请求url查找Handler--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;</span><br><span class="line">    &lt;!--添加处理器适配器:按照特定的规则去执行Handler--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;</span><br><span class="line">    &lt;!--视图解析器:DispatcherServlet给他的ModelAndView</span><br><span class="line">        1、获取ModelAndView的数据</span><br><span class="line">        2、解析ModelAndView中的视图名字</span><br><span class="line">        3、拼接视图，/WEB-INF/jsp/hello.jsp，然后根据拼好的视图路径找到对应的视图</span><br><span class="line">        4、在hello.jsp中显示ModelAndView中保存的视图</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id=&quot;InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;!--前缀--&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</span><br><span class="line">        &lt;!--后缀--&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建Controller类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HelloController implements Controller &#123;</span><br><span class="line">    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">        //创建ModelAndView 模型和视图</span><br><span class="line">        ModelAndView mv = new ModelAndView();</span><br><span class="line">        String method = httpServletRequest.getParameter(&quot;method&quot;);</span><br><span class="line">        //封装对象，放在ModelAndView中。Model</span><br><span class="line">        mv.addObject(&quot;msg&quot;,method);</span><br><span class="line">        //封装要跳转的视图，放在ModelAndView中</span><br><span class="line">        mv.setViewName(&quot;hello&quot;); //: /WEB-INF/jsp/hello.jsp</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>将Controller注册到spring容器中,即在springMVC-servlet.xml文件中注册<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--创建HelloController对象--&gt;</span><br><span class="line">   &lt;!--Handler--&gt;</span><br><span class="line">   &lt;bean id=&quot;/helloController&quot; class=&quot;com.tSmile.controller.HelloController&quot;/&gt;</span><br></pre></td></tr></table></figure></li>
<li>在WEB-INF目录下创建一个jsp目录，在jsp目录下创建一个hello.jsp<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>在index.jsp中创建一个表单<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/springmvc-02/helloController&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;method&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li>
<li>启动tomcat服务器测试</li>
</ol>
<h3 id="4、使用springMVC注解的程序"><a href="#4、使用springMVC注解的程序" class="headerlink" title="4、使用springMVC注解的程序"></a>4、使用springMVC注解的程序</h3><ol>
<li>配置web.xml文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--配置dispatcherServlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置spring的字符集过滤器--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;!--字符集设置为utf-8--&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">        &lt;!--过滤所有资源，包括jsp页面--&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></li>
<li>在resource目录下创建一个springMVC-servlet.xml文件，并进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">                        http://www.springframework.org/schema/context </span><br><span class="line">                        https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">                        http://www.springframework.org/schema/mvc </span><br><span class="line">                        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--启动注解扫描--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.tSmile.controller&quot;/&gt;</span><br><span class="line">    &lt;!--启动不处理静态资源,即过滤掉HTML、css、视频、图片等静态资源--&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">    &lt;!--启动映射处理器和适配器处理器，annotation-driven配置会自动完成</span><br><span class="line">        DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter的注入--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line">    &lt;!--创建和配置视图解析器--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id=&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;!--配置前缀和后缀--&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建Controller类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ControllerTest01 &#123;</span><br><span class="line">    @RequestMapping(&quot;/test01&quot;)</span><br><span class="line">    public String test01(Model model)&#123;</span><br><span class="line">//        System.out.println(&quot;进入了test01这个方法中&quot;);</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;ControllerTest01.test01&quot;);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(&quot;/test02&quot;)</span><br><span class="line">    public String test02(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;ControllerTest01.test02&quot;);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(&quot;/test03&quot;)</span><br><span class="line">    public String test03(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;ControllerTest01.test03&quot;);</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在WEB-INF目录下创建一个jsp目录，在jsp目录下创建一个test.jsp<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>启动tomcat服务器进行测试</li>
</ol>
<h3 id="5、启动tomcat服务器的流程"><a href="#5、启动tomcat服务器的流程" class="headerlink" title="5、启动tomcat服务器的流程"></a>5、启动tomcat服务器的流程</h3><ol>
<li>添加一个tomcat服务器</li>
</ol>
<p><img src="/posts/b6a2437a/tomcat01.jpg"><br>2. 将module（模块）添加到服务器中</p>
<p><img src="/posts/b6a2437a/tomcat02.jpg"><br>3. 配置tomcat服务器</p>
<p><img src="/posts/b6a2437a/tomcat03.jpg"><br>4. 启动tomcat服务器</p>
<p><img src="/posts/b6a2437a/tomcat04.jpg"></p>
<h3 id="6、是否使用springMVC的对比图"><a href="#6、是否使用springMVC的对比图" class="headerlink" title="6、是否使用springMVC的对比图"></a>6、是否使用springMVC的对比图</h3><p><img src="/posts/b6a2437a/%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8springMVC%E7%9A%84%E5%AF%B9%E6%AF%94.jpg"><br>简要分析：</p>
<ol>
<li>没有使用springMVC时，客户端时直接访问servlet程序，每个servlet程序都实现了HttpServlet接口，<br>但是实现接口后只有doget和dopost方法被重写，也就是调用servlet程序时只会自动执行doget或者dopost<br>方法，所以每个servlet程序只能实现一个功能，如果有多个功能只能创建多个servlet程序，就会导致<br>创建多个servlet类，这样就非常不方便，并且写代码的效率低</li>
<li>使用springMVC后，只需要创建一个Controller类，类中的每个方法就是一个功能，客户端访问时，<br>dispatcherServlet会根据请求地址找到对应的Controller中的方法进行调用，这样不仅类的数量减少，<br>而且方便简介</li>
</ol>
<h3 id="7、注解-RequestMapping"><a href="#7、注解-RequestMapping" class="headerlink" title="7、注解@RequestMapping"></a>7、注解@RequestMapping</h3><ol>
<li><p>注解@RequestMapping用于映射url地址到控制器类或者一个特定的处理方法程序，可用于类上，也可用于方法上。</p>
</li>
<li><p>直接用于方法上：可以直接通过url地址访问到这个方法，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/a&quot;)</span><br><span class="line">public void method()&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>访问这个方法的地址为：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名 / a</p>
</li>
<li><p>用于类上：要通过固定的类的路径才能访问到对应的方法，如果有不同的controller中方法的地址一样，那么<br>就需要通过类路径来区别，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/a&quot;)</span><br><span class="line">public class controller&#123;</span><br><span class="line">    @RequestMapping(&quot;/b&quot;)</span><br><span class="line">    public void method()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问这个方法的地址为：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名 /a/b</p>
</li>
</ol>
<h3 id="8、创建springMVC模块（module）时的注意点"><a href="#8、创建springMVC模块（module）时的注意点" class="headerlink" title="8、创建springMVC模块（module）时的注意点"></a>8、创建springMVC模块（module）时的注意点</h3><p>创建springMVC模块（module）时一定要创建一个lib目录，将所有导入的jar包（依赖）放到lib目录下，<br>这样在启动tomcat或者运行时才不会报找“不到相关错误”，流程如下：</p>
<ol>
<li>创建lib目录</li>
</ol>
<p><img src="/posts/b6a2437a/lib01.jpg"><br>2. 添加所有jar包</p>
<p><img src="/posts/b6a2437a/lib02.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>什么是spring-mvc</title>
    <url>/posts/10145bf3/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h3 id="什么是MVC？"><a href="#什么是MVC？" class="headerlink" title="什么是MVC？"></a>什么是MVC？</h3><ol>
<li>M：model（模型），提供要展示的数据，包含数据和行为</li>
<li>V：view（视图），负责进行模型的展示</li>
<li>C：controller（控制器），接收用户请求给模型处理，然后再将模型处理完的数据返回给视图（调度者）<span id="more"></span>
<h3 id="MVC框架的作用"><a href="#MVC框架的作用" class="headerlink" title="MVC框架的作用"></a>MVC框架的作用</h3></li>
<li>将URL地址映射到类或者类的方法上</li>
<li>封装用户提交的数据</li>
<li>处理请求，调用相关的业务处理，封装相应的数据</li>
<li>将相应的数据中部分视图的数据进行拼接，得到对应的jsp页面的路径</li>
</ol>
<h3 id="什么是springMVC？"><a href="#什么是springMVC？" class="headerlink" title="什么是springMVC？"></a>什么是springMVC？</h3><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架</p>
<h3 id="springMVC的执行原理"><a href="#springMVC的执行原理" class="headerlink" title="springMVC的执行原理"></a>springMVC的执行原理</h3><p><img src="/posts/10145bf3/springmvc%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.jpg"><br>springMVC执行流程简要分析：</p>
<p>注：dispatcherServlet是整个springMVC的控制中心，它接收用户请求的数据，然后将数据进行封装，<br>并拦截请求</p>
<ol>
<li>dispatcherServlet调用handleMapping（处理器映射器），handlerMapping根据url地址找到对应的handler</li>
<li>handlerMapping调用handlerExecution对handler进行解析</li>
<li>handlerExecution将解析好的数据返回给dispatcherServlet</li>
<li>dispatcherServlet将解析好的数据传给handlerAdapter（处理器适配器）</li>
<li>handlerAdapter按照特定的规则执行对应的handler（即Controller）</li>
<li>Controller调用service，service将数据返回给Controller</li>
<li>Controller将数据封装成model（数据模型），并将数据模型和视图逻辑名返回给handlerAdapter</li>
<li>handlerAdapter将数据模型数据模型和视图逻辑名返回给dispatcherServlet</li>
<li>dispatcherServlet调用viewResolver（视图解析器）将视图逻辑名进行解析和拼接</li>
<li>viewResolver将解析和拼接完成的结果返回给dispatcherServlet</li>
<li>dispatcherServlet根据解析完的拼接完的结果调用具体的视图</li>
<li>调用视图后将结果显示给用户</li>
</ol>
<hr>
<p>本文是观看狂神说B站视频后参考狂神说笔记写的笔记—-侵权删</p>
<p>原文地址:<br><code>https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg%3D%3D&amp;chksm=ce6104e1f9168df7f98 eea39bd8478bb5082853ec8727c9da58c894625c43d44ebd64d36e2a8&amp;idx=1&amp;mid=2247483970&amp;sc ene=21&amp;sn=352e571ee88957ce391e972344e2a3d7#wechat_redirect</code></p>
]]></content>
  </entry>
  <entry>
    <title>spring事务</title>
    <url>/posts/7d41eccf/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h3 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h3><p>事务就是将一系列的操作看成一个单元的操作，要么失败，要么成功</p>
<span id="more"></span>
<h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><ol>
<li>原子性：事务是一个不可分割的工作单位，事务中的操作要么全部成功，要么全部失败。</li>
<li>一致性：事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</li>
<li>隔离性：事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</li>
<li>持久性：一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</li>
</ol>
<h3 id="事务的开启"><a href="#事务的开启" class="headerlink" title="事务的开启"></a>事务的开启</h3><ol>
<li>将上面spring和mybatis整合的文件全部复制过来，目录如图所示：</li>
</ol>
<p><img src="/posts/7d41eccf/%E7%9B%AE%E5%BD%95.jpg"><br>2. 在UserMapper中添加方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; getUsers();</span><br><span class="line"></span><br><span class="line">    User getUserById(int id);</span><br><span class="line"></span><br><span class="line">    int addUser(User user);</span><br><span class="line"></span><br><span class="line">    int deleteUserById(int id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在UserMapperImpl中重写方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UserMapperImpl implements UserMapper&#123;</span><br><span class="line">    private SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    public void setSqlSession(SqlSessionTemplate sqlSession) &#123;</span><br><span class="line">        this.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;User&gt; getUsers() &#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        mapper.addUser(new User(8, &quot;张楚岚&quot;,&quot;123456&quot;));</span><br><span class="line">        mapper.deleteUserById(5);</span><br><span class="line">        return mapper.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User getUserById(int id) &#123;</span><br><span class="line">        return sqlSession.getMapper(UserMapper.class).getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int addUser(User user) &#123;</span><br><span class="line">        return sqlSession.getMapper(UserMapper.class).addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int deleteUserById(int id) &#123;</span><br><span class="line">        return sqlSession.getMapper(UserMapper.class).deleteUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在UserMapper.xml配置文件中进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.tSmile.mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;!--注：查全部应该返回List集合中的类型，不然会出现UnsupportedOperationException(不支持操作异常)--&gt;</span><br><span class="line">    &lt;select id=&quot;getUsers&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from `user`;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=&quot;getUserById&quot; resultType=&quot;User&quot; parameterType=&quot;_int&quot;&gt;</span><br><span class="line">        select * from `user` where `id`=#&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;insert id=&quot;addUser&quot; parameterType=&quot;User&quot;&gt;</span><br><span class="line">        insert into `user`(`id`,`name`,`password`) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        delete from user where id=#&#123;id&#125;;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li>
<li>在spring-aop.xml中配置事务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--开启spring事务管理，需要创建一个 DataSourceTransactionManager 对象--&gt;</span><br><span class="line">   &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">       &lt;constructor-arg ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--结合aop进行事务的织入--&gt;</span><br><span class="line">   &lt;!--配置事务通知--&gt;</span><br><span class="line">   &lt;tx:advice id=&quot;interceptor&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">       &lt;!--给所有的方法配置事务</span><br><span class="line">       还可以给事务配置传播方式，如propagation=&quot;REQUIRED&quot;--&gt;</span><br><span class="line">       &lt;tx:attributes&gt;</span><br><span class="line">           &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">       &lt;/tx:attributes&gt;</span><br><span class="line">   &lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--配置事务切入--&gt;</span><br><span class="line">   &lt;aop:config&gt;</span><br><span class="line">       &lt;aop:pointcut id=&quot;txPointcut&quot; expression=&quot;execution(* com.tSmile.mapper.*.*(..))&quot;/&gt;</span><br><span class="line">       &lt;aop:advisor advice-ref=&quot;interceptor&quot; pointcut-ref=&quot;txPointcut&quot;/&gt;</span><br><span class="line">   &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li>
<li>测试执行失败，事务是否回滚<br>在UserMapper.xml中删除的SQL语句改成错误的SQL语句，然后进行测试</li>
<li>测试执行成功，事务是否提交<br>在UserMapper.xml中删除的SQL语句改成正确的SQL语句，然后进行测试</li>
<li>测试代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">    UserMapper userMapperImpl = (UserMapper) context.getBean(&quot;userMapperImpl&quot;);</span><br><span class="line">    List&lt;User&gt; users = userMapperImpl.getUsers();</span><br><span class="line">    for (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>sping和mybatis整合流程</title>
    <url>/posts/4701e2f4/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h3 id="1、在模块的pom-xml中导入相关依赖和解决静态资源导出问题"><a href="#1、在模块的pom-xml中导入相关依赖和解决静态资源导出问题" class="headerlink" title="1、在模块的pom.xml中导入相关依赖和解决静态资源导出问题"></a>1、在模块的pom.xml中导入相关依赖和解决静态资源导出问题</h3><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--junit测试包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--spring包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.3.8&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--mybatis包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库驱动包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.26&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--spring操作数据库包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.3.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--面向切面（aop）包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.9.7&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- spring和mybatis整合包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--lombok--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.20&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--maven静态资源过滤问题，即解决包不存在的问题--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;!--将src/main/resources目录下的所有properties文件和xml文件导出--&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;!--将src/main/java目录下的所有properties文件和xml文件导出--&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2、在pojo包下创建一个User类"><a href="#2、在pojo包下创建一个User类" class="headerlink" title="2、在pojo包下创建一个User类"></a>2、在pojo包下创建一个User类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、在mapper包下创建UserMpper接口和UserMpper-xml文件，并进行配置"><a href="#3、在mapper包下创建UserMpper接口和UserMpper-xml文件，并进行配置" class="headerlink" title="3、在mapper包下创建UserMpper接口和UserMpper.xml文件，并进行配置"></a>3、在mapper包下创建UserMpper接口和UserMpper.xml文件，并进行配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; getUsers();</span><br><span class="line"></span><br><span class="line">    User getUserById(int id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.tSmile.mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;!--注：查全部应该返回List集合中的类型，不然会出现UnsupportedOperationException(不支持操作异常)--&gt;</span><br><span class="line">    &lt;select id=&quot;getUsers&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from `user`;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=&quot;getUserById&quot; resultType=&quot;User&quot; parameterType=&quot;_int&quot;&gt;</span><br><span class="line">        select * from `user` where `id`=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<h3 id="4、在resource包下创建mybatis-config-xml配置文件，并进行配置"><a href="#4、在resource包下创建mybatis-config-xml配置文件，并进行配置" class="headerlink" title="4、在resource包下创建mybatis-config.xml配置文件，并进行配置"></a>4、在resource包下创建mybatis-config.xml配置文件，并进行配置</h3><p>此处配置驱动如果没有创建properties外部文件，可以直接将驱动信息写在配置文件上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;properties resource=&quot;db.properties&quot;/&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;com.tSmile.pojo.User&quot; alias=&quot;User&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;!--每一个mapper.xml都要在mybatis核心配置文件中注册--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper class=&quot;com.tSmile.mapper.UserMapper&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<h3 id="5、创建MyTest类进行测试"><a href="#5、创建MyTest类进行测试" class="headerlink" title="5、创建MyTest类进行测试"></a>5、创建MyTest类进行测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test01() throws IOException &#123;</span><br><span class="line">        String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">        InputStream stream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(stream);</span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line">        for (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;=====================================&quot;);</span><br><span class="line">        User user = mapper.getUserById(3);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、在resource包下创建spring-dao-xml文件，并进行配置"><a href="#6、在resource包下创建spring-dao-xml文件，并进行配置" class="headerlink" title="6、在resource包下创建spring-dao.xml文件，并进行配置"></a>6、在resource包下创建spring-dao.xml文件，并进行配置</h3><ol>
<li>配置数据源，代替掉mybatis-config.xml中数据源的配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建sqlSessionFactory代替在代码中创建sqlSessionFactory<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--创建sqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--绑定数据源--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">        &lt;!--绑定mybatis核心文件--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>绑定mapper接口代替在mybatis-config.xml中注册接口(也可以不再这里绑定，在原来的mybatis核心文件中注册接口)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--    通过 MapperFactoryBean 将接口加入到 Spring 中--&gt;</span><br><span class="line">    &lt;!--&lt;bean id=&quot;userMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;mapperInterface&quot; value=&quot;com.tSmile.mapper.UserMapper&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--也可以使用一个MapperScannerConfigurer,它将会查找类路径下的映射器(接口)</span><br><span class="line">    并自动将它们创建成 MapperFactoryBean，就是使用这个就可以将某个包下的所有接口</span><br><span class="line">    都全部绑定（注册）进来了，不用一个一个地绑定--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.tSmile.mapper&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建sqlSession，代替在代码中使用sqlSessionFactory获取sqlSession<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--使用sqlSessionTemplate模板创建sqlSession对象--&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class="line">    &lt;!--SqlSessionTemplate只能通过构造器注入参数，因为没有set方法--&gt;</span><br><span class="line">    &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
注：这个文件几乎是固定的，所以可以将这个文件当作一个单独的配置文件，其他的注册bean可以创建<br>另外一个配置文件applicationContext.xml</li>
</ol>
<h3 id="7、在resource包下创建applicationContext-xml文件，并进行配置"><a href="#7、在resource包下创建applicationContext-xml文件，并进行配置" class="headerlink" title="7、在resource包下创建applicationContext.xml文件，并进行配置"></a>7、在resource包下创建applicationContext.xml文件，并进行配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--引入spring-dao.xml固定配置文件--&gt;</span><br><span class="line">    &lt;import resource=&quot;spring-dao.xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8、在mapper包下创建UserMapperImpl类实现UserMapper接口-并进行代码编写"><a href="#8、在mapper包下创建UserMapperImpl类实现UserMapper接口-并进行代码编写" class="headerlink" title="8、在mapper包下创建UserMapperImpl类实现UserMapper接口,并进行代码编写"></a>8、在mapper包下创建UserMapperImpl类实现UserMapper接口,并进行代码编写</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UserMapperImpl implements UserMapper&#123;</span><br><span class="line">    private SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    public void setSqlSession(SqlSessionTemplate sqlSession) &#123;</span><br><span class="line">        this.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;User&gt; getUsers() &#123;</span><br><span class="line">        return sqlSession.getMapper(UserMapper.class).getUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User getUserById(int id) &#123;</span><br><span class="line">        return sqlSession.getMapper(UserMapper.class).getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、在applicationContext-xml配置文件中注册bean"><a href="#9、在applicationContext-xml配置文件中注册bean" class="headerlink" title="9、在applicationContext.xml配置文件中注册bean"></a>9、在applicationContext.xml配置文件中注册bean</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--注册bean--&gt;</span><br><span class="line">&lt;bean id=&quot;userMapperImpl&quot; class=&quot;com.tSmile.mapper.UserMapperImpl&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;sqlSession&quot; ref=&quot;sqlSession&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10、在MyTest测试类中进行测试"><a href="#10、在MyTest测试类中进行测试" class="headerlink" title="10、在MyTest测试类中进行测试"></a>10、在MyTest测试类中进行测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">    UserMapper userMapper = (UserMapper) context.getBean(&quot;userMapperImpl&quot;);</span><br><span class="line">    List&lt;User&gt; users = userMapper.getUsers();</span><br><span class="line">    for (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最后的mybatis-config-xml核心配置文件"><a href="#最后的mybatis-config-xml核心配置文件" class="headerlink" title="最后的mybatis-config.xml核心配置文件"></a>最后的mybatis-config.xml核心配置文件</h3><p>核心配置文件中的配置几乎全部被替代了，一般核心配置文件中就只配置一下设置setting和别名typeAlias<br>也可以把mapper的注册配置在这里，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--开启日志--&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;com.tSmile.pojo.User&quot; alias=&quot;User&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;!--每一个mapper.xml都要在mybatis核心配置文件中注册--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper class=&quot;com.tSmile.mapper.UserMapper&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<p>本文是观看了狂神说在B站的视频写的笔记——侵权删</p>
]]></content>
  </entry>
  <entry>
    <title>spring中的aop</title>
    <url>/posts/395b00e9/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h3 id="什么是aop？"><a href="#什么是aop？" class="headerlink" title="什么是aop？"></a>什么是aop？</h3><p>aop就是面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。<br>简单来说就是不改变源代码对程序进行增强和维护的编程。</p>
<span id="more"></span>

<h3 id="aop的底层原理"><a href="#aop的底层原理" class="headerlink" title="aop的底层原理"></a>aop的底层原理</h3><ol>
<li>有接口的情况，使用JDK动态代理，创建接口实现类代理对象，增强类的方法</li>
<li>没有接口的情况，使用cglib动态代理，创建子类代理对象，增强类的方法</li>
</ol>
<h3 id="aop术语"><a href="#aop术语" class="headerlink" title="aop术语"></a>aop术语</h3><ol>
<li>连接点：所有可以被增强的目标类的方法</li>
<li>切入点：实际被增强的目标类的方法</li>
<li>通知：增强类中的方法<ol>
<li>前置通知：在执行被增强方法前执行的增强</li>
<li>后置通知：在执行被增强方法后执行的增强</li>
<li>环绕通知：在执行被增强方法的前后都执行的增强</li>
<li>异常通知：执行被增强方法出现异常的通知</li>
<li>最终通知：类似于finally的执行</li>
</ol>
</li>
<li>切面：用于增强目标类的类</li>
</ol>
<h3 id="aop的理解图"><a href="#aop的理解图" class="headerlink" title="aop的理解图"></a>aop的理解图</h3><p><img src="/posts/395b00e9/aop%E5%8E%9F%E7%90%86%E5%9B%BE.jpg"></p>
<h3 id="使用spring实现aop的三种方式"><a href="#使用spring实现aop的三种方式" class="headerlink" title="使用spring实现aop的三种方式"></a>使用spring实现aop的三种方式</h3><ol>
<li>通过spring API实现</li>
<li>通过自定义类实现</li>
<li>通过注解实现</li>
</ol>
<h3 id="通过spring-API实现"><a href="#通过spring-API实现" class="headerlink" title="通过spring API实现"></a>通过spring API实现</h3><ol>
<li>在模块的pom.xml配置文件中导入aspectj依赖<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.9.7&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li>
<li>在aop包下创建两个切面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//实现后置增强接口</span><br><span class="line">public class After implements AfterReturningAdvice &#123;</span><br><span class="line">    public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;【&quot; + target.getClass().getName() + &quot;】类的【&quot; + method.getName() +</span><br><span class="line">                &quot;】方法的 后 置增强方法执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//实现前置增强接口</span><br><span class="line">public class Before implements MethodBeforeAdvice &#123;</span><br><span class="line">    /*参数：</span><br><span class="line">    * method 要执行的目标对象的方法</span><br><span class="line">    * args 要执行的目标对象的方法的参数</span><br><span class="line">    * target 要执行的目标对象*/</span><br><span class="line">    public void before(Method method, Object[] args, Object target) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;【&quot; + target.getClass().getName() + &quot;】类的【&quot; + method.getName() +</span><br><span class="line">                &quot;】方法的 前 置增强方法执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建爱你Service接口和其实现类ServiceImpl<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Service &#123;</span><br><span class="line">    void add();</span><br><span class="line">    void query();</span><br><span class="line">    void update();</span><br><span class="line">    void delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ServiceImpl implements Service &#123;</span><br><span class="line">    public void add() &#123;</span><br><span class="line">        System.out.println(&quot;增加方法执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void query() &#123;</span><br><span class="line">        System.out.println(&quot;查询方法执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;更新方法执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        System.out.println(&quot;删除方法执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建applicationContext.xml配置文件，并进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--注册bean--&gt;</span><br><span class="line">&lt;bean id=&quot;afterLog&quot; class=&quot;com.tSmile.log.After&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;beforeLog&quot; class=&quot;com.tSmile.log.Before&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;service&quot; class=&quot;com.tSmile.service.ServiceImpl&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--方式一：使用原生的spring api接口动态代理--&gt;</span><br><span class="line">&lt;!--要使用aop标签，需要引入aop命名空间--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--切入点：定位到某个方法作为通知的切入点</span><br><span class="line">    expression表达式：expression=&quot;execution(修饰符 类的全线路径.方法名(参数))--&gt;</span><br><span class="line">    &lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.tSmile.service.ServiceImpl.*(..))&quot;/&gt;</span><br><span class="line">    &lt;!--将增强方法插入到切入点之前或者之后--&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=&quot;afterLog&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=&quot;beforeLog&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建MyTest测试类，并进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test01() &#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        /*这里必须使用接口来定义这个对象的类型，因为动态代理对象时根据接口来创建代理的，如果</span><br><span class="line">        * 没有定义成接口数据类型，就无法创建对应的代理对象*/</span><br><span class="line">        Service service = (Service) context.getBean(&quot;service&quot;);</span><br><span class="line">        service.add();</span><br><span class="line">        System.out.println(&quot;*************************&quot;);</span><br><span class="line">        service.query();</span><br><span class="line">        System.out.println(&quot;*************************&quot;);</span><br><span class="line">        service.update();</span><br><span class="line">        System.out.println(&quot;*************************&quot;);</span><br><span class="line">        service.delete();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过自定义类实现"><a href="#通过自定义类实现" class="headerlink" title="通过自定义类实现"></a>通过自定义类实现</h3></li>
<li>在diy包下创建一个Diy类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Diy &#123;</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;======目标方法执行【前】的增强======&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;======目标方法执行【后】的增强======&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改配置文件applicationContext.xml，注释掉方式一（注册bean不要注释掉），配置方式二<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--方式二：使用切面进行增强，方式二没有方式一强大，因为方式一可以通过反射获取到类和切点方法的所有</span><br><span class="line">    东西，但是方式一要写多个类实现对应的接口，没有方法二简单--&gt;</span><br><span class="line">    &lt;bean id=&quot;diy&quot; class=&quot;com.tSmile.diy.Diy&quot;/&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--将diy类作为切面，即将diy中的方法作为增强功能切入到目标方法的前面或者后面--&gt;</span><br><span class="line">        &lt;aop:aspect ref=&quot;diy&quot;&gt;</span><br><span class="line">            &lt;aop:pointcut id=&quot;pointcut1&quot; expression=&quot;execution(* com.tSmile.service.ServiceImpl.*(..))&quot;/&gt;</span><br><span class="line">            &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;pointcut1&quot;/&gt;</span><br><span class="line">            &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;pointcut1&quot;/&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li>
<li>在MyTest测试类中使用原来的测试代码进行测试</li>
</ol>
<h3 id="通过注解实现"><a href="#通过注解实现" class="headerlink" title="通过注解实现"></a>通过注解实现</h3><ol>
<li>在diy包下创建一个DiyAspect类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用注解@Aspect将这个类定义成一个切面</span><br><span class="line">@Aspect</span><br><span class="line">public class DiyAspect &#123;</span><br><span class="line">    //使用@Pointcut注解将切入点抽取出来</span><br><span class="line">    @Pointcut(value = &quot;execution(* com.tSmile.service.ServiceImpl.*(..))&quot;)</span><br><span class="line">    public void pointDemo()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Before(value = &quot;pointDemo()&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;=====执行目标方法【前】的方法执行了=====&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(value = &quot;pointDemo()&quot;)</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;=====执行目标方法【后】的方法执行了=====&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Around(value = &quot;pointDemo()&quot;)</span><br><span class="line">    public void around(ProceedingJoinPoint pj) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;=====执行目标方法【前】的【around】方法执行了=====&quot;);</span><br><span class="line">        //执行目标方法</span><br><span class="line">        /*也可以使用pj来获取有关目标方法的信息</span><br><span class="line">        * 如：获取切入点方法所在的目标类</span><br><span class="line">        Object target = pj.getTarget();*/</span><br><span class="line">        pj.proceed();</span><br><span class="line">        System.out.println(&quot;=====执行目标方法【后】的【around】方法执行了=====&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改配置文件applicationContext.xml，注释掉方式二（注册bean不要注释掉），配置方式三<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--方式三：使用注解进行aop切面编程--&gt;</span><br><span class="line">    &lt;bean id=&quot;diyAspect&quot; class=&quot;com.tSmile.diy.DiyAspect&quot;/&gt;</span><br><span class="line">    &lt;!--开启注解支持</span><br><span class="line">    属性：</span><br><span class="line">    proxy-target-class=&quot;false&quot; 默认使用JDK的动态代理</span><br><span class="line">    proxy-target-class=&quot;true&quot; 使用cglib动态代理</span><br><span class="line">    一般使用默认的JDK动态代理，所以这个属性一般不设置--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy/&gt;</span><br></pre></td></tr></table></figure></li>
<li>在MyTest测试类中使用原来的测试代码进行测试</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>proxy代理模式</title>
    <url>/posts/7f83caa/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h3 id="什么是代理模式？"><a href="#什么是代理模式？" class="headerlink" title="什么是代理模式？"></a>什么是代理模式？</h3><p>代理模式就是给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。——八英里</p>
<span id="more"></span>
<p>简单来说代理就是中介，中间商，下面使用客户买房，房东卖房的例子举例说明：</p>
<p><img src="/posts/7f83caa/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%A3%E7%90%86.jpg"></p>
<h3 id="为什么要使用代理？"><a href="#为什么要使用代理？" class="headerlink" title="为什么要使用代理？"></a>为什么要使用代理？</h3><ol>
<li>代理可以实现隔离的作用，当不允许客户直接访问房东时，就需要代理来作中介，通过代理间接地访问房东了</li>
<li>代理还可以增加功能，如果直接访问房东，就只能得到房东卖房的功能，但是通过代理可以不仅可以得到<br>卖房的功能，还可以得到看房，选房等各种功能，如下图：</li>
<li>代理模式可以不改变原来房东卖房（service业务层）的代码，给业务层进行增强</li>
</ol>
<p><img src="/posts/7f83caa/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8.jpg"></p>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理是一个代理类代理一个接口实现类并且同样实现了这个接口</p>
<p>静态代理在编译期就已经确定了</p>
<p>静态代理相对动态代理效率更高一下，但是静态代理的代码冗余大，如果接口实现类很多，那么静态代理<br>类也会同样增多，写代理类的代码量非常大，并且如果接口改变，那么就不仅接口实现类要改变了，代理<br>类也要相应的改变，如果代理类的数量庞大，那么要改的代码量就非常大了，效率就非常低。</p>
<p>静态代理的理解如图所示：</p>
<p><img src="/posts/7f83caa/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86.jpg"></p>
<h3 id="静态代理的演示"><a href="#静态代理的演示" class="headerlink" title="静态代理的演示"></a>静态代理的演示</h3><ol>
<li>创建Sale接口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Sale &#123;</span><br><span class="line"></span><br><span class="line">    void saleHouse();</span><br><span class="line"></span><br><span class="line">    void salePhone();</span><br><span class="line"></span><br><span class="line">    void saleTV();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建Host实现类，实现Sale接口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Host implements Sale &#123;</span><br><span class="line">    public void saleHouse() &#123;</span><br><span class="line">        System.out.println(&quot;厂家卖房子&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void salePhone() &#123;</span><br><span class="line">        System.out.println(&quot;厂家卖手机&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void saleTV() &#123;</span><br><span class="line">        System.out.println(&quot;厂家卖电视&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建Proxy代理类，实现Sale接口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Proxy implements Sale &#123;</span><br><span class="line"></span><br><span class="line">    private Host host = new Host();</span><br><span class="line">    public void saleHouse() &#123;</span><br><span class="line">        System.out.println(&quot;不改变原来卖【房子】的功能，在厂家卖【房子】后增加功能&quot;);</span><br><span class="line">        host.saleHouse();</span><br><span class="line">        System.out.println(&quot;不改变原来卖【房子】的功能，在厂家卖【房子】后增加功能&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void salePhone() &#123;</span><br><span class="line">        System.out.println(&quot;不改变原来卖【手机】的功能，在厂家卖【手机】后增加功能&quot;);</span><br><span class="line">        host.salePhone();</span><br><span class="line">        System.out.println(&quot;不改变原来卖【手机】的功能，在厂家卖【手机】后增加功能&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void saleTV() &#123;</span><br><span class="line">        System.out.println(&quot;不改变原来卖【电视】的功能，在厂家卖【电视】后增加功能&quot;);</span><br><span class="line">        host.saleTV();</span><br><span class="line">        System.out.println(&quot;不改变原来卖【电视】的功能，在厂家卖【电视】后增加功能&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建Client类，并调用Proxy的方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Proxy proxy = new Proxy();</span><br><span class="line">        System.out.println(&quot;------顾客找代理买【房子】------&quot;);</span><br><span class="line">        proxy.saleHouse();</span><br><span class="line">        System.out.println(&quot;------顾客找代理买【手机】------&quot;);</span><br><span class="line">        proxy.salePhone();</span><br><span class="line">        System.out.println(&quot;------顾客找代理买【电视】------&quot;);</span><br><span class="line">        proxy.saleTV();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理代理的创建交给了jvm动态生成</p>
<p>动态代理依靠反射来实现，代理类不需要和目标类实现同一个接口</p>
<p>动态代理中目标类要实现接口，否则无法创建代理类</p>
<p>动态代理类的理解如图所示：</p>
<p><img src="/posts/7f83caa/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.jpg"></p>
<h3 id="动态代理创建里截图"><a href="#动态代理创建里截图" class="headerlink" title="动态代理创建里截图"></a>动态代理创建里截图</h3><p>动态代理的创建理解如图所示：</p>
<p><img src="/posts/7f83caa/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg"></p>
<h3 id="动态代理创建的演示"><a href="#动态代理创建的演示" class="headerlink" title="动态代理创建的演示"></a>动态代理创建的演示</h3><ol>
<li>创建目标接口UserService接口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    void getUser();</span><br><span class="line">    void addUser();</span><br><span class="line">    void updateUser();</span><br><span class="line">    void deleteUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建目标类UserServiceImpl并实现UserService接口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;查询了一个用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addUser() &#123;</span><br><span class="line">        System.out.println(&quot;添加了一个用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void updateUser() &#123;</span><br><span class="line">        System.out.println(&quot;更新了一个用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void deleteUser() &#123;</span><br><span class="line">        System.out.println(&quot;删除了一个用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建InvocationHandlerImpl类实现InvocationHandler接口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ProxyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line">    //定义一个目标类，即代理的目标对象</span><br><span class="line">    private Object target;</span><br><span class="line">    //通过构造方法传进来一个目标对象</span><br><span class="line">    public ProxyInvocationHandler(Object target)&#123;</span><br><span class="line">        this.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    //实现了InvocationHandler接口，重写的方法</span><br><span class="line">    /*参数：</span><br><span class="line">    * 参数一：通过代理类调用方法时的代理类对象，通过这个对象就能知道那个代理在调用这个方法</span><br><span class="line">    * 参数二：代理对象调用方法时的那个方法，可通过反射获取是哪个目标对象的那个方法</span><br><span class="line">    * 参数三：调用的方法的参数*/</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        //进行功能扩展</span><br><span class="line">        methodLog(method.getName());</span><br><span class="line">        //通过反射来获取并调用目标类的方法</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        //返回调用目标类方法的结果</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    //在代理类进行扩展功能</span><br><span class="line">    public void methodLog(String method)&#123;</span><br><span class="line">        System.out.println(&quot;调用了【&quot; + method + &quot;】方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建Client类，获取动态生成的代理类，并通过代理类调用目标类的方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建目标类对象</span><br><span class="line">        UserServiceImpl service = new UserServiceImpl();</span><br><span class="line">        //创建ProxyInvocationHandler类对象来获取代理类对象，并将目标类对象传进去</span><br><span class="line">        ProxyInvocationHandler pih = new ProxyInvocationHandler(service);</span><br><span class="line">        //获取代理类对象,并强转成接口的类型</span><br><span class="line">        /*参数：</span><br><span class="line">        * 参数一：目标对象的类加载器</span><br><span class="line">        * 参数二：目标对象的实现的接口，所以目标对象一定要是实现了接口的，如果没有实现接口，那么就不能创建代理对象</span><br><span class="line">        * 参数三：实现了InvocationHandler接口的对象，通过代理类调用方法时会自动调用这个对象的invoke()方法*/</span><br><span class="line">        UserService proxy = (UserService) Proxy.newProxyInstance(userService.getClass().getClassLoader(),</span><br><span class="line">                userService.getClass().getInterfaces(), pih);</span><br><span class="line">        //通过代理类对象调用目标类对象的方法</span><br><span class="line">        /*都创建了目标类了，为什么不直接通过目标类来调用目标类的对象呢？</span><br><span class="line">        * 因为目标类的方法没有进行扩展，代理类对象中的方法进行了扩展，所以调用代理类的对象*/</span><br><span class="line">        proxy.getUser();</span><br><span class="line">        proxy.addUser();</span><br><span class="line">        proxy.updateUser();</span><br><span class="line">        proxy.deleteUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>spring注解开发</title>
    <url>/posts/1ebb9675/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h3 id="spring针对bean管理中为创建对象提供了注解"><a href="#spring针对bean管理中为创建对象提供了注解" class="headerlink" title="spring针对bean管理中为创建对象提供了注解"></a>spring针对bean管理中为创建对象提供了注解</h3><ol>
<li>@Conponent：普通的创建对象</li>
<li>@Service：建议使用在service层创建对象</li>
<li>@Controller：建议使用在controller层创建对象</li>
<li>@Repository：建议使用在mapper（dao）层创建对象<span id="more"></span></li>
</ol>
<p>注：以上四个注解的功能是一样的，可以混用，都可以用来创建bean对象，有四种方式只是为了区分不同的<br>层的对象，这样代码更加清晰</p>
<h3 id="spring注解开发流程"><a href="#spring注解开发流程" class="headerlink" title="spring注解开发流程"></a>spring注解开发流程</h3><ol>
<li>在resource包下创建applicationContext.xml配置文件，并进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开启注解支持--&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line">    &lt;!--扫描com.tSmile包(pojo、controller包的上一级目录)下的所有类--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.tSmile&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li>在pojo包下创建User类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Scope(&quot;singleton&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Value(value = &quot;张楚岚&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(value = &quot;23&quot;)</span><br><span class="line">    private int age;</span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    //补全set、get和toString方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在mapper包下创建UserMapper类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public class UserDao &#123;</span><br><span class="line">    public User getUser()&#123;</span><br><span class="line">        System.out.println(&quot;调用了userDao的getUser方法&quot;);</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在service包下创建UserService<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line">    public User getUser()&#123;</span><br><span class="line">         ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">         UserDao userDao = context.getBean(&quot;userDao&quot;, UserDao.class);</span><br><span class="line">         User user = userDao.getUser();</span><br><span class="line">         System.out.println(&quot;userService获得了userDao中的user&quot;);</span><br><span class="line">         return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在Controller包下创建UserController类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    public void login()&#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        UserService userService = context.getBean(&quot;userService&quot;, UserService.class);</span><br><span class="line">        System.out.println(userService.getUser());</span><br><span class="line">        System.out.println(&quot;用户已存在，跳转到登录成功页面&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在test/java包下创建MyTest测试类，并进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test01()&#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        UserController userController = context.getBean(&quot;userController&quot;, UserController.class);</span><br><span class="line">        System.out.println(userController);</span><br><span class="line">        System.out.println(&quot;已获取userController&quot;);</span><br><span class="line">        userController.login();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3></li>
<li>在总项目的pom.xml文件中引入依赖<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.3.8&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.3.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li>
<li>解决文件导出不存在的问题<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--在build中配置resource，来防止资源导出时遇到资源不存在问题--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;!--将src/main/resources目录下的所有properties文件和xml文件导出--&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;!--将src/main/java目录下的所有properties文件和xml文件导出--&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>spring自动装配</title>
    <url>/posts/74f3c7fc/</url>
    <content><![CDATA[<p>作者：言笑</p>
<h3 id="什么是spring自动装配？"><a href="#什么是spring自动装配？" class="headerlink" title="什么是spring自动装配？"></a>什么是spring自动装配？</h3><p>spring自动装配就是spring在容器中为某个bean寻找其依赖的bean，并将其进行注入。自动装配分为两个过程：</p>
<span id="more"></span>
<ol>
<li>组件扫描：自动扫描上下文创建的bean</li>
<li>自动装配：找到对应的bean后进行依赖注入</li>
</ol>
<h3 id="使用xml自动装配的两种方法"><a href="#使用xml自动装配的两种方法" class="headerlink" title="使用xml自动装配的两种方法"></a>使用xml自动装配的两种方法</h3><ol>
<li>autowire=”byType”：会在IOC容器中找对应类型的bean进行注入</li>
<li>autowire=”byName”会在IOC容器中找对应bean的id进行注入</li>
<li>基本数据类型还是要使用properties进行注入</li>
<li>autowire=”byType”的缺点：<br>如果IOC容器中或者bean的属性中有形同类型的bean，那么就会因为找不到对应的类型而注入失败</li>
<li>autowire=”byName”注意点：<br>如果bean的id和属性名不一致，那么就会注入失败，出现空指针异常</li>
</ol>
<h3 id="使用xml自动装配的流程"><a href="#使用xml自动装配的流程" class="headerlink" title="使用xml自动装配的流程"></a>使用xml自动装配的流程</h3><ol>
<li>在pojo包下创建cat，dog和people类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Cat &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public void shout()&#123;</span><br><span class="line">        System.out.println(&quot;喵喵喵~~~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //补全set、get和toString方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Dog &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public void shout()&#123;</span><br><span class="line">        System.out.println(&quot;汪汪汪~~~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //补全set、get和toString方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class People &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Dog dog;</span><br><span class="line">    private Cat cat;</span><br><span class="line"></span><br><span class="line">    public People() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public People(String name, Dog dog, Cat cat) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.dog = dog;</span><br><span class="line">        this.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line">    //补全set、get和toString方法</span><br></pre></td></tr></table></figure></li>
<li>创建applicationContext.xml配置文件，并在配置文件中注册bean<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;cat&quot; class=&quot;com.tSmile.pojo.Cat&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;喵星人&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.tSmile.pojo.Dog&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;汪星人&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>使用byType方法进行注入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;people01&quot; class=&quot;com.tSmile.pojo.People&quot; autowire=&quot;byType&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;张楚岚&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>使用byName方法进行注入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;people02&quot; class=&quot;com.tSmile.pojo.People&quot; autowire=&quot;byName&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;张楚岚&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    People people = context.getBean(&quot;people01&quot;, People.class);</span><br><span class="line">    System.out.println(people);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void test02()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    People people = context.getBean(&quot;people02&quot;, People.class);</span><br><span class="line">    System.out.println(people);</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用注解进行自动装配的两种方法"><a href="#使用注解进行自动装配的两种方法" class="headerlink" title="使用注解进行自动装配的两种方法"></a>使用注解进行自动装配的两种方法</h3><ol>
<li>方法一：在类的属性或者属性对用的set方法上加上@Autowired注解，此注解是spring的</li>
<li>方法二：在类属性上加上@Resource注解，此注解是javax扩展包下的</li>
<li>方法一和方法二的对比：<ol>
<li>方法一是使用byType的方式进行装配的，如果byType方式装配失败，那么可以使用@Qualifier(value = “xxx”)注解来使用byName来注入</li>
<li>方式二是先通过byName注入，如果byName注入失败会自动通过byType的方式注入</li>
</ol>
</li>
<li>使用注解的方式可以实现基本数据类型的注入：@Value(value = “xxx”)</li>
</ol>
<h3 id="使用注解自动装配的流程"><a href="#使用注解自动装配的流程" class="headerlink" title="使用注解自动装配的流程"></a>使用注解自动装配的流程</h3><ol>
<li>在applicationContext.xml配置文件开启注解支持<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--开启注解支持--&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br></pre></td></tr></table></figure></li>
<li>在上面创建的people类上加上自动装配的注解<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class People &#123;</span><br><span class="line">    @Value(value = &quot;张楚岚&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(value = &quot;dog&quot;)</span><br><span class="line">    private Dog dog;</span><br><span class="line">    @Resource</span><br><span class="line">    private Cat cat;</span><br><span class="line">    //以下构造方法，set等方法此处省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在applicationContext.xml配置文件中注册bean<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;people03&quot; class=&quot;com.tSmile.pojo.People&quot;/&gt;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test03()&#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    People people = context.getBean(&quot;people03&quot;, People.class);</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">    System.out.println(people);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>spring依赖注入</title>
    <url>/posts/c912cea3/</url>
    <content><![CDATA[<h4 id="作者：言笑"><a href="#作者：言笑" class="headerlink" title="作者：言笑"></a>作者：言笑</h4><h3 id="一、什么是依赖注入？"><a href="#一、什么是依赖注入？" class="headerlink" title="一、什么是依赖注入？"></a>一、什么是依赖注入？</h3><p>创建被调用者实例的工作由Spring容器来完成，并且bean对象由spring容器来完成设置和装配</p>
<span id="more"></span>
<h3 id="二、依赖注入的测试"><a href="#二、依赖注入的测试" class="headerlink" title="二、依赖注入的测试"></a>二、依赖注入的测试</h3><ol>
<li>在pojo包下创建Adress和Student类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Address &#123;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Address&#123;&quot; +</span><br><span class="line">                &quot;address=&#x27;&quot; + address + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Address address;</span><br><span class="line">    private String[] books;</span><br><span class="line">    private List&lt;String&gt; hobbies;</span><br><span class="line">    private Map&lt;String, String&gt; card;</span><br><span class="line">    private Set&lt;String&gt; games;</span><br><span class="line">    private Properties info;</span><br><span class="line">    private String wife;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, Address address, String[] books, </span><br><span class="line">    List&lt;String&gt; hobbies, Map&lt;String, String&gt; card, Set&lt;String&gt; games, </span><br><span class="line">    Properties info, String wife) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.address = address;</span><br><span class="line">        this.books = books;</span><br><span class="line">        this.hobbies = hobbies;</span><br><span class="line">        this.card = card;</span><br><span class="line">        this.games = games;</span><br><span class="line">        this.info = info;</span><br><span class="line">        this.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line">    //并创建对应的set和get方法和toString方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在resource包下创建一个applicationContext.xml配置文件,并使用set方法进行依赖注入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id=&quot;address&quot; class=&quot;com.tSmile.pojo.Address&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;address&quot; value=&quot;佛山&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;student&quot; class=&quot;com.tSmile.pojo.Student&quot;&gt;</span><br><span class="line">        &lt;-- 常量注入 --&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;张楚岚&quot;/&gt;</span><br><span class="line">        &lt;-- 引用数据类型注入 --&gt;</span><br><span class="line">        &lt;property name=&quot;address&quot; ref=&quot;address&quot;/&gt;</span><br><span class="line">        &lt;-- 数组注入 --&gt;</span><br><span class="line">        &lt;property name=&quot;books&quot;&gt;</span><br><span class="line">            &lt;array&gt;</span><br><span class="line">                &lt;value&gt;红楼梦&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;西游记&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;三国演义&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;水浒传&lt;/value&gt;</span><br><span class="line">            &lt;/array&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;-- map集合注入 --&gt;</span><br><span class="line">        &lt;property name=&quot;card&quot;&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=&quot;身份证&quot; value=&quot;1234567890&quot;/&gt;</span><br><span class="line">                &lt;entry key=&quot;电话卡&quot; value=&quot;12345678910&quot;/&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;-- set集合注入 --&gt;</span><br><span class="line">        &lt;property name=&quot;games&quot;&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;value&gt;吃鸡&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;王者荣耀&lt;/value&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;-- list集合注入 --&gt;</span><br><span class="line">        &lt;property name=&quot;hobbies&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;看电影&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;敲代码&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;打游戏&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;-- properties注入 --&gt;</span><br><span class="line">        &lt;property name=&quot;info&quot;&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key=&quot;性别&quot;&gt;男&lt;/prop&gt;</span><br><span class="line">                &lt;prop key=&quot;年龄&quot;&gt;23&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;-- null值注入 --&gt;</span><br><span class="line">        &lt;property name=&quot;wife&quot;&gt;</span><br><span class="line">            &lt;null/&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li>在test/java包下创建MyTest测试类进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01() &#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">    Student student = (Student) context.getBean(&quot;student&quot;);</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、扩展1：p命名空间和c命名空间"><a href="#三、扩展1：p命名空间和c命名空间" class="headerlink" title="三、扩展1：p命名空间和c命名空间"></a>三、扩展1：p命名空间和c命名空间</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ol>
<li>p和c命名空间，要导入xml约束</li>
<li>p命名空间相当于set注入的简化，即property的简化操作</li>
<li>c命名空间相当于有参构造注入的简化</li>
</ol>
<h4 id="p和c命名空间测试"><a href="#p和c命名空间测试" class="headerlink" title="p和c命名空间测试"></a>p和c命名空间测试</h4><ol>
<li>在pojo包下创建User类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    //生成对应的set和get方法</span><br></pre></td></tr></table></figure></li>
<li>在applicationContext.xml配置文件中进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;user1&quot; class=&quot;com.tSmile.pojo.User&quot; p:name=&quot;张三丰&quot; p:age=&quot;99&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;user2&quot; class=&quot;com.tSmile.pojo.User&quot; c:name=&quot;张无忌&quot; c:age=&quot;33&quot;/&gt;</span><br></pre></td></tr></table></figure></li>
<li>在MyTest测试类中进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testP02() &#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">    User user1 = context.getBean(&quot;user1&quot;, User.class);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void testC03() &#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">    User user2 = context.getBean(&quot;user2&quot;, User.class);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="四、扩展2：单例模式和原型模式"><a href="#四、扩展2：单例模式和原型模式" class="headerlink" title="四、扩展2：单例模式和原型模式"></a>四、扩展2：单例模式和原型模式</h3><h4 id="单例模式（singleton）"><a href="#单例模式（singleton）" class="headerlink" title="单例模式（singleton）"></a>单例模式（singleton）</h4><ol>
<li>只创建一个bean对象，并且每次从容器中获取的都是同一个对象</li>
<li>bean对象的创建是在加载配置文件时就创建了</li>
<li>spring默认单例模式，一般使用单例模式</li>
</ol>
<h4 id="原型模式（prototype）"><a href="#原型模式（prototype）" class="headerlink" title="原型模式（prototype）"></a>原型模式（prototype）</h4><ol>
<li>每次从容器中获取的对象都不是同一个对象</li>
<li>bean对象的创建是在执行getBean方法时创建的</li>
</ol>
<h4 id="对单例模式和原型模式进行测试"><a href="#对单例模式和原型模式进行测试" class="headerlink" title="对单例模式和原型模式进行测试"></a>对单例模式和原型模式进行测试</h4><ol>
<li>在applicationContext.xml配置文件中进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;user3&quot; class=&quot;com.tSmile.pojo.User&quot; p:name=&quot;张三丰&quot; p:age=&quot;99&quot; scope=&quot;singleton&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;user4&quot; class=&quot;com.tSmile.pojo.User&quot; c:name=&quot;张无忌&quot; c:age=&quot;33&quot; scope=&quot;prototype&quot;/&gt;</span><br></pre></td></tr></table></figure></li>
<li>在MyTest测试类中进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testC04() &#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">    User user1 = context.getBean(&quot;user3&quot;, User.class);</span><br><span class="line">    User user2 = context.getBean(&quot;user3&quot;, User.class);</span><br><span class="line">    System.out.println(user2 == user1);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void testC04() &#123;</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">    User user1 = context.getBean(&quot;user4&quot;, User.class);</span><br><span class="line">    User user2 = context.getBean(&quot;user4&quot;, User.class);</span><br><span class="line">    System.out.println(user2 == user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>ioc原理及spring快速上手</title>
    <url>/posts/db9e5318/</url>
    <content><![CDATA[<h4 id="作者：言笑"><a href="#作者：言笑" class="headerlink" title="作者：言笑"></a>作者：言笑</h4><h3 id="一、什么是spring？"><a href="#一、什么是spring？" class="headerlink" title="一、什么是spring？"></a>一、什么是spring？</h3><p>spring是一个轻量级的控制反转（ioc）和面向切面（aop）的框架（容器）。</p>
<span id="more"></span>
<h4 id="ioc"><a href="#ioc" class="headerlink" title="ioc"></a>ioc</h4><p>将原来由程序员创建，管理对象的权力交由第三方进行创建和管理。</p>
<p>如下为程序员创建、管理和第三方spring创建、管理的原理图：</p>
<p><img src="/posts/db9e5318/ioc%E5%8E%9F%E7%90%86%E5%9B%BE.jpg"></p>
<h4 id="aop"><a href="#aop" class="headerlink" title="aop"></a>aop</h4><p>不改变原来的代码的逻辑对原来代码进行增强。</p>
<p>如下为aop的原理图：</p>
<p><img src="/posts/db9e5318/aop%E5%8E%9F%E7%90%86%E5%9B%BE.jpg"></p>
<h3 id="二、spring快速上手"><a href="#二、spring快速上手" class="headerlink" title="二、spring快速上手"></a>二、spring快速上手</h3><ol>
<li>在pojo包下创建User类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public User() &#123;</span><br><span class="line">        System.out.println(&quot;调用了无参构造&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        System.out.println(&quot;调用了有参构造进行属性注入&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在dao包下创建UserDao接口和UserDaoImpl类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserDao &#123;</span><br><span class="line">    User getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    public User getUser() &#123;</span><br><span class="line">        User user = new User(&quot;张三丰&quot;, 99);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在service包下创建Service接口和ServiceImpl类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    User getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    public User getUser() &#123;</span><br><span class="line">        User user = userDao.getUser();</span><br><span class="line">        System.out.println(&quot;UserServiceImpl被调用了&quot;);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserDao(UserDao userDao) &#123;</span><br><span class="line">        this.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在resource包下创建applicationContext.xml配置文件，并进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;daoImpl&quot; class=&quot;com.tSmile.dao.UserDaoImpl&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;serviceImpl&quot; class=&quot;com.tSmile.service.UserServiceImpl&quot;&gt;</span><br><span class="line">        &lt;!--如果有多个daoImpl，所有的实现类对象都要在这里注册bean，想要使用哪个，直接修改</span><br><span class="line">        ref=&quot;xxx&quot;就可以了--&gt;</span><br><span class="line">        &lt;property name=&quot;userDao&quot; ref=&quot;daoImpl&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li>测试,在test/java包下创建MyTest测试类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test01()&#123;</span><br><span class="line">        /*使用了spring之后，添加实现类后只要在xml配置文件中注册，然后想调用哪个实现类</span><br><span class="line">         * 就在xml文件中修改即可，完全不用源代码，大大地降低了耦合程度*/</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        UserService serviceImpl = (UserService) context.getBean(&quot;serviceImpl&quot;);</span><br><span class="line">        User user = serviceImpl.getUser();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="三、扩展：普通数据类型的注入"><a href="#三、扩展：普通数据类型的注入" class="headerlink" title="三、扩展：普通数据类型的注入"></a>三、扩展：普通数据类型的注入</h3></li>
<li>在applicationContext.xml配置文件配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--对User中属性的注入--&gt;</span><br><span class="line">    &lt;!--通过set方法进行注入--&gt;</span><br><span class="line">    &lt;bean id=&quot;user01&quot; class=&quot;com.tSmile.pojo.User&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;张天师&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot; value=&quot;199&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--通过有参构造进行注入--&gt;</span><br><span class="line">    &lt;!--方法一：通过属性的数据名字注入,建议使用--&gt;</span><br><span class="line">    &lt;bean id=&quot;user02&quot; class=&quot;com.tSmile.pojo.User&quot;&gt;</span><br><span class="line">        &lt;constructor-arg name=&quot;name&quot; value=&quot;张怀义&quot;/&gt;</span><br><span class="line">        &lt;constructor-arg name=&quot;age&quot; value=&quot;89&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--方法二：通过属性的数据类型注入，如果出现多个同样的数据类型，那么就会出错，不建议使用--&gt;</span><br><span class="line">    &lt;bean id=&quot;user03&quot; class=&quot;com.tSmile.pojo.User&quot;&gt;</span><br><span class="line">        &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;张楚岚&quot;/&gt;</span><br><span class="line">        &lt;constructor-arg type=&quot;int&quot; value=&quot;19&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--方法三：通过参数的下标进行注入，一定要按顺序进行注入，不然会出错，不建议使用--&gt;</span><br><span class="line">    &lt;bean id=&quot;user04&quot; class=&quot;com.tSmile.pojo.User&quot;&gt;</span><br><span class="line">        &lt;constructor-arg index=&quot;0&quot; value=&quot;张太初&quot;/&gt;</span><br><span class="line">        &lt;constructor-arg index=&quot;1&quot; value=&quot;100&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>在MyTest测试类中进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test03()&#123;</span><br><span class="line">        /*测试普通类型属性注入*/</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        User user01 = (User) context.getBean(&quot;user01&quot;);</span><br><span class="line">        User user02 = (User) context.getBean(&quot;user02&quot;);</span><br><span class="line">        User user03 = (User) context.getBean(&quot;user03&quot;);</span><br><span class="line">        User user04 = (User) context.getBean(&quot;user04&quot;);</span><br><span class="line">        System.out.println(user01);</span><br><span class="line">        System.out.println(user02);</span><br><span class="line">        System.out.println(user03);</span><br><span class="line">        System.out.println(user04);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>mybatis缓存</title>
    <url>/posts/4d69af73/</url>
    <content><![CDATA[<h2 id="mybatis缓存的实现与原理"><a href="#mybatis缓存的实现与原理" class="headerlink" title="mybatis缓存的实现与原理"></a>mybatis缓存的实现与原理</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ol>
<li>什么是缓存？<br>存在内存中的临时数据就是缓存（cache）</li>
<li>为什么使用缓存？<br>减少和数据库交互的次数，减少系统的开销，提高系统的效率</li>
<li>什么数据适合使用缓存？<br>经常被访问的并且不经常改变的数据适合使用缓存<span id="more"></span>
<h4 id="mybatis中的缓存"><a href="#mybatis中的缓存" class="headerlink" title="mybatis中的缓存"></a>mybatis中的缓存</h4>mybatis系统默认定义了两个缓存，包括一级缓存和二级缓存</li>
<li>默认系统开启一级缓存，即sqlSession级别的缓存</li>
<li>二级缓存需要手动开启，是namespace级别的缓存</li>
</ol>
<h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><ol>
<li>一级缓存也叫本地缓存，在同一次会话中与mysql交互查询到的结果会被缓存到一级缓存中，如果在同一次会话中<br>查找相同的内容时，就不会到数据库中查找了，会直接从缓存中查找，然后返回结果，这样能减少与数据库交互的<br>次数，提高查询的效率。</li>
<li>一级缓存失效的情况：<ol>
<li>没有在同一个sqlSession中，即没有在同一个会话中，会导致一级缓存失败，因为每个sqlSession的<br>一级缓存是独立的</li>
<li>在同一个sqlSession中，但是查询的语句不同，也会导致一级缓存失败，因为一级缓存就是一个map，key<br>不同，找到的数据才会相同</li>
<li>在同一个sqlSession中，并且查询语句相同，但是如果在两次相同的查询中执行了增删改操作，一级<br>缓存也会失败，因为数据库中的数据被修改了，如果缓存不失效，那么缓存中的数据就会和数据库中的数据<br>不一致，导致数据的不安全</li>
<li>手动清除一级缓存后，一级缓存也会失效 </li>
</ol>
</li>
</ol>
<h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><ol>
<li>二级缓存也叫全局缓存，因为一级缓存的作用域太低，当关闭会话后，一级缓存中的数据也就被清除了，<br>但是第二个会话可能要使用到这个结果，如果和数据库交互的话，效率太低，所以诞生了二级缓存</li>
<li>二级缓存的作用域地一个名称空间下，即作用域为namespace</li>
<li>开启了二级缓存后，在关闭一级缓存后回将一级缓存中的数据保存到二级缓存中，这样其他会话查找同<br>样的结果时就能直接从二级缓存中取到了</li>
<li>二级缓存的使用步骤：<ol>
<li>在mybatis-config.xml中的settings标签中开启二级缓存：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></li>
<li>在对应的mapper.xml中配置使用二级缓存,官方文档示例<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;-- 创建一个FIFO缓存，每6秒刷新一次，缓存最多可以存对象或列表的512个引用，将缓存中的数据设置为只读 --&gt;</span><br><span class="line">&lt;cache eviction=&quot;FIFO&quot; flushInterval=&quot;6000&quot; size=&quot;512&quot; readOnly=&quot;true&quot;/&gt;</span><br><span class="line">&lt;-- 一般开启缓存什么都不设置，即 &lt;cache/&gt; 即可 --&gt;</span><br></pre></td></tr></table></figure></li>
<li>在同一个mapper中，如果将数据存到二级缓存中，不同的sqlSession都可以拿到数据</li>
</ol>
</li>
</ol>
<h4 id="缓存的执行原理图"><a href="#缓存的执行原理图" class="headerlink" title="缓存的执行原理图"></a>缓存的执行原理图</h4><p><img src="/posts/4d69af73/mybatis-%E7%BC%93%E5%AD%98%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.jpg"></p>
<p>开启了二级缓存的情况下，并且是对同一个mapper下，二级缓存才起作用</p>
<h4 id="使用第三方缓存——ehcache"><a href="#使用第三方缓存——ehcache" class="headerlink" title="使用第三方缓存——ehcache"></a>使用第三方缓存——ehcache</h4><p> 使用第三方缓存功能更加强大，对于EhCache可以到百度百科搜索相关信息,一下是EhCache的使用流程：</p>
<ol>
<li>在module中的pom.xml移入相关依赖<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-ehcache --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li>在mapper.xml中使用ehcache缓存<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;</span><br></pre></td></tr></table></figure></li>
<li>在resource资源包中创建ehcache.xml配置文件，并进行配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:noNamespaceSchemaLocation=&quot;http://ehcache.org/ehcache.xsd&quot;</span><br><span class="line">         updateCheck=&quot;false&quot;&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">   diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span><br><span class="line">   user.home – 用户主目录</span><br><span class="line">   user.dir – 用户当前工作目录</span><br><span class="line">   java.io.tmpdir – 默认临时文件路径</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;diskStore path=&quot;./tmpdir/Tmp_EhCache&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;defaultCache</span><br><span class="line">        eternal=&quot;false&quot;</span><br><span class="line">        maxElementsInMemory=&quot;10000&quot;</span><br><span class="line">        overflowToDisk=&quot;false&quot;</span><br><span class="line">        diskPersistent=&quot;false&quot;</span><br><span class="line">        timeToIdleSeconds=&quot;1800&quot;</span><br><span class="line">        timeToLiveSeconds=&quot;259200&quot;</span><br><span class="line">        memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;cache</span><br><span class="line">        name=&quot;cloud_user&quot;</span><br><span class="line">        eternal=&quot;false&quot;</span><br><span class="line">        maxElementsInMemory=&quot;5000&quot;</span><br><span class="line">        overflowToDisk=&quot;false&quot;</span><br><span class="line">        diskPersistent=&quot;false&quot;</span><br><span class="line">        timeToIdleSeconds=&quot;1800&quot;</span><br><span class="line">        timeToLiveSeconds=&quot;1800&quot;</span><br><span class="line">        memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">   defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  name:缓存名称。</span><br><span class="line">  maxElementsInMemory:缓存最大数目</span><br><span class="line">  maxElementsOnDisk：硬盘最大缓存个数。</span><br><span class="line">  eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span><br><span class="line">  overflowToDisk:是否保存到磁盘，当系统当机时</span><br><span class="line">  timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span><br><span class="line">  timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span><br><span class="line">  diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span><br><span class="line">  diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="line">  diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span><br><span class="line">  memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="line">  clearOnFlush：内存数量最大时是否清除。</span><br><span class="line">  memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span><br><span class="line">  FIFO，first in first out，这个是大家最熟的，先进先出。</span><br><span class="line">  LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span><br><span class="line">  LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="缓存测试"><a href="#缓存测试" class="headerlink" title="缓存测试"></a>缓存测试</h4><ol>
<li>复制MybatisUtils工具类，db.properties和mybatis-config.xml到这个module中对应的位置，并对mybatis-config.xml<br>进行修改</li>
<li>创建一个User的pojo类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在dao目录下创建对应的UserMapper和UserMapper.xml<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    User getUserById(int id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getUserById&quot; parameterType=&quot;_int&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">    select * from `user` where id = #&#123;id&#125;;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建测试类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test04()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        //查询后会将数据放到一级缓存中</span><br><span class="line">        User user1 = mapper.getUserById(2);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        System.out.println(&quot;===================================&quot;);</span><br><span class="line">        //再次查询就从一级缓存中获取，不走数据库了</span><br><span class="line">        User user2 = mapper.getUserById(2);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        System.out.println(&quot;====================================&quot;);</span><br><span class="line">        //当会话session提交后，会将一级缓存的数据放到二级缓存中，并清空一级缓存</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        //在同一个namespace中再次获取一个sqlSession</span><br><span class="line">        SqlSession sqlSession1 = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class);</span><br><span class="line">        //获取的数据会从二级缓存中找到，并直接返回</span><br><span class="line">        User user3 = mapper1.getUserById(2);</span><br><span class="line">        System.out.println(user3);</span><br><span class="line">        System.out.println(&quot;=====================================&quot;);</span><br><span class="line">        //要获取的数据从二级缓存中找不到，就会去这个sqlSession中的一个缓存中找数据，</span><br><span class="line">        //找不到后就到数据库中找</span><br><span class="line">        User user4 = mapper1.getUserById(3);</span><br><span class="line">        System.out.println(&quot;======================================&quot;);</span><br><span class="line">        //要获取的数据从二级缓存中找不到，就会去这个sqlSession中的一个缓存中找数据，</span><br><span class="line">        //在一级缓存中找到了数据，直接返回数据</span><br><span class="line">        User user5 = mapper1.getUserById(3);</span><br><span class="line">        System.out.println(user5);</span><br><span class="line">        sqlSession1.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>mybatis动态SQL</title>
    <url>/posts/53d38511/</url>
    <content><![CDATA[<h1 id="mybatis的动态SQL"><a href="#mybatis的动态SQL" class="headerlink" title="mybatis的动态SQL"></a>mybatis的动态SQL</h1><h3 id="作者：言笑"><a href="#作者：言笑" class="headerlink" title="作者：言笑"></a>作者：言笑</h3><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>动态SQL就是根据不同的查询条件生成不同的sql语句，它减少了sql拼接的许多麻烦，使sql拼接变得更加简单。</p>
<span id="more"></span>
<h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><ol>
<li>if：判断标签，属性test值为判断语句</li>
<li>choose、when、otherwise：多路判断标签，相当于switch标签，when标签属性test值为判断语句</li>
<li>where：代替了sql语句中的where条件判断，能够自动识别是否为第一个判断条件，如果是第一个判断条件<br>就会自动删掉拼接时的and或者or，使SQL语句保持正确</li>
<li>set：代替了更新数据时SQL语句中的set，能够自动识别是不是最后一个更新语句，如果是，就会自动删掉<br>最后的逗号，使SQL语句保持正确</li>
<li>trim：where和set是trim的封装，如where和set标签使用trim写<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br><span class="line"></span><br><span class="line">&lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure></li>
<li>foreach：常用于对集合的遍历（尤其是在构建 IN 条件语句的时候),如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;selectPostIn&quot; resultType=&quot;domain.blog.Post&quot;&gt;</span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot;</span><br><span class="line">      open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li>
<li>sql：用来提取经常重复出现的SQL片段，然后在使用的时候用include标签引用这个片段即可</li>
</ol>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li>复制mybatisUtils，da.properties和mybatis-config.xml，并对xml文件的mapper注册和包路径别名进行修改</li>
<li>创建pojo类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Blog &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String title;</span><br><span class="line">    private String author;</span><br><span class="line">    private Date createTime;</span><br><span class="line">    private int views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建BlogMapper和对应的BlogMapper.xml文件</li>
</ol>
<h4 id="sql语句的编写"><a href="#sql语句的编写" class="headerlink" title="sql语句的编写"></a>sql语句的编写</h4><p>定义BlogMapper中的方法和在BlogMapper.xml中实现这些方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface BlogMapper &#123;</span><br><span class="line"></span><br><span class="line">    int addBlog(Blog blog);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; getBlogByIf(Map map);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; getBlogByWhere(Map map);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; getBlogByChoose(Map map);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; getBlogByForeach(Map map);</span><br><span class="line"></span><br><span class="line">    int updateBlog(Map map);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.tSmile.dao.BlogMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--sql片段，将重复的SQL语句抽取出来，要是用使用include标签引用--&gt;</span><br><span class="line">    &lt;sql id=&quot;title-author-views-id&quot;&gt;</span><br><span class="line">        &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;author != null&quot;&gt;</span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;views != null&quot;&gt;</span><br><span class="line">            and views = #&#123;views&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/sql&gt;</span><br><span class="line">&lt;-- ===================================================== --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=&quot;getBlogByIf&quot; parameterType=&quot;map&quot; resultType=&quot;Blog&quot;&gt;</span><br><span class="line">        select * from blog where 1 = 1</span><br><span class="line">        &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">            and title = #&#123;title&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;author != null&quot;&gt;</span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;-- ===================================================== --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;getBlogByWhere&quot; parameterType=&quot;map&quot; resultType=&quot;Blog&quot;&gt;</span><br><span class="line">        select * from blog</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;include refid=&quot;title-author-views-id&quot;&gt;&lt;/include&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;-- ===================================================== --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--choose when 标签相当于java中的switch标签--&gt;</span><br><span class="line">    &lt;select id=&quot;getBlogByChoose&quot; resultType=&quot;Blog&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">        select * from blog</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;choose&gt;</span><br><span class="line">                &lt;when test=&quot;id != null&quot;&gt;</span><br><span class="line">                    id = #&#123;id&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when test=&quot;title != null&quot;&gt;</span><br><span class="line">                    and title = #&#123;title&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;otherwise&gt;</span><br><span class="line">                    and author = &quot;狂神说&quot;</span><br><span class="line">                &lt;/otherwise&gt;</span><br><span class="line">            &lt;/choose&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;-- ===================================================== --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=&quot;updateBlog&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">        update blog</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">                title = #&#123;title&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;author != null&quot;&gt;</span><br><span class="line">                author = #&#123;author&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;views != null&quot;&gt;</span><br><span class="line">                views = #&#123;views&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">&lt;-- ===================================================== --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--foreach的作用是遍历集合，属性collection是集合的名称，item是遍历集合里面数据的名称</span><br><span class="line">        open是遍历开始的字符，separator是集合数据的分隔符，close是遍历结束的字符--&gt;</span><br><span class="line">    &lt;select id=&quot;getBlogByForeach&quot; parameterType=&quot;map&quot; resultType=&quot;Blog&quot;&gt;</span><br><span class="line">        select * from blog</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;foreach collection=&quot;ids&quot; item=&quot;id&quot; open=&quot;and id in (&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">                #&#123;id&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在test/java目录下编写测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testIf02()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        Map&lt;String,String&gt; map = new HashMap();</span><br><span class="line">//        map.put(&quot;title&quot;,&quot;Java如此简单&quot;);</span><br><span class="line">        map.put(&quot;author&quot;,&quot;狂神说&quot;);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.getBlogByIf(map);</span><br><span class="line">        for (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testWhere03()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        HashMap&lt;String,String&gt; map = new HashMap();</span><br><span class="line">//        map.put(&quot;title&quot;,&quot;java如此简单&quot;);</span><br><span class="line">        map.put(&quot;author&quot;,&quot;狂神说&quot;);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.getBlogByWhere(map);</span><br><span class="line">        for (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testChoose04()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        HashMap&lt;String,String&gt; map = new HashMap();</span><br><span class="line">//        map.put(&quot;id&quot;,&quot;c4e7e6da27074aa5a0e313c3695c9e3b&quot;);</span><br><span class="line">        map.put(&quot;title&quot;,&quot;java如此简单&quot;);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.getBlogByChoose(map);</span><br><span class="line">        for (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testUpdate05()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        HashMap&lt;String,String&gt; map = new HashMap();</span><br><span class="line">        map.put(&quot;id&quot;, &quot;b9136b2a85ad4cd1854825bb0763a619&quot;);</span><br><span class="line">        map.put(&quot;author&quot;,&quot;言笑&quot;);</span><br><span class="line">        map.put(&quot;views&quot;,&quot;1000&quot;);</span><br><span class="line">        mapper.updateBlog(map);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testForeach06()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        HashMap&lt;String,List&gt; map = new HashMap();</span><br><span class="line">        List&lt;String&gt; ids = new ArrayList&lt;String&gt;();</span><br><span class="line">        ids.add(&quot;c4e7e6da27074aa5a0e313c3695c9e3b&quot;);</span><br><span class="line">        ids.add(&quot;5ee2cfd665134079828b1357016ab0d7&quot;);</span><br><span class="line">        map.put(&quot;ids&quot;,ids);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.getBlogByForeach(map);</span><br><span class="line">        for (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
  </entry>
  <entry>
    <title>mybatis的一对多和多对一</title>
    <url>/posts/639c4aa9/</url>
    <content><![CDATA[<h1 id="mybatis中的一对多和多对一处理"><a href="#mybatis中的一对多和多对一处理" class="headerlink" title="mybatis中的一对多和多对一处理"></a>mybatis中的一对多和多对一处理</h1><h2 id="作者：言笑"><a href="#作者：言笑" class="headerlink" title="作者：言笑"></a>作者：言笑</h2><p>一对多和多对一的现象在现实中普遍存在，并且站在不同的角度上又有不同的结果，比如：老师和学生的关系，<br>站在学生的角度去看，多个学生都是被这一个老师教的，即多个学生关联一个老师，这就是多对一的关系，而<br>站在老师的角度去看，就是一个老师教多个学生，即一个老师关联一个集合，这就是多对一的关系。</p>
<span id="more"></span>
<h2 id="多对一的处理"><a href="#多对一的处理" class="headerlink" title="多对一的处理"></a>多对一的处理</h2><p>多对一的处理方式有两种，第一种是按照查询嵌套处理，第二种是按照结果嵌套处理。<br>（因为在前面的增删改查实现里在project的pom.xml配置文件中导入了所有的依赖和解决了找不到依赖的问题<br>所以在模块的pom.xml配置文件中就不再作配置了，当然也可以将project中的配置按照需要复制到模块的配置<br>文件中，这里就不再作配置了）</p>
<h4 id="1-环境的搭建"><a href="#1-环境的搭建" class="headerlink" title="1.环境的搭建"></a>1.环境的搭建</h4><ol>
<li>创建两个pojo类，Student和Teacher<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    //这里有一个teacher属性，在数据库中是teacher表中id的外键，叫tid，这里使用teacher来作</span><br><span class="line">    这个属性是因为每个学生都需要关联一个老师，如果使用int tid来代表的话就没有任何意义了，所以</span><br><span class="line">    使用一个teacher属性来关联一个老师</span><br><span class="line">    private Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Teacher &#123;</span><br><span class="line">    //多对一的时候老师不用关联学生，所以老师的属性和数据库中的属性一样，不用改变</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在dao包里创建两个对应的mapper接口（不管有没有用的上，先创建出来，把框架搭好）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface TeacherMapper &#123;</span><br><span class="line"></span><br><span class="line">    /*这里使用注解开发，这样比较方便，但是注解开发只能做一些简单的增删改查操作，复杂的操作</span><br><span class="line">    使用注解开发实现不了，如一对多和多对一的操作，这里写这个方法仅仅是为了测试搭建的环境有没有</span><br><span class="line">    搭建好使用，也作为按查询嵌套处理中使用的方法*/</span><br><span class="line">    @Select(&quot;select * from teacher&quot;)</span><br><span class="line">    List&lt;Teacher&gt; getTeachers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface StudentMapper &#123;</span><br><span class="line"></span><br><span class="line">    //按照结果嵌套查处理取所有的学生和其对应的老师</span><br><span class="line">    List&lt;Student&gt; getStudents();</span><br><span class="line"></span><br><span class="line">    //按照查询嵌套处理获取所有的学生和其对应的老师</span><br><span class="line">    List&lt;Student&gt; getStudents2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在resource资源目录下创建和dao包路径相同的路径，并创建对应的mapper.xml配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!--命名空间绑定，绑定对应的mapper--&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.tSmile.dao.TeacherMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!--命名空间绑定，绑定对应的mapper--&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.tSmile.dao.StudentMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li>
<li>将增删改查实现中的mybatisUtils复制过来使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定义一个工具类获取sqlSessionFactory，通过sqlSessionFactory来获取sqlSession</span><br><span class="line">public class MybatisUtils &#123;</span><br><span class="line">    //提升作用域，方便下面写代码时调用</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    static &#123;</span><br><span class="line">        InputStream inputStream = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //使用mybatis获取sqlSessionFactory对象</span><br><span class="line">            String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static SqlSession getSqlSession()&#123;</span><br><span class="line">        //获取SqlSession对象</span><br><span class="line">//        openSession()方法可以有参数，如果参数为true时，将事务设置为自动提交</span><br><span class="line">        return sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>将增删改查实现中的db.properties和mybatis-config.xml文件复制过来，并改动一下mybatis-config.xml<br>文件，改动注册的mapper和包名的别名typeAlias即可。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--properties标签只能写在最前面，不能写在environment、mapper等的后面</span><br><span class="line">        并且properties标签可以在标签内加入属性配置</span><br><span class="line">        如果标签内和外部文件同时拥有相同的字段，优先执行外部文件的字段--&gt;</span><br><span class="line">    &lt;properties resource=&quot;db.properties&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">        &lt;!--这里错了没关系，只要外部文件这个字段写对了就行，因为优先获取外部文件--&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;!--设置使用日志的类型如：LOG4J日志，STDOUT_LOGGING标准日志--&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;com.tSmile.pojo.Teacher&quot; alias=&quot;Teacher&quot;/&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;com.tSmile.pojo.Student&quot; alias=&quot;Student&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;!--可以配置多个环境，但是每次执行只能选择一个环境，并且会执行default默认的环境，</span><br><span class="line">        修改默认执行环境就能改变执行环境--&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;!--每一个mapper.xml都要在mybatis核心配置文件中注册</span><br><span class="line">        注册很容易被忘记，记住，一定要注册--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper class=&quot;com.tSmile.dao.StudentMapper&quot;/&gt;</span><br><span class="line">        &lt;mapper class=&quot;com.tSmile.dao.TeacherMapper&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建一个TeacherTest测试类，测试环境的搭建有没有成功<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TeacherTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test01()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class);</span><br><span class="line">        List&lt;Teacher&gt; teachers = mapper.getTeachers();</span><br><span class="line">        for (Teacher teacher : teachers) &#123;</span><br><span class="line">            System.out.println(teacher);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-在StudentMapper-xml文件中进行按结果嵌套处理和按查询嵌套处理"><a href="#2-在StudentMapper-xml文件中进行按结果嵌套处理和按查询嵌套处理" class="headerlink" title="2.在StudentMapper.xml文件中进行按结果嵌套处理和按查询嵌套处理"></a>2.在StudentMapper.xml文件中进行按结果嵌套处理和按查询嵌套处理</h4></li>
<li>按结果嵌套处理：先将整个完整的sql语句写出来，再根据关联属性使用association关联属性标签将<br>关联的对象赋给对应的关联属性<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--按照结果嵌套处理--&gt;</span><br><span class="line">    &lt;-- 完整的查询语句 --&gt;</span><br><span class="line">    &lt;select id=&quot;getStudents&quot; resultMap=&quot;StuAndTeacher&quot;&gt;</span><br><span class="line">        select s.id sid, s.name sname, t.name tname, t.id tid</span><br><span class="line">        from student s, teacher t</span><br><span class="line">        where s.tid = t.id;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;-- 使用resultMap对字段名和属性名称不同的进行映射 --&gt;</span><br><span class="line">    &lt;resultMap id=&quot;StuAndTeacher&quot; type=&quot;Student&quot;&gt;</span><br><span class="line">        &lt;result column=&quot;sid&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;sname&quot; property=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;-- 关联对应的老师 property是属性名称 javaType是属性的数据类型 --&gt;</span><br><span class="line">        &lt;collection property=&quot;teacher&quot; javaType=&quot;Teacher&quot;&gt;</span><br><span class="line">            &lt;-- 映射对应的属性名称 --&gt;</span><br><span class="line">            &lt;result column=&quot;tname&quot; property=&quot;name&quot;/&gt;</span><br><span class="line">            &lt;result column=&quot;tid&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></li>
<li>按查询嵌套处理：先查询出所有的学生，然后将学生中的teacher属性和字段tid和根据tid查询出来的<br>老师关联起来，即两个查询通过association标签关联起来得到最终的结果<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--按照查询嵌套处理--&gt;</span><br><span class="line">    &lt;select id=&quot;getStudents2&quot; resultMap=&quot;StuAndTeacher2&quot;&gt;</span><br><span class="line">        select * from Student;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;StuAndTeacher2&quot; type=&quot;Student&quot;&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            association 关联属性标签</span><br><span class="line">            properties 属性名称</span><br><span class="line">            column 数据库中的字段名称</span><br><span class="line">            javaType 属性数据类型</span><br><span class="line">            select 关联的查询操作的id</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;association property=&quot;teacher&quot; column=&quot;tid&quot; javaType=&quot;Teacher&quot; select=&quot;getTeachers&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getTeachers&quot; resultType=&quot;Teacher&quot;&gt;</span><br><span class="line">        select * from Teacher where id=#&#123;tid&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4>创建StudentTest测试类进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class StudentTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test01()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        List&lt;Student&gt; students = mapper.getStudents();</span><br><span class="line">        for (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void test02()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        List&lt;Student&gt; students = mapper.getStudents2();</span><br><span class="line">        for (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-多对一的包目录结构"><a href="#4-多对一的包目录结构" class="headerlink" title="4.多对一的包目录结构"></a>4.多对一的包目录结构</h4><img src="/posts/639c4aa9/%E5%A4%9A%E5%AF%B9%E4%B8%80%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg"></li>
</ol>
<hr>
<h2 id="一对多的处理"><a href="#一对多的处理" class="headerlink" title="一对多的处理"></a>一对多的处理</h2><p>一对多的处理方式也有两种，第一种是按照查询嵌套处理，第二种是按照结果嵌套处理。</p>
<h4 id="1-环境的搭建-1"><a href="#1-环境的搭建-1" class="headerlink" title="1.环境的搭建"></a>1.环境的搭建</h4><p>流程和上面多对一的流程一样</p>
<ol>
<li>创建两个pojo类，Student和Teacher<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Teacher &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    /*因为是一对多的关系，所以学生属性使用一个集合来表示*/</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在dao包里创建两个对应的mapper接口（不管有没有用的上，先创建出来，把框架搭好）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface StudentMapper &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface TeacherMapper &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Teacher&gt; getTeachersById(@Param(&quot;tid&quot;) int id);</span><br><span class="line"></span><br><span class="line">    List&lt;Teacher&gt; getTeachersById2(@Param(&quot;id&quot;) int id);</span><br><span class="line"></span><br><span class="line">    List&lt;Teacher&gt; getTeachers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在resource资源目录下创建和dao包路径相同的路径，并创建对应的mapper.xml配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此处参考上面多对一的流程</span><br></pre></td></tr></table></figure></li>
<li>将增删改查实现中的mybatisUtils复制过来使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此处参考上面多对一的流程</span><br></pre></td></tr></table></figure></li>
<li>将增删改查实现中的db.properties和mybatis-config.xml文件复制过来<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此处参考上面多对一的流程</span><br></pre></td></tr></table></figure></li>
<li>在TeacherMapper.xml文件中编写SQL语句，并创建TeacherTest测试类，测试环境的搭建有没有成功<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getTeachers&quot; resultType=&quot;Teacher&quot;&gt;</span><br><span class="line">    select * from teacher;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class);</span><br><span class="line">    List&lt;Teacher&gt; teachers = mapper.getTeachersById(1);</span><br><span class="line">    for (Teacher teacher : teachers) &#123;</span><br><span class="line">        System.out.println(teacher);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-在TeacherMapper-xml文件中进行按结果嵌套处理和按查询嵌套处理"><a href="#2-在TeacherMapper-xml文件中进行按结果嵌套处理和按查询嵌套处理" class="headerlink" title="2.在TeacherMapper.xml文件中进行按结果嵌套处理和按查询嵌套处理"></a>2.在TeacherMapper.xml文件中进行按结果嵌套处理和按查询嵌套处理</h4></li>
<li>按结果嵌套处理<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getTeachersById&quot; resultMap=&quot;getTeaAndStu&quot;&gt;</span><br><span class="line">        select t.id tid,t.name tname,s.id sid,s.name sname</span><br><span class="line">        from teacher t, student s</span><br><span class="line">        where t.id=s.tid and t.id=#&#123;tid&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;getTeaAndStu&quot; type=&quot;Teacher&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;tid&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;tname&quot;/&gt;</span><br><span class="line">        &lt;-- </span><br><span class="line">            一对多时使用集合标签collection</span><br><span class="line">            properties是属性名称</span><br><span class="line">            ofType是集合中泛型的数据类型</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;collection property=&quot;students&quot; ofType=&quot;Student&quot;&gt;</span><br><span class="line">            &lt;result property=&quot;id&quot; column=&quot;sid&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;name&quot; column=&quot;sname&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;tid&quot; column=&quot;tid&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></li>
<li>按查询嵌套处理<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getTeachersById2&quot; resultMap=&quot;getTeasStu&quot;&gt;</span><br><span class="line">        select * from teacher where id=#&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;resultMap id=&quot;getTeasStu&quot; type=&quot;Teacher&quot;&gt;</span><br><span class="line">        &lt;-- </span><br><span class="line">            一对多时使用集合标签collection</span><br><span class="line">            properties是属性名称</span><br><span class="line">            javaType是属性数据类型</span><br><span class="line">            ofType是集合中泛型的数据类型</span><br><span class="line">            column是教师查询结果中的id，即教师的id</span><br><span class="line">            select是关联的查询语句的id</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;collection property=&quot;students&quot; javaType=&quot;List&quot; ofType=&quot;Student&quot; select=&quot;getStudents&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;getStudents&quot; resultType=&quot;Student&quot;&gt;</span><br><span class="line">        select * from student where tid=#&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4>在TeacherTest测试类进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test02()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class);</span><br><span class="line">    List&lt;Teacher&gt; teachers = mapper.getTeachers();</span><br><span class="line">    for (Teacher teacher : teachers) &#123;</span><br><span class="line">        System.out.println(teacher);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void test03()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class);</span><br><span class="line">    List&lt;Teacher&gt; teachers = mapper.getTeachersById2(2);</span><br><span class="line">    for (Teacher teacher : teachers) &#123;</span><br><span class="line">        System.out.println(teacher);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-一对多的包目录结构"><a href="#4-一对多的包目录结构" class="headerlink" title="4.一对多的包目录结构"></a>4.一对多的包目录结构</h4><img src="/posts/639c4aa9/%E4%B8%80%E5%AF%B9%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg"></li>
</ol>
<hr>
]]></content>
  </entry>
  <entry>
    <title>mybatis的实现</title>
    <url>/posts/89605a7d/</url>
    <content><![CDATA[<h1 id="mybatis的实现"><a href="#mybatis的实现" class="headerlink" title="mybatis的实现"></a>mybatis的实现</h1><h2 id="作者：言笑"><a href="#作者：言笑" class="headerlink" title="作者：言笑"></a>作者：言笑</h2><h3 id="什么是mybatis？"><a href="#什么是mybatis？" class="headerlink" title="什么是mybatis？"></a>什么是mybatis？</h3><ol>
<li>MyBatis 是一款优秀的持久层框架</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</li>
<li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO为数据库中的记录。<br>简单的说mybatis就是简化java中dao层（操作数据库层）的操作，让程序员在dao层编写的代码更加简单，<br>方便。<span id="more"></span>
<h3 id="创建sqlSession，实现增删改查，并进行测试的流程"><a href="#创建sqlSession，实现增删改查，并进行测试的流程" class="headerlink" title="创建sqlSession，实现增删改查，并进行测试的流程"></a>创建sqlSession，实现增删改查，并进行测试的流程</h3></li>
<li>创建一个maven项目，配置pom.xml文件，并引入mybatis等相关依赖<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--引入mybatis依赖--&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.6&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--引入mysql依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.0.21&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--引入junit依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.18.20&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"> &lt;!--在build中配置resource，来防止maven项目中资源导出时遇到资源不存在问题--&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;!--将src/main/resources目录下的所有properties文件和xml文件导出--&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">        &lt;!--将src/main/java目录下的所有properties文件和xml文件导出--&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li>
<li>在resource资源包下创建mybatis配置文件mybatis-config.xml,配置mybatis-config.xml配置文件，<br>并在相同的目录下创建对应的properties文件来写数据库的驱动信息<figure class="highlight plaintext"><figcaption><span>version</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--properties标签只能写在最前面，不能写在environment、mapper等的后面</span><br><span class="line">        并且properties标签可以在标签内加入属性配置</span><br><span class="line">        如果标签内和外部文件同时拥有相同的字段，优先执行外部文件的字段--&gt;</span><br><span class="line">    &lt;properties resource=&quot;db.properties&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">        &lt;!--这里错了没关系，只要外部文件这个字段写对了就行，因为优先获取外部文件--&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;!--为某个包下的某个类起别名来代替包路径，一般类较少时使用指定别名的方式，类较多时使用扫描包的方式--&gt;</span><br><span class="line">    &lt;!--注意：在MyBatis项目的xml配置文件里，不要使用package来指定要用的包，不然就会在log文件里产生乱码，从而打不开！</span><br><span class="line">             解决方法:typeAliases里使用typeAlias，mapper里使用class或者resource来导包。--&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!--方式一，直接指定某个包下的某个类的别名--&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;com.tSmile.pojo.User&quot; alias=&quot;User&quot;/&gt;</span><br><span class="line">        &lt;!--方式二，为某个包下的所有类起别名，默认别名是类名首字母小写，如果不想用默认别名，可以在</span><br><span class="line">            对应的类上写上注解@Aliase(别名)，就会使用这个别名</span><br><span class="line">        &lt;package name=&quot;com.tSmile.pojo&quot;/&gt;--&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;!--可以配置多个环境，但是每次执行只能选择一个环境，并且会执行default默认的环境，</span><br><span class="line">        修改默认执行环境就能改变执行环境--&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;!--每一个mapper.xml都要在mybatis核心配置文件中注册--&gt;</span><br><span class="line">    &lt;!--可以用class属性注册绑定对应的接口，也可以用resource属性注册绑定对应的xml文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;com/tSmile/dao/UserMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建getSqlSession工具类<ol>
<li>获取sqlSessionFactory对象（相当于获取jdbc中的数据库连接池）</li>
<li>获取SqlSession对象<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定义一个工具类获取sqlSessionFactory，通过sqlSessionFactory来获取sqlSession</span><br><span class="line">public class MybatisUtils &#123;</span><br><span class="line">    //提升作用域，方便下面写代码时调用</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    //静态代码块只获取一次sqlSessionFactory对象</span><br><span class="line">    static &#123;</span><br><span class="line">        InputStream inputStream = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //使用mybatis获取sqlSessionFactory对象</span><br><span class="line">            String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static SqlSession getSqlSession()&#123;</span><br><span class="line">        //获取SqlSession对象</span><br><span class="line">        return sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>创建pojo类（此处的实体类使用了lombok依赖，省略了构造方法和getter和setter方法）,注意，在数据库<br>中应有创建一个对应的表和数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line">    private int userId;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建dao接口和接口对应的配置文件，接口要和接口对应的配置文件在同一个包下，也可以将接口配置文件<br>创建在resource资源包下，但在资源包下也要创建在和接口包名一致的包名下，并且接口配置文件的文件名<br>一定要和接口的名称一致</li>
</ol>
<p>接口方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    //查询所有用户</span><br><span class="line">    List&lt;User&gt; getUserList();</span><br><span class="line"></span><br><span class="line">    //查询一个用户</span><br><span class="line">    User getUserById(int id);</span><br><span class="line"></span><br><span class="line">    //分页查询</span><br><span class="line">    List&lt;User&gt; getUserListByLimit(Map&lt;String,Integer&gt; map);</span><br><span class="line"></span><br><span class="line">    //添加一个用户</span><br><span class="line">    int insertUser(User user);</span><br><span class="line"></span><br><span class="line">    //更新一个用户</span><br><span class="line">    int updateUser(User user);</span><br><span class="line"></span><br><span class="line">    //删除一个用户</span><br><span class="line">    int deleteUserById(int id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口配置文件配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">    &lt;!--namespace是将配置文件和对应的mapper接口绑定起来--&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.tSmile.dao.UserMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>在接口配置文件中进行增删改查操作,并使用resultMap进行简单的映射操作<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--结果集映射：实体类属性和数据库字段名称不同时，将数据库</span><br><span class="line">     中的字段映射到实体类的对应的属性中,这样就不用每次在写sql语句时都要写上别名了，</span><br><span class="line">     id是在查询标签中使用的名称--&gt;</span><br><span class="line">&lt;resultMap id=&quot;userMap&quot; type=&quot;User&quot;&gt;</span><br><span class="line">        &lt;!--properties是实体类中的属性名称，column是数据库中的字段名称--&gt;</span><br><span class="line">        &lt;result property=&quot;username&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;userId&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        id与接口的方法名相同才能找到对应的方法</span><br><span class="line">        resultType是返回结果的类型</span><br><span class="line">        parameterType传入的参数类型</span><br><span class="line">        如果实体类和数据库字段名不一致，那么就需要使用结果集映射来将数据库中的字段</span><br><span class="line">        映射到对应的实体属性上，就要使用resultMap</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;select id=&quot;getUserList&quot; resultMap=&quot;userMap&quot;&gt;</span><br><span class="line">    select * from mybatis.user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=&quot;getUserById&quot; resultMap=&quot;userMap&quot;&gt;</span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.tSmile.pojo.User&quot;&gt;</span><br><span class="line">        insert into mybatis.user (`id`,`name`,`password`) values (#&#123;userId&#125;,#&#123;username&#125;,#&#123;password&#125;);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    &lt;update id=&quot;updateUser&quot; parameterType=&quot;com.tSmile.pojo.User&quot;&gt;</span><br><span class="line">        update mybatis.user set `name`=#&#123;username&#125;, `password`=#&#123;password&#125; where id=#&#123;userId&#125;;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        delete from mybatis.user where id=#&#123;userId&#125;;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        (1)在mapper的方法中传递的对象参数可以用map来代替对象存数据，然后在SQL中直接根据key取出map中的值即可（parameterType=&quot;map&quot;）</span><br><span class="line">        (2)如果使用对象传递参数的话，直接在SQL语句中取出对象的属性即可（parameterType=&quot;object&quot;）</span><br><span class="line">        (3)如果只有一个基本类型的参数，可以直接在SQL中取到，可以不用写（parameterType=&quot;int&quot;）</span><br><span class="line">        (4)如果参数有多个可以使用map将参数存起来，然后将map作为参数传进去</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!--如下为通过map来进行传参的--&gt;</span><br><span class="line">    &lt;select id=&quot;getUserListByLimit&quot; resultMap=&quot;userMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">        select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></li>
<li>进行测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UserDaoTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test01()&#123;</span><br><span class="line">        //获取sqlSession</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        //使用sqlSession对象来获取UserDao</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line">        for (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test02()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user = mapper.getUserById(3);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test03()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        int i = mapper.insertUser(new User(9, &quot;令狐冲&quot;, &quot;121212&quot;));</span><br><span class="line">        //注意：对数据库进行增删改操作都要对事务进行提交</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        System.out.println(i + &quot; 条记录插入完毕&quot;);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test04()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        mapper.updateUser(new User(4,&quot;王语嫣&quot;,&quot;123432&quot;));</span><br><span class="line">        //注意：对数据库进行增删改操作都要对事务进行提交</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test05()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        mapper.deleteUserById(9);</span><br><span class="line">        //注意：对数据库进行增删改操作都要对事务进行提交</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //在程序中使用log4j进行输出，先创建一个logger对象</span><br><span class="line">    static Logger logger = Logger.getLogger(UserDaoTest.class);</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testLog4j()&#123;</span><br><span class="line">        logger.info(&quot;info:进行了info输出&quot;);</span><br><span class="line">        logger.debug(&quot;debug:进行了debug输出&quot;);</span><br><span class="line">        logger.error(&quot;error:进行了error输出&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //sql分页查询测试</span><br><span class="line">    @Test</span><br><span class="line">    public void testLimit()&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();</span><br><span class="line">        map.put(&quot;startIndex&quot;,1);</span><br><span class="line">        map.put(&quot;pageSize&quot;,3);</span><br><span class="line">        List&lt;User&gt; users = mapper.getUserListByLimit(map);</span><br><span class="line">        for (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="以上实现流程的包目录结构"><a href="#以上实现流程的包目录结构" class="headerlink" title="以上实现流程的包目录结构"></a>以上实现流程的包目录结构</h3><img src="/posts/89605a7d/%E5%8C%85%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg"></li>
</ol>
<h3 id="创建sqlSession，实现增删改查，并进行测试的流程的原理图"><a href="#创建sqlSession，实现增删改查，并进行测试的流程的原理图" class="headerlink" title="创建sqlSession，实现增删改查，并进行测试的流程的原理图"></a>创建sqlSession，实现增删改查，并进行测试的流程的原理图</h3><p>从左边调用mapper层（即dao层）开始，一直到测试的运行原理如图所示：</p>
<p><img src="/posts/89605a7d/mybatis%E7%9A%84%E5%AE%9E%E7%8E%B0.jpg"></p>
<h3 id="mybatis核心详细执行流程图"><a href="#mybatis核心详细执行流程图" class="headerlink" title="mybatis核心详细执行流程图"></a>mybatis核心详细执行流程图</h3><p><img src="/posts/89605a7d/mybatis%E6%A0%B8%E5%BF%83%E8%AF%A6%E7%BB%86%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p>
<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//接口方法</span><br><span class="line">List&lt;User&gt; selectLike(String value);</span><br><span class="line"></span><br><span class="line">&lt;-- 配置文件查询语句 --&gt;</span><br><span class="line">&lt;select id=&quot;selectLike&quot; resultType=&quot;list&quot; parameterType=&quot;String&quot;&gt;</span><br><span class="line">    select * from mybatis.user where name like #&#123;value&#125;;</span><br><span class="line">&lt;/select&gt; </span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">List&lt;User&gt; users = mapper.selectLike(&quot;%张%&quot;);</span><br></pre></td></tr></table></figure>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//接口方法</span><br><span class="line">List&lt;User&gt; selectLike(String value);</span><br><span class="line"></span><br><span class="line">&lt;-- 配置文件查询语句 --&gt;</span><br><span class="line">&lt;select id=&quot;selectLike&quot; resultType=&quot;list&quot; parameterType=&quot;String&quot;&gt;</span><br><span class="line">    select * from mybatis.user where name like %#&#123;value&#125;%;</span><br><span class="line">&lt;/select&gt; </span><br><span class="line"></span><br><span class="line">//测试，容易引起sql注入，不建议使用</span><br><span class="line">List&lt;User&gt; users = mapper.selectLike(&quot;张&quot;);</span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">mybatis官方文档</a></p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>springmvc</title>
    <url>/posts/ba5955c9/</url>
    <content><![CDATA[<h1 id="spring-MVC原理解析笔记记录"><a href="#spring-MVC原理解析笔记记录" class="headerlink" title="spring_MVC原理解析笔记记录"></a>spring_MVC原理解析笔记记录</h1><h2 id="作者-言笑"><a href="#作者-言笑" class="headerlink" title="作者 言笑"></a>作者 言笑</h2><p>spring_mvc就是将原本的servlet程序使用实现Controller类（handler）来代替，<br>其本质上也是一个servlet程序，但是比servlet程序更加简洁。spring-mvc是在<br>handler和jsp页面中间插入一个调度者，用户发起的请求都经过这个调度者来调度，<br>找到对应的handler，并执行对应的handler，最后跳转到jsp页面。</p>
<hr>
<span id="more"></span>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>创建一个maven project，并给项目起名字为springMVC，如下图：</li>
</ol>
<p><img src="/posts/ba5955c9/1-1.jpg"></p>
<p><img src="/posts/ba5955c9/1-2.jpg"></p>
<ol start="2">
<li>创建一个maven Module，并给项目起名为springmvc-01，如下图：</li>
</ol>
<p><img src="/posts/ba5955c9/2-1.jpg"></p>
<p><img src="/posts/ba5955c9/2-2.jpg"></p>
<ol start="3">
<li>添加一个web支持，如下图：</li>
</ol>
<p>![](springmvc/3-1.jpg</p>
<p><img src="/posts/ba5955c9/3-2.jpg"></p>
<ol start="4">
<li>添加Tomcat服务器，如下图：</li>
</ol>
<p><img src="/posts/ba5955c9/4-1.jpg"></p>
<p><img src="/posts/ba5955c9/4-2.jpg"></p>
<p><img src="/posts/ba5955c9/4-3.jpg"></p>
<p><img src="/posts/ba5955c9/4-4.jpg"></p>
<p><img src="/posts/ba5955c9/4-5.jpg"></p>
<p><img src="/posts/ba5955c9/4-6.jpg"></p>
<p><img src="/posts/ba5955c9/4-7.jpg"></p>
<ol start="5">
<li>在project的pom.xml文件下添加相应的依赖，代码如下：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在project structure中为Tomcat服务器添加lib目录，然后在lib目录下添加<br>依赖，如下图：</li>
</ol>
<p><img src="/posts/ba5955c9/6-1.jpg"></p>
<p><img src="/posts/ba5955c9/6-2.jpg"></p>
<p><img src="/posts/ba5955c9/6-3.jpg"></p>
<p><img src="/posts/ba5955c9/6-4.jpg"></p>
<p><img src="/posts/ba5955c9/6-5.jpg"></p>
<p><img src="/posts/ba5955c9/6-6.jpg"></p>
<h3 id="springMVC原理图片说明"><a href="#springMVC原理图片说明" class="headerlink" title="springMVC原理图片说明"></a>springMVC原理图片说明</h3><p>如图所示：中心是dispatcherServlet，围绕在dispatcherServlet中有三个循环，1到3是<br>一个循环，4到8是一个循环，9到10是一个循环，最后是11将数据输出到jsp页面</p>
<p><img src="/posts/ba5955c9/%E5%8E%9F%E7%90%86%E5%9B%BE.jpg"></p>
<ol>
<li>循环一：客户端发送请求到dispatcherServlet中，dispatcherServlet接收到请求，<br>并用请求的地址栏的地址通过循环一来获取到实现了Controller接口的类对象（以下称为<br>handler），最后dispatcherServlet对handler对象进性解析。</li>
<li>循环二：通过解析handler的数据来执行handler对象（即执行实现Controller接口时<br>实现的handlerRequest方法），最后将视图名和保存在ModelAndView中的数据返回给<br>dispatcherServlet。</li>
<li>循环三：dispatcherServlet将视图名传给视图解析器进行视图路径的拼接，视图解析器<br>最后将视图的完整路径返回给dispatcherServlet。</li>
<li>dispatcherServlet根据完整的视图路径跳转到相应的jsp页面</li>
</ol>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><ol>
<li>配置springmvc01下的web/WEB-INF/web.xml文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置dispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联配置文件springMVC-servlet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将启动级别设为1，即和服务器一起启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        /:表示匹配所有的请求，但不包括.jsp请求</span></span><br><span class="line"><span class="comment">        /*:表示匹配所有的请求，包括.jsp请求</span></span><br><span class="line"><span class="comment">        这里使用/,因为如果使用/*的话，在找对应的handler时就会找不到，出现404页面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在springmvc01下的src/main/resources下创建springmvc-servlet.xml文件</p>
</li>
<li><p>配置springmvc-servlet.xml文件</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建中央处理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span> <span class="attr">id</span>=<span class="string">&quot;beanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span> <span class="attr">id</span>=<span class="string">&quot;simpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView</span></span><br><span class="line"><span class="comment">        1、获取ModelAndView的数据</span></span><br><span class="line"><span class="comment">        2、解析ModelAndView中的视图名字</span></span><br><span class="line"><span class="comment">        3、拼接视图，/WEB-INF/jsp/hello.jsp，然后根据拼好的视图路径找到对应的视图</span></span><br><span class="line"><span class="comment">        4、在hello.jsp中显示ModelAndView中保存的视图</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注：这个是通过映射处理器获取对应的url地址的，所以id的值中/不能少--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/helloController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tSmile.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在src/main/java下创建包com.tSmile.controller包，在包下创建handler类</li>
</ol>
<p><img src="/posts/ba5955c9/2-4-1.jpg"></p>
<p>并实现Controller接口和相应的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tSmile.Controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/11 - 11:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建视图模型对象</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//调用service层方法</span></span><br><span class="line">        String value = <span class="string">&quot;I am a super man&quot;</span>;</span><br><span class="line">        <span class="comment">//将返回值存到视图模型中</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,value);</span><br><span class="line">        <span class="comment">//跳转到页面</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在web/WEB-INF下创建jsp目录，在jsp目录下创建hello.jsp文件</li>
</ol>
<p><img src="/posts/ba5955c9/2-5-1.jpg"></p>
<p>代码如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>启动Tomcat服务器，在浏览器地址栏上输入地址：<br><code>http://localhost:8080/springmvcTest/helloController</code></li>
</ol>
<hr>
<p>注：代码结合上面的原理图来理解</p>
<hr>
<p>本文章是观看了狂神说的springMVC视频写的笔记，侵权删</p>
]]></content>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/posts/b24dd347/</url>
    <content><![CDATA[<h1 id="我的第一篇博客文章–Markdown的编写规则"><a href="#我的第一篇博客文章–Markdown的编写规则" class="headerlink" title="我的第一篇博客文章–Markdown的编写规则"></a>我的第一篇博客文章–Markdown的编写规则</h1><h2 id="作者-言笑"><a href="#作者-言笑" class="headerlink" title="作者 言笑"></a>作者 言笑</h2><p>这是一篇关于markdown文档编写规则的文章</p>
<span id="more"></span>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>使用#号开头<br>一级标题一个#<br>二级标题两个##<br>以此类推，最多六级标题<br>注：#号和标题文字之间要隔一个空格</p>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>Markdown划分段落非常简单，就是在段落前后保留一个空行即可</p>
<p>第一段文章内容</p>
<p>第二段文章内容</p>
<h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h3><blockquote>
<p>这是区块引用：如果我们需要对一段内容进行强调显示时，Markdown提供了一个特殊&gt;<br>符号&gt;(&gt;和内容之前需要空一个空格)用于段落区块引用</p>
</blockquote>
<blockquote>
<p>Markdown支持同时强调引用多个段落</p>
</blockquote>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>超链接的格式为：<br>    <code>[链接名](链接)</code></p>
<p><a href="https://www.baidu.com/?tn=40020637_14_oem_dg">百度搜索</a></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>显示网页图片,格式为：<br>    <code>![图片说明](网页图片地址)</code></p>
<p><img src="/posts/b24dd347/girl.jpg" alt="帅男孩"></p>
<p>显示本地图片</p>
<p>使用相对路径插入图片。比如你把一个img01.png的图片和markdownPad2笔记放在一起，<br>那么你就可以用这种方式插入图片，格式为：<br><code>![图片说明](相对地址)</code></p>
<p><img src="/posts/b24dd347/tx.jpg" alt="boy"></p>
<p>或者使用插件上传图片，格式为：<br>这种方式要安装插件和设置配置文件信息</p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表使用<em>、+、-标识，但是一般使用</em>来标识无序列表</p>
<p>单级列表从最左开始(适用于无序列表)，格式为：<code>* 无序列表</code></p>
<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表</li>
</ul>
<p>Markdown支持多级列表嵌套，但是建议一般不使用超过两级列表，另外建议两级<br>列表从缩进3个空格开始(适用于无序列表)</p>
<ul>
<li>无序列表<ul>
<li>无序列表</li>
<li>无序列表</li>
</ul>
</li>
<li>无序列表</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表使用数字.标识,如:<code>1. 有序列表</code></p>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<p>有序列表的多列表嵌套：</p>
<ol>
<li>有序列表<ol>
<li>有序列表</li>
<li>有序列表</li>
</ol>
</li>
<li>有序列表</li>
</ol>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线格式为：<code>***</code>或<code>---</code></p>
<hr>
<hr>
<h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>缩进一次再开始写代码，注意文字和代码间要空一行,一般代码片段用左边和右边两个<br>反引号，中间为代码片段</p>
<pre><code>var x = 10
</code></pre>
<h3 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h3><p>缩进一次再开始写代码，注意文字和代码间要空一行，一般使用三个反引号左右把代码<br>引用起来</p>
<pre><code>pyblic static void mian(String[] args)&#123;
    System.out.println(&quot;多行代码&quot;)
&#125;
</code></pre>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格的格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  | 表头  |</span><br><span class="line">| :----- | -----: | :-----: |</span><br><span class="line">| 左对齐  | 右对齐 | 中间对齐 |</span><br><span class="line">| 单元格  | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">表头</th>
<th align="right">表头</th>
<th align="center">表头</th>
</tr>
</thead>
<tbody><tr>
<td align="left">左对齐</td>
<td align="right">右对齐</td>
<td align="center">中间对齐</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><p>在需要置顶的文章的Front-matter中加上top选项即可top后面的数字越大，优先级越高<br>即加在在date下就可以了</p>
<h3 id="使用typora的语法链接"><a href="#使用typora的语法链接" class="headerlink" title="使用typora的语法链接"></a>使用typora的语法链接</h3><p><a href="https://zhuanlan.zhihu.com/p/90561228">Windows系统下Typora的安装和语法 - 知乎 (zhihu.com)</a></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
