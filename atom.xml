<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>言笑</title>
  
  <subtitle>等到苦尽甘来时，我再和你讲讲我来时的路</subtitle>
  <link href="https://yanxiaoblog.github.io/atom.xml" rel="self"/>
  
  <link href="https://yanxiaoblog.github.io/"/>
  <updated>2022-03-12T14:45:36.551Z</updated>
  <id>https://yanxiaoblog.github.io/</id>
  
  <author>
    <name>言笑</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小程序制作流程</title>
    <link href="https://yanxiaoblog.github.io/posts/2aa2ccb8/"/>
    <id>https://yanxiaoblog.github.io/posts/2aa2ccb8/</id>
    <published>2022-03-12T22:31:29.000Z</published>
    <updated>2022-03-12T14:45:36.551Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文描述的是小程序制作的整个流程，以及在小程序制作时遇到的问题的注意事项。 </p><span id="more"></span><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>小程序的开发主要分为四步，首先注册一个开发账号，然后在注册的时候进行信息的完善，再然后就可以下载开发工具后进行开发了，最后就是开发完成的小程序进行提交审核和发布，小程序的开发的整个流程图下图所示：<br><img src="/posts/2aa2ccb8/%E6%B5%81%E7%A8%8B.png">  </p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><ol><li><p>进入到 <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a> 页面，点击右上角的立即注册，如图所示：<br><img src="/posts/2aa2ccb8/%E6%B3%A8%E5%86%8C.png"></p></li><li><p>选择注册类型，选择“小程序”，点击“查看类型区别”可查看不同类型帐号的区别和优势，如图所示：<br><img src="/posts/2aa2ccb8/%E6%B3%A8%E5%86%8C%E7%B1%BB%E5%9E%8B.png"></p></li><li><p>进行注册，邮箱激活和信息的完善，根据页面的提示进行操作即可，如图所示：<br><img src="/posts/2aa2ccb8/%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%86%8C.png">  </p></li></ol><p>注意：在进行信息登记的时候，选择主题类型处一般选择个人，选择企业的话要收费<br>好啦，到这里小程序开发账号注册完成啦，可以到刚才的注册的步骤一的页面去登录啦！  </p><h3 id="小程序信息完善"><a href="#小程序信息完善" class="headerlink" title="小程序信息完善"></a>小程序信息完善</h3><ol><li><p>登录后进入到首页，如图所示：<br><img src="/posts/2aa2ccb8/%E7%99%BB%E5%BD%95%E5%90%8E.png"></p></li><li><p>点击小程序信息的填写按钮进行信息完善，如图所示：<br><img src="/posts/2aa2ccb8/%E4%BF%A1%E6%81%AF%E5%AE%8C%E5%96%84.png">  </p></li></ol><h3 id="小程序的开发"><a href="#小程序的开发" class="headerlink" title="小程序的开发"></a>小程序的开发</h3><ol><li>下载小程序开发者工具<br>地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</a><br>具体如图所示：<br><img src="/posts/2aa2ccb8/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.png">  </li></ol><p>下载完成后进行安装，直接不听下一步就行，如果想要改变安装地址，直接改变即可。<br>2. 双击小程序进行登录，如图所示：<br><img src="/posts/2aa2ccb8/%E7%99%BB%E5%BD%95.png">  </p><ol start="3"><li><p>选择小程序，点击加好创建小程序项目，如图所示：<br><img src="/posts/2aa2ccb8/%E5%88%9B%E5%BB%BA%E6%96%B0%E9%A1%B9%E7%9B%AE.png">  </p></li><li><p>填写项目基本信息，如图所示：<br><img src="/posts/2aa2ccb8/%E5%88%9B%E5%BB%BA.png">  </p></li></ol><p>appID获取如图所示：<br><img src="/posts/2aa2ccb8/appID.png">  </p><p>注意还有个模板选择，如图所示：<br><img src="/posts/2aa2ccb8/%E6%A8%A1%E6%9D%BF%E9%80%89%E6%8B%A9.png">  </p><ol start="5"><li><p>到这里小程序的项目就创建成功啦，我们可以进行开发啦，创建成功界面如图所示：<br><img src="/posts/2aa2ccb8/%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F.png">  </p></li><li><p>目录结构介绍<br><img src="/posts/2aa2ccb8/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png">  </p></li><li><p>文件的创建，如图所示：<br><img src="/posts/2aa2ccb8/appjs%E6%96%87%E4%BB%B6.png">  </p></li></ol><p>当然你也可以手动进行创建。<br>8. center.js简介  </p><ul><li><p>data{}：<br><img src="/posts/2aa2ccb8/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8.png">  </p></li><li><p>三个方法的调用顺序 onload–&gt;onShow–&gt;onReady<br><img src="/posts/2aa2ccb8/%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F.png">  </p></li></ul><ol start="9"><li><p>app.js简介<br><img src="/posts/2aa2ccb8/appjs%E4%BB%8B%E7%BB%8D.png">  </p></li><li><p>域名校验<br><img src="/posts/2aa2ccb8/%E5%9F%9F%E5%90%8D%E6%A0%A1%E9%AA%8C.png">  </p></li></ol><p>好啦，小程序开发就介绍到这里啦，想要了解更多，可以参考官方文档。<br>官方文档地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a>  </p><h3 id="审核和发布"><a href="#审核和发布" class="headerlink" title="审核和发布"></a>审核和发布</h3><ol><li><p>点击上传，如图所示<br><img src="/posts/2aa2ccb8/%E4%B8%8A%E4%BC%A0.png">  </p></li><li><p>具体的审核和发布可参考：<a href="https://zhuanlan.zhihu.com/p/39936955">https://zhuanlan.zhihu.com/p/39936955</a>  </p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>添加开发成员和体验成员在成员管理中进行添加<br><img src="/posts/2aa2ccb8/%E6%88%90%E5%91%98%E7%AE%A1%E7%90%86.png">  </p></li><li><p>体验版本扫码后页面不能跳转，一般是因为请求地址不规范，要用https才是规范的（不能发起请求然后不能进行页面跳转，可以尝试下面的方法） </p></li></ol><ul><li><p>解决方法一：进行ip白名单的配置  </p><ul><li><p>登录微信小程序的后台，点击开发管理–&gt;开发设置，如图所示：<br><img src="/posts/2aa2ccb8/%E5%BC%80%E5%8F%91%E8%AE%BE%E7%BD%AE.png">  </p></li><li><p>找到ip白名单或者服务器域名进行配置，如图所示：<br><img src="/posts/2aa2ccb8/%E5%9C%B0%E5%9D%80%E7%99%BD%E5%90%8D%E5%8D%95.png">  </p></li></ul><p>  如果方法一不成功，可以尝试第二种方法</p></li><li><p>解决方法二：打开手机调试模式后就能够进行跳转了  </p><ul><li><p>找到打开调试的地方<br><img src="/posts/2aa2ccb8/%E8%B0%83%E8%AF%951.png">  </p></li><li><p>打开调试(此处我已经打开)<br><img src="/posts/2aa2ccb8/%E8%B0%83%E8%AF%952.png">  </p></li><li><p>打开调试成功<br><img src="/posts/2aa2ccb8/%E8%B0%83%E8%AF%953.png">  </p></li></ul></li></ul><ol start="3"><li>使用微信小程序进行版本管理时推送失败<br><img src="/posts/2aa2ccb8/%E6%8E%A8%E9%80%81%E5%A4%B1%E8%B4%A5.png">  </li></ol><p>解决方法：<br><img src="/posts/2aa2ccb8/%E6%8E%A8%E9%80%81%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3.png">  </p><ol start="4"><li><p>版本管理时没有项目<br><img src="/posts/2aa2ccb8/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86.png"><br><img src="/posts/2aa2ccb8/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png">  </p></li><li><p>项目拉取不下来<br><img src="/posts/2aa2ccb8/%E9%A1%B9%E7%9B%AE%E6%8B%89%E5%8F%96.png">  </p></li></ol><p>选择从git导入<br><img src="/posts/2aa2ccb8/git%E5%AF%BC%E5%85%A5.png">  </p><ol start="6"><li><p>微信git账号的创建<br>地址：<a href="https://git.weixin.qq.com/">https://git.weixin.qq.com/</a>  </p></li><li><p>真机调试控制台报错，可以切换成真机调试1.0版本进行<br><img src="/posts/2aa2ccb8/%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95.png">  </p></li></ol><h3 id="常用代码参考"><a href="#常用代码参考" class="headerlink" title="常用代码参考"></a>常用代码参考</h3><ol><li>请求方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">    <span class="attr">url</span>: ,</span><br><span class="line">    data: &#123;<span class="comment">//url参数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, </span><br><span class="line">    success (res1) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>页面跳转方法  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保留当前页面，跳转到应用的某个页面，点击返回按钮时还可以返回原来页面,不能跳转到tabBar页面</span></span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;文件地址&#x27;</span>,    地址后面也可以追加参数  <span class="string">&#x27;page/index/index?id=123&amp;page=2&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 关闭当前页面，跳转到应用内的某个页面。  点击返回按钮时不会返回原来页面</span></span><br><span class="line">wx.redirectTo(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;page/index/index?id=123&amp;page=2&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 关闭所有页面，打开到应用内的某个页面。</span></span><br><span class="line">wx.reLanch(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;page/index/index?id=123&amp;page=2&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</span></span><br><span class="line"><span class="comment">// 注意：必须是在app.json中注册过的tabBar 页面</span></span><br><span class="line">wx.switchTab(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;page/index/index&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>弹窗<br>地址：<a href="https://blog.csdn.net/qq_43248623/article/details/106421617">https://blog.csdn.net/qq_43248623/article/details/106421617</a>  </li></ol><p>本文到此结束啦！</p><hr>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;本文描述的是小程序制作的整个流程，以及在小程序制作时遇到的问题的注意事项。 &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yanxiaoblog.github.io/posts/4a17b156/"/>
    <id>https://yanxiaoblog.github.io/posts/4a17b156/</id>
    <published>2022-02-21T13:58:20.925Z</published>
    <updated>2022-03-02T13:04:47.307Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>微信公众号测试步骤</title>
    <link href="https://yanxiaoblog.github.io/posts/aab1e47f/"/>
    <id>https://yanxiaoblog.github.io/posts/aab1e47f/</id>
    <published>2022-01-28T21:56:51.000Z</published>
    <updated>2022-03-12T14:30:26.448Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录一下使用微信公众号进行测试的步骤，避免以后忘记。</p><span id="more"></span><ul><li><p>首先搜索“微信公众号”，然后点击“微信公众号平台”，如下图所示：<br><img src="/posts/aab1e47f/01.png">  </p></li><li><p>在左边菜单栏中点击“开发者工具”，然后在右边点击“公众平台测试账号”，如图所示：<br><img src="/posts/aab1e47f/02.png">  </p></li><li><p>点击“公众平台测试”之后，是需要管理员使用微信扫码或密码登录的，如图所示：<br><img src="/posts/aab1e47f/09.png">  </p></li><li><p>扫码登录之后可以看到相关的测试号的appID和appsecret信息，如图所示：<br><img src="/posts/aab1e47f/03.png">  </p></li><li><p>使用appID和appsecret信息在对应的项目的配置文件中进行四个相应的配置，如图所示：<br><img src="/posts/aab1e47f/04.png"><br>urlencode转换网站：<a href="https://tool.chinaz.com/tools/urlencode.aspx">https://tool.chinaz.com/tools/urlencode.aspx</a></p></li><li><p>回到“微信公众号平台”中对“js接口安全域名进行修改”，如图所示：<br><img src="/posts/aab1e47f/05.png">  </p></li><li><p>在进行测试前要先扫码关注测试公众号，如图所示：<br><img src="/posts/aab1e47f/06.png">  </p></li><li><p>然后对网页账号进行修改，如图所示：<br><img src="/posts/aab1e47f/07.png">  </p></li></ul><p><img src="/posts/aab1e47f/08.png">  </p><ul><li>最后搜索“微信公众号开发工具”，然后在公众号设置中点击功能设计，再点击下载，下载对应的公众号开发工具，登录，访问对应的网址就可以啦，如图所示：</li></ul><p><img src="/posts/aab1e47f/10.png">  </p><p><img src="/posts/aab1e47f/11.png">  </p><ul><li>结合微信公众号的绑定测试步骤，我们再来看一下微信公众号域名绑定的步骤吧！步骤和测试的步骤差不多：  </li></ul><ol><li><p>搜索微信公众平台进行登录<br><img src="/posts/aab1e47f/%E7%99%BB%E5%BD%95.png"></p></li><li><p>在js接口安全域名和网页授权域名处添加上要绑定的域名<br><img src="/posts/aab1e47f/%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0.png"></p></li><li><p>在基本配置中进行基本的配置<br><img src="/posts/aab1e47f/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.png"></p></li><li><p>在配置文件中进行appID、Secret和host的配置<br><img src="/posts/aab1e47f/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.png">  </p></li></ol><p>配置完成!  </p><hr><p>公众号测试步骤到此结束，如果觉得有帮助，可以打赏一波哦！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录一下使用微信公众号进行测试的步骤，避免以后忘记。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://yanxiaoblog.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>二叉树遍历完整代码</title>
    <link href="https://yanxiaoblog.github.io/posts/297fb2ac/"/>
    <id>https://yanxiaoblog.github.io/posts/297fb2ac/</id>
    <published>2022-01-06T22:02:27.000Z</published>
    <updated>2022-01-11T13:33:31.407Z</updated>
    
    <content type="html"><![CDATA[<p>代码包括先序遍历、中序遍历、后序遍历、层序遍历、求树的高度、求叶子结点的方法，代码实现如下： </p><span id="more"></span> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="comment">//定义一个数的节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">ElementType Data;</span><br><span class="line">BinTree left;</span><br><span class="line">BinTree right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//递归前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BinTree bt)</span></span>;</span><br><span class="line"><span class="comment">//非递归前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal01</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal01</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//递归后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//非递归后序遍历01</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal01</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//非递归后序遍历02</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal02</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraversal</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//输出叶子节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindLeaves</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"><span class="comment">//求树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTreeHeight</span><span class="params">(BinTree BT)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BinTree a = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">BinTree b = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">BinTree c = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">BinTree d = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">BinTree e = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">BinTree f = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">BinTree g = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">BinTree h = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">BinTree i = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">a-&gt;Data = <span class="number">1</span>;</span><br><span class="line">a-&gt;left = b;</span><br><span class="line">a-&gt;right = c;</span><br><span class="line">b-&gt;Data = <span class="number">2</span>;</span><br><span class="line">b-&gt;left = d;</span><br><span class="line">b-&gt;right = f;</span><br><span class="line">d-&gt;Data = <span class="number">4</span>;</span><br><span class="line">d-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">d-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">f-&gt;Data = <span class="number">6</span>;</span><br><span class="line">f-&gt;left = e;</span><br><span class="line">f-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">e-&gt;Data = <span class="number">5</span>;</span><br><span class="line">e-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">e-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">c-&gt;Data = <span class="number">3</span>;</span><br><span class="line">c-&gt;left = g;</span><br><span class="line">c-&gt;right = i;</span><br><span class="line">g-&gt;Data = <span class="number">7</span>;</span><br><span class="line">g-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">g-&gt;right = h;</span><br><span class="line">h-&gt;Data = <span class="number">8</span>;</span><br><span class="line">h-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">h-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">i-&gt;Data = <span class="number">9</span>;</span><br><span class="line">i-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">i-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">PreOrderTraversal(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">PreOrderTraversal01(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">InOrderTraversal(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">InOrderTraversal01(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">PostOrderTraversal(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">PostOrderTraversal01(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">PostOrderTraversal02(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">LevelOrderTraversal(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">FindLeaves(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> height;</span><br><span class="line">height = GetTreeHeight(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, height);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BinTree bt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bt) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, bt-&gt;Data); <span class="comment">//先打印根</span></span><br><span class="line">PreOrderTraversal(bt-&gt;left);<span class="comment">//然后进入左子树</span></span><br><span class="line">PreOrderTraversal(bt-&gt;right);<span class="comment">//再进入右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">BinTree T = BT;</span><br><span class="line"><span class="built_in">stack</span>&lt;BinTree&gt; S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (T || !S.empty()) &#123; <span class="comment">// 当树不为空或堆栈不空</span></span><br><span class="line"><span class="keyword">while</span> (T) &#123;</span><br><span class="line">S.push(T);   <span class="comment">// 压栈，第一次遇到该结点</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data); <span class="comment">// 访问结点</span></span><br><span class="line">T = T-&gt;left;   <span class="comment">// 遍历左子树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!S.empty()) &#123; <span class="comment">// 当堆栈不空</span></span><br><span class="line">T = S.top();</span><br><span class="line">S.pop();    <span class="comment">// 出栈，第二次遇到该结点</span></span><br><span class="line">T = T-&gt;right;  <span class="comment">// 访问右结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line">InOrderTraversal(BT-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">InOrderTraversal(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">BinTree T = BT;</span><br><span class="line"><span class="built_in">stack</span>&lt;BinTree&gt; S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (T || !S.empty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (T) &#123;</span><br><span class="line">S.push(T);</span><br><span class="line">T = T-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!S.empty()) &#123;</span><br><span class="line">T = S.top();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);</span><br><span class="line">S.pop();</span><br><span class="line">T = T-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line">PostOrderTraversal(BT-&gt;left);</span><br><span class="line">PostOrderTraversal(BT-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归后序遍历01</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">BinTree T = BT;</span><br><span class="line"><span class="built_in">stack</span>&lt;BinTree&gt; S;  <span class="comment">// 创建并初始化堆栈 S</span></span><br><span class="line"><span class="built_in">vector</span>&lt;BinTree&gt; v;   <span class="comment">// 创建存储树结点的动态数组</span></span><br><span class="line">S.push(T);  <span class="comment">//先将根节点放入栈中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环中出栈的顺序是后序遍历的反顺序，即遇到根节点，先抛出根节点，然后抛出右节点，最后抛出左节点</span></span><br><span class="line"><span class="keyword">while</span> (!S.empty()) &#123; <span class="comment">// 当堆栈不空</span></span><br><span class="line">T = S.top();</span><br><span class="line">v.push_back(T);  <span class="comment">// 将要出栈元素存进数组</span></span><br><span class="line">S.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T-&gt;left)</span><br><span class="line">S.push(T-&gt;left);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T-&gt;right)</span><br><span class="line">S.push(T-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反顺序输出数组的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (v.size() - <span class="number">1</span>); i &gt;= <span class="number">0</span>; i--) <span class="comment">// 输出数组元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[i]-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归后序遍历02</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  <span class="comment">//定义一个栈</span></span><br><span class="line">BinTree data[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125; BiStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal02</span><span class="params">(BinTree T)</span> </span>&#123;<span class="comment">//入栈所有的左子树以及左子树的右子树直到没有可以访问的右子树后退栈。</span></span><br><span class="line">TreeNode *pre = T;<span class="comment">//记录上一次退栈的结点</span></span><br><span class="line">TreeNode *p = T;<span class="comment">//当前访问结点</span></span><br><span class="line">BiStack s ;</span><br><span class="line">s.top = <span class="number">0</span>;    <span class="comment">//定义top指针为0</span></span><br><span class="line">s.data[s.top] = <span class="literal">NULL</span>;    <span class="comment">//定义栈为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*当节点的两边没有被访问过，那么进入节点的左子树，如果节点的左边被</span></span><br><span class="line"><span class="comment">访问过，那么进入节点的右子树，当节点的左右都为空或者左右都被访问过</span></span><br><span class="line"><span class="comment">那么就输出当前节点，并将当前节点设置为被访问过，并且将该节点出栈*/</span></span><br><span class="line"><span class="keyword">while</span> (p || s.top != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span> &amp;&amp; pre != p-&gt;left &amp;&amp; pre != p-&gt;right) &#123;<span class="comment">//结点不为空且左孩子和右孩子没有访问过</span></span><br><span class="line">s.data[++s.top] = p; <span class="comment">//当前节点入栈</span></span><br><span class="line">p = p-&gt;left;  <span class="comment">//进入左子树</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = s.data[s.top];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span> &amp;&amp; pre != p-&gt;right) &#123;<span class="comment">//右子树不为空且右孩子没有访问过，入栈右子树结点</span></span><br><span class="line">p = p-&gt;right;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;Data);<span class="comment">//访问到最后的右子树的结点后，退栈。</span></span><br><span class="line">pre = s.data[s.top];</span><br><span class="line">p = s.data[--s.top];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;BinTree&gt; q;</span><br><span class="line">BinTree T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!BT) &#123;<span class="comment">//如果树为空，则直接结束函数</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q.push(BT);<span class="comment">//将树的根节点入队</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;<span class="comment">//知道队列为空，结束循环</span></span><br><span class="line">T = q.front();<span class="comment">//拿到队列第一个数</span></span><br><span class="line">q.pop();<span class="comment">//将队列中第一个数出队</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);<span class="comment">//输出拿到的队列第一个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T-&gt;left) &#123;<span class="comment">//如果队列第一个数的左节点不为空，那么将其左节点入队</span></span><br><span class="line">q.push(T-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T-&gt;right) &#123;<span class="comment">//如果队列第一个数的右节点不为空，那么将其右节点入队</span></span><br><span class="line">q.push(T-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出树的叶子结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindLeaves</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line"><span class="keyword">if</span> (!BT-&gt;left &amp;&amp; !BT-&gt;right) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">&#125;<span class="comment">//不管是什么遍历，只要加上左右节点都为空，就可以输出叶子结点了</span></span><br><span class="line"></span><br><span class="line">FindLeaves(BT-&gt;left);</span><br><span class="line">FindLeaves(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTreeHeight</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> leftHeight, rightHeight, maxHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line">leftHeight = GetTreeHeight(BT-&gt;left);<span class="comment">//求左子树的高度</span></span><br><span class="line">rightHeight = GetTreeHeight(BT-&gt;right);<span class="comment">//求右子树的高度</span></span><br><span class="line">maxHeight = (leftHeight &gt; rightHeight) ? leftHeight : rightHeight;</span><br><span class="line"><span class="keyword">return</span> maxHeight + <span class="number">1</span>;<span class="comment">//当前树的高度为左子树或右子树的高度加1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;代码包括先序遍历、中序遍历、后序遍历、层序遍历、求树的高度、求叶子结点的方法，代码实现如下： &lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-树</title>
    <link href="https://yanxiaoblog.github.io/posts/f30c2ae3/"/>
    <id>https://yanxiaoblog.github.io/posts/f30c2ae3/</id>
    <published>2022-01-02T12:23:07.000Z</published>
    <updated>2022-01-11T13:33:28.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>由n个节点构成的有限集合称为树，当n=0时，称为空树。</p><span id="more"></span><h3 id="树的特征"><a href="#树的特征" class="headerlink" title="树的特征"></a>树的特征</h3><p>对于任意一个非空的树，都有一下特征：  </p><ul><li>有一个根节点</li><li>其余节点可分为互不交集的有限集合，其中每个集合又是一棵树，那么这个集合称为原来树的子树，子树是互不相交的</li><li>除了根节点，其他节点中每个节点仅有一个根节点</li><li>一棵N个节点的树，他的边有N-1条</li></ul><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><ul><li>节点的度：一个节点中其子树的个数</li><li>树的度：一棵树中节点的度最大的就是这棵树的度</li><li>叶节点：度为0的节点</li><li>父节点：有子树的这个节点就是那个子树的根节点的父节点</li><li>子节点：父节点和子节点是相对的，若A是B的父节点，那么B就是A的子节点</li><li>兄弟节点：拥有同一个父节点的所有子节点称为兄弟节点</li><li>路径：从一棵树的根节点开始，到树的某个节点所要经过的所有边和节点</li><li>路径长度：路径中所包含的边的个数</li><li>祖先节点：沿着根节点到这个节点所经过的所有节点都是这个节点的祖先节点</li><li>子孙节点：某一节点的子树中的所有节点都是这个节点的子孙节点</li><li>节点的层次：一棵树的根节点的层次为1，其他的每一个层次为每一个辈分层次加1 </li><li>树的深度：树中最大层次就是这棵树的深度</li></ul><h3 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h3><ol><li>儿子-兄弟表示法<br><img src="/posts/f30c2ae3/%E6%A0%91%E7%9A%84%E8%A1%A8%E7%A4%BA1.jpg"></li><li>二叉树表示法<br>即度为2的树<br><img src="/posts/f30c2ae3/%E6%A0%91%E7%9A%84%E8%A1%A8%E7%A4%BA2.jpg"></li></ol><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>二叉树是树的一种表示形式，是一个有限的集合，若不为空时，它由根节点和左右子树两个不想交的二叉树组成，二叉树的子树有左右顺序之分</p><h4 id="二叉树的五种基本形态"><a href="#二叉树的五种基本形态" class="headerlink" title="二叉树的五种基本形态"></a>二叉树的五种基本形态</h4><p><img src="/posts/f30c2ae3/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%BD%A2%E6%80%81.jpg"></p><h4 id="二叉树的特殊形态"><a href="#二叉树的特殊形态" class="headerlink" title="二叉树的特殊形态"></a>二叉树的特殊形态</h4><ol><li>斜二叉树：只有左节点或者右节点<br><img src="/posts/f30c2ae3/%E6%96%9C%E4%BA%8C%E5%8F%89%E6%A0%91.jpg"></li><li>完美二叉树：(又称满二叉树)除了最后一层的叶子节点，其他每层的节点都有两个子节点<br><img src="/posts/f30c2ae3/%E5%AE%8C%E7%BE%8E%E4%BA%8C%E5%8F%89%E6%A0%91.jpg"></li><li>完全二叉树：有 n 个结点的二叉树，对树中结点按从上至下、从左到右顺序进行编号，编号为 i（1 ≤ i ≤ n）结点与满二叉树中编号为 i 结点在二叉树中位置相同<br><img src="/posts/f30c2ae3/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.jpg"></li></ol><h4 id="二叉树的重要性质"><a href="#二叉树的重要性质" class="headerlink" title="二叉树的重要性质"></a>二叉树的重要性质</h4><ol><li>二叉树中第i层的最大节点数为：2^(i-1),i&gt;=1</li><li>深度为k的二叉树的最大总结点数为：2^k-1</li><li>对于任何非空二叉树，若n0表示空节点，n1表示度为1的节点，n2表示度为2的节点，那么就有n0=n2+1<br><img src="/posts/f30c2ae3/%E5%85%AC%E5%BC%8F.jpg"><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><h5 id="顺序存储结构（使用数组来进行存储）"><a href="#顺序存储结构（使用数组来进行存储）" class="headerlink" title="顺序存储结构（使用数组来进行存储）"></a>顺序存储结构（使用数组来进行存储）</h5>按从上至下，从左至右的顺序进行存储，并对这些节点按照顺序进行编号，他们的父子节点之间的关系为：</li></ol><ul><li>非根节点（序号为i）的父节点的序号是i/2（向下取整）</li><li>节点（序号为i）的左孩子节点的序号是2i（当2i&gt;n时，没有左节点）</li><li>节点（序号为i）的右孩子节点的序号是2i+1（当2i+1&gt;n时，没有右节点）  </li></ul><p>如图所示，为使用顺序结构来进行存储的完全二叉树：<br><img src="/posts/f30c2ae3/%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.jpg">  </p><p>缺点：当数组不是完全二叉树时，就会使用顺序存储就会出现很多的空间浪费，如图所示：<br><img src="/posts/f30c2ae3/%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A801.jpg"></p><h5 id="链表存储"><a href="#链表存储" class="headerlink" title="链表存储"></a>链表存储</h5><p>定义一个节点，节点包括存储的数值和左右节点的地址，定义如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">BinTree</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">Element Data;  <span class="comment">// 存值 </span></span><br><span class="line">BinTree Left;    <span class="comment">// 左儿子结点 </span></span><br><span class="line">BinTree Right;   <span class="comment">// 右儿子结点 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>二叉树的遍历包括先序遍历，中序遍历，后序遍历和层序遍历四种</p><h5 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h5><p>先序遍历的过程：根-&gt;左节点-&gt;右节点<br>如图所示：<br><img src="/posts/f30c2ae3/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86.jpg"></p><ul><li>递归实现<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BinTree bt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bt) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, bt-&gt;Data); <span class="comment">//先打印根</span></span><br><span class="line">PreOrderTraversal(bt-&gt;left);<span class="comment">//然后进入左子树</span></span><br><span class="line">PreOrderTraversal(bt-&gt;right);<span class="comment">//再进入右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>非递归实现<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">BinTree T = BT;</span><br><span class="line"><span class="built_in">stack</span>&lt;BinTree&gt; S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (T || !S.empty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (T) &#123;</span><br><span class="line">S.push(T);</span><br><span class="line">T = T-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!S.empty()) &#123;</span><br><span class="line">T = S.top();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);</span><br><span class="line">S.pop();</span><br><span class="line">T = T-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>中序遍历过程：左节点-&gt;根-&gt;右节点<br>如图所示：<br><img src="/posts/f30c2ae3/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.jpg"></p><ul><li>递归实现<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line">InOrderTraversal(BT-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">InOrderTraversal(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>非递归遍历<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">BinTree T = BT;</span><br><span class="line"><span class="built_in">stack</span>&lt;BinTree&gt; S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (T || !S.empty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (T) &#123;</span><br><span class="line">S.push(T);</span><br><span class="line">T = T-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!S.empty()) &#123;</span><br><span class="line">T = S.top();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);</span><br><span class="line">S.pop();</span><br><span class="line">T = T-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5>后序遍历过程：左节点-&gt;右节点-&gt;根<br>如图所示：<br><img src="/posts/f30c2ae3/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.jpg"></li><li>递归实现<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line">PostOrderTraversal(BT-&gt;left);</span><br><span class="line">PostOrderTraversal(BT-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>非递归实现01<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归后序遍历01</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal01</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">BinTree T = BT;</span><br><span class="line"><span class="built_in">stack</span>&lt;BinTree&gt; S;  <span class="comment">// 创建并初始化堆栈 S</span></span><br><span class="line"><span class="built_in">vector</span>&lt;BinTree&gt; v;   <span class="comment">// 创建存储树结点的动态数组</span></span><br><span class="line">S.push(T);  <span class="comment">//先将根节点放入栈中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环中出栈的顺序是后序遍历的反顺序，即遇到根节点，先抛出根节点，然后抛出右节点，最后抛出左节点</span></span><br><span class="line"><span class="keyword">while</span> (!S.empty()) &#123; <span class="comment">// 当堆栈不空</span></span><br><span class="line">T = S.top();</span><br><span class="line">v.push_back(T);  <span class="comment">// 将要出栈元素存进数组</span></span><br><span class="line">S.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T-&gt;left)</span><br><span class="line">S.push(T-&gt;left);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T-&gt;right)</span><br><span class="line">S.push(T-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反顺序输出数组的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (v.size() - <span class="number">1</span>); i &gt;= <span class="number">0</span>; i--) <span class="comment">// 输出数组元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[i]-&gt;Data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>飞递归实现02<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归后序遍历02</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  <span class="comment">//定义一个栈</span></span><br><span class="line">BinTree data[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125; BiStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal02</span><span class="params">(BinTree T)</span> </span>&#123;<span class="comment">//入栈所有的左子树以及左子树的右子树直到没有可以访问的右子树后退栈。</span></span><br><span class="line">TreeNode *pre = T;<span class="comment">//记录上一次退栈的结点</span></span><br><span class="line">TreeNode *p = T;<span class="comment">//当前访问结点</span></span><br><span class="line">BiStack s ;</span><br><span class="line">s.top = <span class="number">0</span>;    <span class="comment">//定义top指针为0</span></span><br><span class="line">s.data[s.top] = <span class="literal">NULL</span>;    <span class="comment">//定义栈为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*当节点的两边没有被访问过，那么进入节点的左子树，如果节点的左边被</span></span><br><span class="line"><span class="comment">访问过，那么进入节点的右子树，当节点的左右都为空或者左右都被访问过</span></span><br><span class="line"><span class="comment">那么就输出当前节点，并将当前节点设置为被访问过，并且将该节点出栈*/</span></span><br><span class="line"><span class="keyword">while</span> (p || s.top != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span> &amp;&amp; pre != p-&gt;left &amp;&amp; pre != p-&gt;right) &#123;<span class="comment">//结点不为空且左孩子和右孩子没有访问过</span></span><br><span class="line">s.data[++s.top] = p; <span class="comment">//当前节点入栈</span></span><br><span class="line">p = p-&gt;left;  <span class="comment">//进入左子树</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = s.data[s.top];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span> &amp;&amp; pre != p-&gt;right) &#123;<span class="comment">//右子树不为空且右孩子没有访问过，入栈右子树结点</span></span><br><span class="line">p = p-&gt;right;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;Data);<span class="comment">//访问到最后的右子树的结点后，退栈。</span></span><br><span class="line">pre = s.data[s.top];</span><br><span class="line">p = s.data[--s.top];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前、中、后序遍历的总结"><a href="#前、中、后序遍历的总结" class="headerlink" title="前、中、后序遍历的总结"></a>前、中、后序遍历的总结</h5>先序、中序和后序遍历过程：遍历过程中经过结点的路线一样，只是访问各结点的时机不同，即：</li><li>先序遍历是第一次”遇到”该结点时访问</li><li>中序遍历是第二次”遇到”该结点（此时该结点从左子树返回）时访问</li><li>后序遍历是第三次”遇到”该结点（此时该结点从右子树返回）时访问<br>如图所示：<br><img src="/posts/f30c2ae3/%E9%81%8D%E5%8E%86%E6%80%BB%E7%BB%93.jpg"></li></ul><h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h5><p>遍历过程：从上往下，从左往右进行遍历<br>如下图：<br><img src="/posts/f30c2ae3/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.jpg"><br>层序遍历的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;BinTree&gt; q;</span><br><span class="line">BinTree T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!BT) &#123;<span class="comment">//如果树为空，则直接结束函数</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q.push(BT);<span class="comment">//将树的根节点入队</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;<span class="comment">//知道队列为空，结束循环</span></span><br><span class="line">T = q.front();<span class="comment">//拿到队列第一个数</span></span><br><span class="line">q.pop();<span class="comment">//将队列中第一个数出队</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;Data);<span class="comment">//输出拿到的队列第一个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T-&gt;left) &#123;<span class="comment">//如果队列第一个数的左节点不为空，那么将其左节点入队</span></span><br><span class="line">q.push(T-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T-&gt;right) &#123;<span class="comment">//如果队列第一个数的右节点不为空，那么将其右节点入队</span></span><br><span class="line">q.push(T-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求叶子结点"><a href="#求叶子结点" class="headerlink" title="求叶子结点"></a>求叶子结点</h4><p>在进行遍历时，判断将没有左右节点的节点进行输出即可，如下实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出树的叶子结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindLeaves</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line"><span class="keyword">if</span> (!BT-&gt;left &amp;&amp; !BT-&gt;right) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">&#125;<span class="comment">//不管是什么遍历，只要加上左右节点都为空，就可以输出叶子结点了</span></span><br><span class="line"></span><br><span class="line">FindLeaves(BT-&gt;left);</span><br><span class="line">FindLeaves(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求树的高度"><a href="#求树的高度" class="headerlink" title="求树的高度"></a>求树的高度</h4><p>使用递归求输的高度，即使用递归求出每每个节点的左右子树的高度，当前树的高度就是子最高子树高度加1，实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTreeHeight</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> leftHeight, rightHeight, maxHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line">leftHeight = GetTreeHeight(BT-&gt;left);<span class="comment">//求左子树的高度</span></span><br><span class="line">rightHeight = GetTreeHeight(BT-&gt;right);<span class="comment">//求右子树的高度</span></span><br><span class="line">maxHeight = (leftHeight &gt; rightHeight) ? leftHeight : rightHeight;</span><br><span class="line"><span class="keyword">return</span> maxHeight + <span class="number">1</span>;<span class="comment">//当前树的高度为左子树或右子树的高度加1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="由两种序列确定二叉树"><a href="#由两种序列确定二叉树" class="headerlink" title="由两种序列确定二叉树"></a>由两种序列确定二叉树</h4><p>前提：两种序列中必须有一种序列是中序序列<br>确定二叉树的流程如图所示：<br><img src="/posts/f30c2ae3/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A1%AE%E5%AE%9A.jpg"> </p><ul><li>例子：<br>前序序列：ABCDEFG<br>中序序列：CBDAFEG<br>如图所示：<br><img src="/posts/f30c2ae3/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A1%AE%E5%AE%9A%E4%BE%8B%E5%AD%90.jpg"> </li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><a href="https://yanxiaoblog.github.io/posts/297fb2ac/#more">二叉树遍历的完整代码</a></p><h4 id="二叉树的搜索——二叉搜索树"><a href="#二叉树的搜索——二叉搜索树" class="headerlink" title="二叉树的搜索——二叉搜索树"></a>二叉树的搜索——二叉搜索树</h4><ul><li>二叉搜索树又可以称为二叉排序树或者二叉查找树</li><li>二叉搜索树如果不为空，那么它将满足一下条件：<ul><li>左子树所有节点的值永远比根节点的值小</li><li>右子树所有节点的值永远比根节点的值小</li><li>左子树和右子树都是二叉树</li></ul></li></ul><h5 id="二叉搜索树的查找"><a href="#二叉搜索树的查找" class="headerlink" title="二叉搜索树的查找"></a>二叉搜索树的查找</h5><ul><li>如果二叉搜索树为空，直接返回NULL</li><li>如果二叉搜索树不为空  <ul><li>判断X是否和根节点相等，如果相等，返回根节点的地址</li><li>如果不相等，小于根节点，那么到左子树中继续查找</li><li>如果不相等，大于根节点，那么到右子树中继续查找  </li></ul></li></ul><p>查找过程如图所示：<br><img src="/posts/f30c2ae3/%E6%90%9C%E7%B4%A2%E6%A0%91%E6%9F%A5%E6%89%BE.jpg"> </p><h5 id="查找最大元素和最小元素"><a href="#查找最大元素和最小元素" class="headerlink" title="查找最大元素和最小元素"></a>查找最大元素和最小元素</h5><ul><li>最大元素一定是在树的最右端</li><li>最小元素一定是在树的最左端  </li></ul><p>如图所示：<br><img src="/posts/f30c2ae3/%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%85%83%E7%B4%A0.jpg"></p><h5 id="元素的删除"><a href="#元素的删除" class="headerlink" title="元素的删除"></a>元素的删除</h5><p>二叉搜索树的删除有三种情况</p><ul><li>删除的是叶子结点：直接删除，并将叶子结点的父节点的指针赋值为NULL</li><li>删除的节点有一个子树：将其父节点的指针指向要删除节点的孩子节点 </li><li>删除的节点有左右两个子树：用<strong>左子树的最大节点</strong>或者<strong>右子树的最小节点</strong>代替被删除的节点</li></ul><p>第三种删除的情况如图所示：</p><ul><li>要删除一个有两个子树的节点：<br><img src="/posts/f30c2ae3/%E5%88%A0%E9%99%A401.jpg">  </li><li>用左子树最大节点来代替<br><img src="/posts/f30c2ae3/%E5%88%A0%E9%99%A402.jpg">  </li><li>用右子树最小节点来代替<br><img src="/posts/f30c2ae3/%E5%88%A0%E9%99%A403.jpg"> </li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;树的定义&quot;&gt;&lt;a href=&quot;#树的定义&quot; class=&quot;headerlink&quot; title=&quot;树的定义&quot;&gt;&lt;/a&gt;树的定义&lt;/h3&gt;&lt;p&gt;由n个节点构成的有限集合称为树，当n=0时，称为空树。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>第二讲-线性结构-习题</title>
    <link href="https://yanxiaoblog.github.io/posts/e4ca25fd/"/>
    <id>https://yanxiaoblog.github.io/posts/e4ca25fd/</id>
    <published>2021-12-12T17:42:52.000Z</published>
    <updated>2021-12-13T04:15:25.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文是观看浙江大学的数据结构课程第二讲做的习题笔记，包括：递增的整数序列链表的插入，两个有序链表序列的合并，递归求简单交错幂级数的部分和，弹球距离四个习题</p><span id="more"></span><h3 id="递增的整数序列链表的插入"><a href="#递增的整数序列链表的插入" class="headerlink" title="递增的整数序列链表的插入"></a>递增的整数序列链表的插入</h3><p>本题要求实现一个函数，在递增的整数序列链表（带头结点）中插入一个新整数，并保持该序列的有序性。</p><h4 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h4><p><code>List Insert( List L, ElementType X );</code><br>其中List结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data; <span class="comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode   Next; <span class="comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">/* 定义单链表类型 */</span></span><br></pre></td></tr></table></figure><p>L是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数Insert要将X插入L，并保持该序列的有序性，返回插入后的链表头指针。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 4 5 6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><p><code>1 2 3 4 5 6 </code></p><h4 id="解决问题代码"><a href="#解决问题代码" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Insert</span><span class="params">( List L, ElementType X )</span></span>&#123;</span><br><span class="line">    List p, t;</span><br><span class="line">    t = L;</span><br><span class="line">    <span class="comment">//创建一个节点用来存储X的值</span></span><br><span class="line">    p = (struct Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node *));</span><br><span class="line">    p-&gt;Data = X;</span><br><span class="line">    <span class="comment">//循环遍历找到立案表中第一个大于X的节点，并将X所在的节点插入到这个节点的前面</span></span><br><span class="line">    <span class="keyword">while</span>(L-&gt;Next != <span class="literal">NULL</span> &amp;&amp; L-&gt;Next-&gt;Data &lt; X)&#123;</span><br><span class="line">        L = L-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;Next = L-&gt;Next;</span><br><span class="line">    L-&gt;Next = p;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两个有序链表序列的合并"><a href="#两个有序链表序列的合并" class="headerlink" title="两个有序链表序列的合并"></a>两个有序链表序列的合并</h3><p>本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。</p><h4 id="函数接口定义：-1"><a href="#函数接口定义：-1" class="headerlink" title="函数接口定义："></a>函数接口定义：</h4><p><code>List Merge( List L1, List L2 );</code><br>其中List结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data; <span class="comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode   Next; <span class="comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">/* 定义单链表类型 */</span></span><br></pre></td></tr></table></figure><p>L1和L2是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数Merge要将L1和L2合并为一个非递减的整数序列。应直接使用原序列中的结点，返回归并后的带头结点的链表头指针。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 3 5</span><br><span class="line">5</span><br><span class="line">2 4 6 8 10</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 8 10 </span><br><span class="line">NULL</span><br><span class="line">NULL</span><br></pre></td></tr></table></figure><h4 id="解决问题代码-1"><a href="#解决问题代码-1" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Merge</span><span class="params">( List L1, List L2 )</span></span>&#123;</span><br><span class="line">    List p1, p2, p, L;</span><br><span class="line">    p1 = L1-&gt;Next;<span class="comment">//L1和L2在第二个节点才开始存值</span></span><br><span class="line">    p2 = L2-&gt;Next;</span><br><span class="line">    L=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));<span class="comment">//新的头结点</span></span><br><span class="line">    p = L;</span><br><span class="line">    <span class="comment">//使两个链表中节点的值进行比较，小的放到新链表中</span></span><br><span class="line">    <span class="comment">//当其中一个链表比较完之后，就将另一个链表中剩下的所有节点接到新链表中</span></span><br><span class="line">    <span class="keyword">while</span>(p1 &amp;&amp; p2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p1-&gt;Data &lt; p2-&gt;Data)&#123;</span><br><span class="line">            p-&gt;Next = p1;</span><br><span class="line">            p = p-&gt;Next;<span class="comment">//p是移动的，因为每次插入节点都需要使用p来定位</span></span><br><span class="line">            p1 = p1-&gt;Next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p-&gt;Next = p2;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">            p2 = p2-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果p1链表比较完后，直接将p2没比较完，那么将p2后面没比较的节点接到新链表的末尾</span></span><br><span class="line">    <span class="keyword">if</span>(p1 == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p-&gt;Next = p2;</span><br><span class="line">    <span class="comment">//如果p2链表比较完后，直接将p1没比较完，那么将p1后面没比较的节点接到新链表的末尾</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p2 == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p-&gt;Next = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    L1-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    L2-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归求简单交错幂级数的部分和"><a href="#递归求简单交错幂级数的部分和" class="headerlink" title="递归求简单交错幂级数的部分和"></a>递归求简单交错幂级数的部分和</h3><p>本题要求实现一个函数，计算下列简单交错幂级数的部分和：<br><code>f(x,n)=x−x^2+x^3−x^4 +⋯+(−1)^(n−1)*x^n</code></p><h4 id="函数接口定义"><a href="#函数接口定义" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>double fn( double x, int n );</code></p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><p><code>0.5 12</code></p><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><p><code>0.33</code></p><h4 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>使用for循环的求解方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">( <span class="keyword">double</span> x, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="comment">//判断符号的正负</span></span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            result += <span class="built_in">pow</span>(x, i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result -= <span class="built_in">pow</span>(x, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>使用递归的求解方法</p><ul><li>递归求解方法一<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">( <span class="keyword">double</span> x, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">result=x;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">result=<span class="built_in">pow</span>(<span class="number">-1</span>,n<span class="number">-1</span>) * <span class="built_in">pow</span>(x,n) + fn(x,n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure></li><li>递归求解方法二<br>化简原来的式子，设n=3，则有：<br><img src="/posts/e4ca25fd/%E9%80%92%E5%BD%92%E6%8E%A8%E7%90%86.jpg"><br>所以我们的递归函数的设计思路是：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">( <span class="keyword">double</span> x, <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">   <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">      返回x;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">      返回x*(<span class="number">1</span>-fn(x,n<span class="number">-1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>所以代码为：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">( <span class="keyword">double</span> x, <span class="keyword">int</span> n )</span></span>&#123;  </span><br><span class="line">   <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">      x;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">      result = x*(<span class="number">1</span>-fn(x,n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//化简后的代码写为</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)</span><br><span class="line">        result=x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        result=x-x*fn(x,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="弹球距离"><a href="#弹球距离" class="headerlink" title="弹球距离"></a>弹球距离</h3><p>设有一个球从高度为h米的地方落下，碰到地面后又弹到高度为原来p倍的位置，然后又落下，再弹起，再落下…。请编写函数求初始高度为h的球下落后到基本停下来（高度小于给定阈值TOL）时在空中所经过的路程总和。</p><h4 id="函数接口定义-1"><a href="#函数接口定义-1" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>double dist( double h, double p );</code><br>其中h是球的初始高度，p是球弹起高度与弹起前落下高度的比值；函数dist要返回球下落后到基本停下来时在空中所经过的路程总和。注意：当弹起的高度小于裁判程序定义的常数TOL时，弹起的距离不计算在内。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><p><code>1.0 0.4</code></p><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><p><code>2.331149</code></p><h4 id="解决问题代码-2"><a href="#解决问题代码-2" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">( <span class="keyword">double</span> h, <span class="keyword">double</span> p )</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> distance = h;</span><br><span class="line">    h = p * h;</span><br><span class="line">    <span class="keyword">while</span>(h &gt;= TOL)&#123;</span><br><span class="line">        distance = distance + <span class="number">2</span> * h;</span><br><span class="line">        h = p * h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性表元素的区间删除"><a href="#线性表元素的区间删除" class="headerlink" title="线性表元素的区间删除"></a>线性表元素的区间删除</h3><p>给定一个顺序存储的线性表，请设计一个函数删除所有值大于min而且小于max的元素。删除后表中剩余元素保持顺序存储，并且相对位置不能改变。</p><h4 id="函数接口定义-2"><a href="#函数接口定义-2" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>List Delete( List L, ElementType minD, ElementType maxD );</code><br>其中List结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last; <span class="comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>L是用户传入的一个线性表，其中ElementType元素可以通过&gt;、==、&lt;进行比较；minD和maxD分别为待删除元素的值域的下、上界。函数Delete应将Data[]中所有值大于minD而且小于maxD的元素删除，同时保证表中剩余元素保持顺序存储，并且相对位置不变，最后返回删除后的表。</p><h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">4 -8 2 12 1 5 9 3 3 10</span><br><span class="line">0 4</span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h4><p><code>4 -8 12 5 9 10 </code></p><h4 id="解决问题代码-3"><a href="#解决问题代码-3" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Delete</span><span class="params">( List L, ElementType minD, ElementType maxD )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= L-&gt;Last; i ++)&#123;</span><br><span class="line">        <span class="comment">//循环遍历找到不在这个区间的元素，然后将它们按顺序放到数组中</span></span><br><span class="line">        <span class="keyword">if</span>(L-&gt;Data[i] &lt;= minD || L-&gt;Data[i] &gt;= maxD)&#123;</span><br><span class="line">            j ++;</span><br><span class="line">            L-&gt;Data[j] = L-&gt;Data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组的长度就是j的长度</span></span><br><span class="line">    L-&gt;Last = j;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求链表的倒数第m个元素"><a href="#求链表的倒数第m个元素" class="headerlink" title="求链表的倒数第m个元素"></a>求链表的倒数第m个元素</h3><p>请设计时间和空间上都尽可能高效的算法，在不改变链表的前提下，求链式存储的线性表的倒数第m（&gt;0）个元素。</p><h4 id="函数接口定义-3"><a href="#函数接口定义-3" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>ElementType Find( List L, int m );</code><br>其中List结构定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Node *PtrToNode;</span><br><span class="line">struct Node &#123;</span><br><span class="line">    ElementType Data; /* 存储结点数据 */</span><br><span class="line">    PtrToNode   Next; /* 指向下一个结点的指针 */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>typedef PtrToNode List; /* 定义单链表类型 */<br>L是给定的带头结点的单链表；函数Find要将L的倒数第m个元素返回，并不改变原链表。如果这样的元素不存在，则返回一个错误标志ERROR。</p><h4 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 4 5 6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 4 5 6 </span><br></pre></td></tr></table></figure><h4 id="解决问题代码-4"><a href="#解决问题代码-4" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路：用p,q两个指针同时指向L,然后p,q指针相隔m,当p为链表最后一个元素的时候，q所指的元素的下一个就是要求的</span></span><br><span class="line"><span class="function">ElementType <span class="title">Find</span><span class="params">( List L, <span class="keyword">int</span> m )</span></span>&#123;</span><br><span class="line">    List p = L;</span><br><span class="line">    List q = L;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//两个指针间隔的长度</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;Next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(len != m)&#123;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">            len ++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">            q = q-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;Next-&gt;Data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="另类循环队列"><a href="#另类循环队列" class="headerlink" title="另类循环队列"></a>另类循环队列</h3><p>如果用一个循环数组表示队列，并且只设队列头指针Front，不设尾指针Rear，而是另设Count记录队列中元素个数。请编写算法实现队列的入队和出队操作。</p><h4 id="函数接口定义-4"><a href="#函数接口定义-4" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool AddQ( Queue Q, ElementType X );</span><br><span class="line">ElementType DeleteQ( Queue Q );</span><br></pre></td></tr></table></figure><p>其中Queue结构定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef int Position;</span><br><span class="line">typedef struct QNode *PtrToQNode;</span><br><span class="line">struct QNode &#123;</span><br><span class="line">    ElementType *Data;  /* 存储元素的数组   */</span><br><span class="line">    Position Front;     /* 队列的头指针     */</span><br><span class="line">    int Count;          /* 队列中元素个数   */</span><br><span class="line">    int MaxSize;        /* 队列最大容量     */</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToQNode Queue; </span><br></pre></td></tr></table></figure><p>注意：如果队列已满，AddQ函数必须输出“Queue Full”并且返回false；如果队列是空的，则DeleteQ函数必须输出“Queue Empty”，并且返回ERROR。</p><h4 id="解决问题代码-5"><a href="#解决问题代码-5" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AddQ</span><span class="params">( Queue Q, ElementType X )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;Count &gt;= Q-&gt;MaxSize)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue Full\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Q-&gt;Count ++;</span><br><span class="line">        Q-&gt;Data[(Q-&gt;Count+Q-&gt;Front)%Q-&gt;MaxSize] = X;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">( Queue Q )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;Count == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue Empty\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Q-&gt;Front = (Q-&gt;Front + <span class="number">1</span>) % Q-&gt;MaxSize;</span><br><span class="line">        Q-&gt;Count --;</span><br><span class="line">        <span class="keyword">return</span> Q-&gt;Data[Q-&gt;Front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双端（循环）队列"><a href="#双端（循环）队列" class="headerlink" title="双端（循环）队列"></a>双端（循环）队列</h3><p>双端队列（deque，即double-ended queue的缩写）是一种具有队列和栈性质的数据结构，即可以（也只能）在线性表的两端进行插入和删除。若以顺序存储方式实现双端队列，请编写例程实现下列操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Push(X,D)：将元素X插入到双端队列D的头；</span><br><span class="line">Pop(D)：删除双端队列D的头元素，并返回；</span><br><span class="line">Inject(X,D)：将元素X插入到双端队列D的尾部；</span><br><span class="line">Eject(D)：删除双端队列D的尾部元素，并返回。</span><br></pre></td></tr></table></figure><h4 id="函数接口定义-5"><a href="#函数接口定义-5" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">( ElementType X, Deque D )</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Deque D )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Inject</span><span class="params">( ElementType X, Deque D )</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Eject</span><span class="params">( Deque D )</span></span>;</span><br><span class="line">```  </span><br><span class="line">其中Deque结构定义如下：</span><br><span class="line">```c</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">PtrToQNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></span><br><span class="line">    ElementType *Data;      <span class="comment">/* 存储元素的数组   */</span></span><br><span class="line">    Position Front, Rear;   <span class="comment">/* 队列的头、尾指针 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;            <span class="comment">/* 队列最大容量     */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToQNode Deque; </span><br></pre></td></tr></table></figure><p>注意：Push和Inject应该在正常执行完操作后返回true，或者在出现非正常情况时返回false。当Front和Rear相等时队列为空，Pop和Eject必须返回由裁判程序定义的ERROR。</p><h4 id="解决问题代码-6"><a href="#解决问题代码-6" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">( ElementType X, Deque D )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((D-&gt;Rear+<span class="number">1</span>)%D-&gt;MaxSize == D-&gt;Front)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//为什么要加上D-&gt;MaxSize呢？因为D-&gt;Front-1有可能为负数，</span></span><br><span class="line">        <span class="comment">//所以加上D-&gt;MaxSize来确保(D-&gt;Front - 1 + D-&gt;MaxSize) % D-&gt;MaxSize整个是正数</span></span><br><span class="line">        D-&gt;Front = (D-&gt;Front - <span class="number">1</span> + D-&gt;MaxSize) % D-&gt;MaxSize;<span class="comment">//指向下一个元素后，对下一个元素赋值</span></span><br><span class="line">        D-&gt;Data[D-&gt;Front] = X;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Deque D )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(D-&gt;Rear == D-&gt;Front)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        D-&gt;Front = (D-&gt;Front + <span class="number">1</span>) % D-&gt;MaxSize;</span><br><span class="line">        <span class="comment">//返回的是被抛出的那个数，也就是返回front指向的上一个元素</span></span><br><span class="line">        <span class="keyword">return</span> D-&gt;Data[(D-&gt;Front<span class="number">-1</span>+D-&gt;MaxSize)%D-&gt;MaxSize];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Inject</span><span class="params">( ElementType X, Deque D )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((D-&gt;Rear+<span class="number">1</span>)%D-&gt;MaxSize == D-&gt;Front)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//先对rear指向的这个元素赋值，然后rear才指向下一个元素</span></span><br><span class="line">        D-&gt;Data[D-&gt;Rear] = X;</span><br><span class="line">        D-&gt;Rear = (D-&gt;Rear + <span class="number">1</span>) % D-&gt;MaxSize;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElementType <span class="title">Eject</span><span class="params">( Deque D )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(D-&gt;Rear == D-&gt;Front)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        D-&gt;Rear = (D-&gt;Rear - <span class="number">1</span> + D-&gt;MaxSize) % D-&gt;MaxSize;</span><br><span class="line">        <span class="comment">//因为rear指向的是有数据的后一个没有数据的元素，所以这里返回的是</span></span><br><span class="line">        <span class="comment">//抛出后rear位置的元素的数据，也就是返回被抛出的数据</span></span><br><span class="line">        <span class="keyword">return</span> D-&gt;Data[D-&gt;Rear];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="另类堆栈"><a href="#另类堆栈" class="headerlink" title="另类堆栈"></a>另类堆栈</h3><p>在栈的顺序存储实现中，另有一种方法是将Top定义为栈顶的上一个位置。请编写程序实现这种定义下堆栈的入栈、出栈操作。如何判断堆栈为空或者满？</p><h4 id="函数接口定义-6"><a href="#函数接口定义-6" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">( Stack S, ElementType X )</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Stack S )</span></span>;</span><br></pre></td></tr></table></figure><p>其中Stack结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">PtrToSNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> &#123;</span></span><br><span class="line">    ElementType *Data;  <span class="comment">/* 存储元素的数组 */</span></span><br><span class="line">    Position Top;       <span class="comment">/* 栈顶指针       */</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;        <span class="comment">/* 堆栈最大容量   */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToSNode Stack;</span><br></pre></td></tr></table></figure><p>注意：如果堆栈已满，Push函数必须输出“Stack Full”并且返回false；如果队列是空的，则Pop函数必须输出“Stack Empty”，并且返回ERROR。</p><h4 id="解决问题代码-7"><a href="#解决问题代码-7" class="headerlink" title="解决问题代码"></a>解决问题代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">( Stack S, ElementType X )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;MaxSize == S-&gt;Top)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stack Full\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        S-&gt;Data[S-&gt;Top] = X;</span><br><span class="line">        S-&gt;Top ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Stack S )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;Top == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stack Empty\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        S-&gt;Top --;</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Data[S-&gt;Top];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;本文是观看浙江大学的数据结构课程第二讲做的习题笔记，包括：递增的整数序列链表的插入，两个有序链表序列的合并，递归求简单交错幂级数的部分和，弹球距离四个习题&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>第一讲习题</title>
    <link href="https://yanxiaoblog.github.io/posts/75854af9/"/>
    <id>https://yanxiaoblog.github.io/posts/75854af9/</id>
    <published>2021-12-12T17:42:10.000Z</published>
    <updated>2021-12-13T00:46:37.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文是观看浙江大学的数据结构课程第二讲做的习题笔记，包括：二分法查找，有序数组的插入两个习题</p><span id="more"></span><h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><h4 id="什么是二分法查找"><a href="#什么是二分法查找" class="headerlink" title="什么是二分法查找"></a>什么是二分法查找</h4><ul><li>二分法查找适用于数据量较大时，但是数据需要先排好顺序。<br>主要思想是：（设查找的数组区间为array[low, high]）<br>（1）确定该区间的中间位置K<br>（2）将查找的值T与array[k]比较。若相等，查找成功返回此位置；否则确定新的查找区域，继续二分查找。</li><li>区域确定如下：a.array[k]&gt;T 由数组的有序性可知array[k,k+1,……,high] &gt; T;故新的区间为array[low,……，K-1]b.array[k] &lt; T 类似上面查找区间为array[k+1,……，high]。每一次查找与中间值比较，可以确定是否查找成功，不成功当前查找区间将缩小一半，递归查找即可。时间复杂度为:O(log2n)。<h4 id="二分法查找的原理解析"><a href="#二分法查找的原理解析" class="headerlink" title="二分法查找的原理解析"></a>二分法查找的原理解析</h4>设有如下排好序的数组：<br><img src="/posts/75854af9/%E6%95%B0%E7%BB%84.jpg"><br>在这个数组中使用二分法查找数组中值为9的这个元素的下标，如图所示：<br><img src="/posts/75854af9/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE.jpg"></li><li>首先将数组从中间分成两个部分，一边部分和右边部分，然后判断9是在左边还是右边</li><li>发现9是在右边的，所以将左边的标记left移到center+1的位置，然后center通过center=(left+right)/2得到新的位置，再判断9是在center的左边还是右边</li><li>发现9仍然是在center的右边，那么就继续将left移到center+1的位置，然后center再通过center=(left+right)/2得到新的位置，然后进行判断9的位置</li><li>发现9在center指向的位置，那么就返回center所在的下标</li></ul><h4 id="二分法查找的代码实现"><a href="#二分法查找的代码实现" class="headerlink" title="二分法查找的代码实现"></a>二分法查找的代码实现</h4><ul><li>java代码实现：数组结合的二分法查找<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">function02</span><span class="params">( <span class="keyword">int</span>[] arr, <span class="keyword">int</span> X )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = arr.length-<span class="number">1</span>, center;</span><br><span class="line">    <span class="keyword">while</span> (right &gt;= left) &#123;</span><br><span class="line">        center = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[center] &gt; X)</span><br><span class="line">            right = center - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[center] == X)&#123;</span><br><span class="line">            <span class="keyword">return</span> center;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            left = center + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>c代码实现：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">BinarySearch</span><span class="params">( List L, ElementType X )</span></span>&#123;</span><br><span class="line">Position left = <span class="number">0</span>; </span><br><span class="line">Position right = L-&gt;Last;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123;  <span class="comment">// 考虑一下这为什么要取等？</span></span><br><span class="line"><span class="comment">//因为有可能left和right指向同一个节点，center=left=right，而这个节点就是我们要找的，或者没有找到时用来跳出循环</span></span><br><span class="line">Position center = (left+right)/<span class="number">2</span>;  <span class="comment">//先找中间值 </span></span><br><span class="line"><span class="keyword">if</span>(L-&gt;Data[center] &lt; X)&#123;     <span class="comment">//比中间值大，X 在右半边 </span></span><br><span class="line">left = center+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(X &lt; L-&gt;Data[center])&#123;   <span class="comment">//比中间值小，X 在左半边 </span></span><br><span class="line">right = center<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>  <span class="comment">//找到了，直接返回 </span></span><br><span class="line"><span class="keyword">return</span> center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NotFound;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h3 id="有序数组的插入"><a href="#有序数组的插入" class="headerlink" title="有序数组的插入"></a>有序数组的插入</h3><p>本题要求将任一给定元素插入从大到小排好序的数组中合适的位置，以保持结果依然有序。</p><h4 id="函数接口定义"><a href="#函数接口定义" class="headerlink" title="函数接口定义"></a>函数接口定义</h4><p><code>bool Insert( List L, ElementType X );</code><br>其中List结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];<span class="comment">//数组</span></span><br><span class="line">    Position Last; <span class="comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">( List L, ElementType X )</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断数组是否已满</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;Last == MAXSIZE<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环遍历数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= L-&gt;Last; i ++)&#123;</span><br><span class="line">        <span class="comment">//判断数组中是否已经存在这个值的元素</span></span><br><span class="line">        <span class="keyword">if</span>(L-&gt;Data[i] == X)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果这个元素的值大于x，那么就将这个元素及这个元素后面的元素都完后挪一个位置，然后将x插入这个元素的位置</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (L-&gt;Data[i]&lt;X) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=L-&gt;Last; j&gt;=i; j--) <span class="comment">//找到i的位置</span></span><br><span class="line">                L-&gt;Data[j+<span class="number">1</span>]=L-&gt;Data[j]; </span><br><span class="line">            L-&gt;Data[i]=X; </span><br><span class="line">            L-&gt;Last=L-&gt;Last+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果x比数组的最后一个数还小，那么就插入数组的末尾</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i == L-&gt;Last &amp;&amp; X &lt; L-&gt;Data[i])&#123;</span><br><span class="line">            L-&gt;Data[L-&gt;Last+<span class="number">1</span>] = X;</span><br><span class="line">            L-&gt;Last=L-&gt;Last+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;本文是观看浙江大学的数据结构课程第二讲做的习题笔记，包括：二分法查找，有序数组的插入两个习题&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>线性结构_线性表_栈_队列</title>
    <link href="https://yanxiaoblog.github.io/posts/799b3d04/"/>
    <id>https://yanxiaoblog.github.io/posts/799b3d04/</id>
    <published>2021-12-12T08:58:59.000Z</published>
    <updated>2021-12-12T03:26:53.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线性结构——百度百科"><a href="#线性结构——百度百科" class="headerlink" title="线性结构——百度百科"></a>线性结构——百度百科</h3><ul><li>线性结构是一个有序数据元素的集合。<ul><li>常用的线性结构有：线性表，栈，队列，双队列，串(一维数组)。<span id="more"></span></li></ul></li><li>关于广义表、数组(高维)，是一种非线性的数据结构。<ul><li>常见的非线性结构有：二维数组，多维数组，广义表，树(二叉树等)，图 </li></ul></li></ul><h4 id="线性结构的特征——百度百科"><a href="#线性结构的特征——百度百科" class="headerlink" title="线性结构的特征——百度百科"></a>线性结构的特征——百度百科</h4><ul><li>集合中必存在唯一的一个”第一个元素”；</li><li>集合中必存在唯一的一个”最后的元素”；</li><li>除最后元素之外，其它数据元素均有唯一的”后继”；</li><li>除第一元素之外，其它数据元素均有唯一的”前驱”。</li></ul><p>数据结构中线性结构指的是数据元素之间存在着“一对一”的线性关系的数据结构</p><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><h4 id="什么是线性表"><a href="#什么是线性表" class="headerlink" title="什么是线性表"></a>什么是线性表</h4><p>线性表是n个具有相同特性的数据元素的有限序列。<br>线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的 。<br>（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储，但是把最后一个数据元素的尾指针指向了首位结点）。</p><h4 id="线性表之数组"><a href="#线性表之数组" class="headerlink" title="线性表之数组"></a>线性表之数组</h4><h5 id="数组的概述"><a href="#数组的概述" class="headerlink" title="数组的概述"></a>数组的概述</h5><p>数组是一片连续的存储空间结构，这片空间存储着想同类型的数据</p><ul><li>优点：查询快，通过索引直接查找；有序添加，添加速度快，允许重复</li><li>缺点：<ul><li>中间插入和删除效率慢</li><li>只能初始化一片固定长度的空间，如果空间满了，只能重新创建一个更大的空间，然后将原来数组的数据拷贝过去</li><li>只能存放一种类型的数据</li></ul></li><li>应用场景：如果应用需要快速访问数据，很少插入和删除元素，就应该用数组</li></ul><h5 id="数组的定义和初始化"><a href="#数组的定义和初始化" class="headerlink" title="数组的定义和初始化"></a>数组的定义和初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100  <span class="comment">// MAXSIZE 定义为 Data 数组的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;  <span class="comment">// ElementType 可定义为任意类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">   ElementType Data[MAXSIZE]; </span><br><span class="line">   <span class="keyword">int</span> Last;  <span class="comment">// Last 定义线性表的最后一个元素</span></span><br><span class="line">&#125;;</span><br><span class="line">List L;</span><br><span class="line"><span class="comment">//访问下标为 i 的元素：L-&gt;Data[i]</span></span><br><span class="line"><span class="comment">//线性表的长度：L-&gt;Last+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个空数组</span></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List L;</span><br><span class="line">    L = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">    L-&gt;Last = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组的查找"><a href="#数组的查找" class="headerlink" title="数组的查找"></a>数组的查找</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按值查找 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(ElementType X,List L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i] != X)  </span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;Last &lt; i)  <span class="comment">//如果没找到，返回 -1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">// 找到后返回下标 </span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按序查找</span></span><br><span class="line"><span class="function">ElementType <span class="title">FindKth</span><span class="params">(<span class="keyword">int</span> K,List L)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(K &lt; <span class="number">0</span> || L-&gt;Last &lt; K)&#123;  <span class="comment">//位置越界</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;L-&gt;Data[%d]不存在元素&quot;</span>,K);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;Data[K];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组元素的插入"><a href="#数组元素的插入" class="headerlink" title="数组元素的插入"></a>数组元素的插入</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ElementType X,<span class="keyword">int</span> i,List L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="comment">//先判断数组是否已满</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;Last == MAXSIZE<span class="number">-1</span>)&#123;  <span class="comment">//位置已满 </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;表满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再判断插入的位置是否越界</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span> || L-&gt;Last+<span class="number">1</span> &lt; i)&#123;  <span class="comment">//位置越界，如果将数插入 L-&gt;Data[L-&gt;Last+1]，下面都不用腾位置了 </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;位置不合法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入第i个位置，将数组的i-1以及后面的数据全部往后挪一位，再进行插入</span></span><br><span class="line">    <span class="keyword">for</span>(j=L-&gt;Last;j&gt;=i;j--)   <span class="comment">// 从后往前依次向后挪一个，给 a[i]腾出位置     </span></span><br><span class="line">        L-&gt;Data[j+<span class="number">1</span>] = L-&gt;Data[j];   </span><br><span class="line">    L-&gt;Data[i] = X;    <span class="comment">//新元素插入</span></span><br><span class="line">    L-&gt;Last++;    <span class="comment">// Last仍然指向最后元素</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="数组元素的删除"><a href="#数组元素的删除" class="headerlink" title="数组元素的删除"></a>数组元素的删除</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> i,List L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="comment">//判断删除的位置是否越界</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span> || L-&gt;Last &lt;i)&#123;  <span class="comment">//位置越界，而删除最多到 L-&gt;Data[L-&gt;Last]</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;L-&gt;Data[%d]不存在元素&quot;</span>,i);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除第i个元素(即位置为i-1)，直接将位置为i以及后面元素全部往前挪一位</span></span><br><span class="line">    <span class="keyword">for</span>(j=i;j&lt;=L-&gt;Last;j++)   <span class="comment">// 从前往后依次向前挪一个，将 a[i] 覆盖了 </span></span><br><span class="line">        L-&gt;Data[j<span class="number">-1</span>] = L-&gt;Data[j];</span><br><span class="line">    L-&gt;Last--;  <span class="comment">// Last仍然指向最后元素</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线性表之链表"><a href="#线性表之链表" class="headerlink" title="线性表之链表"></a>线性表之链表</h4><h5 id="链表的概述"><a href="#链表的概述" class="headerlink" title="链表的概述"></a>链表的概述</h5><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</p><ul><li>优点：有序添加、增删改速度快，对于链表数据结构，增加和删除只要修改元素中的指针就可以了</li><li>查询慢，如果要访问链表中一个元素，就需要从第一个元素开始查找</li><li>应用场景：如果应用需要经常插入和删除元素，就应该用链表</li></ul><h5 id="链表的定义和初始化"><a href="#链表的定义和初始化" class="headerlink" title="链表的定义和初始化"></a>链表的定义和初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链表的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType; <span class="comment">// ElementType 可定义为任意类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElementType Data;   <span class="comment">//数据域 </span></span><br><span class="line">List Next;   <span class="comment">// 下一个链表的地址 </span></span><br><span class="line">&#125;; </span><br><span class="line">List L;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化，创建一个空的头节点</span></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">List L = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">L = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表的查找"><a href="#链表的查找" class="headerlink" title="链表的查找"></a>链表的查找</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按序查找 </span></span><br><span class="line"><span class="function">List <span class="title">FindKth</span><span class="params">(<span class="keyword">int</span> K,List L)</span></span>&#123;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;  <span class="comment">//从 1 开始 </span></span><br><span class="line"><span class="keyword">while</span>(p &amp;&amp; i&lt;K)&#123;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == K)    <span class="comment">// 找到了 </span></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line"><span class="keyword">else</span>    <span class="comment">// 未找到 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值查找  </span></span><br><span class="line"><span class="function">List <span class="title">Find</span><span class="params">(ElementType X,List L)</span></span>&#123;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">while</span>(p &amp;&amp; p-&gt;Data!=X)</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line"><span class="comment">// 找到了，返回 p</span></span><br><span class="line"><span class="comment">// 未找到，返回 NULL，此时 p 等于 NULL </span></span><br><span class="line"><span class="keyword">return</span> p;   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="链表的长度"><a href="#链表的长度" class="headerlink" title="链表的长度"></a>链表的长度</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(List L)</span></span>&#123;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;  <span class="comment">// 当 p 不为空 </span></span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="链表节点的插入"><a href="#链表节点的插入" class="headerlink" title="链表节点的插入"></a>链表节点的插入</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Insert</span><span class="params">(ElementType X,<span class="keyword">int</span> i,List L)</span></span>&#123;</span><br><span class="line">List p,s;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>)&#123;     <span class="comment">// 新结点插入在表头 </span></span><br><span class="line">s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">s-&gt;Data = X;</span><br><span class="line">s-&gt;Next = L;</span><br><span class="line"><span class="keyword">return</span> s;     <span class="comment">//插入的结点为头结点 </span></span><br><span class="line">&#125;</span><br><span class="line">p = FindKth(i<span class="number">-1</span>,L);   <span class="comment">// 找到第 i-1 个结点</span></span><br><span class="line"><span class="keyword">if</span>(!p)&#123;   <span class="comment">// 第 i-1 个结点不存在 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">s-&gt;Data = X;</span><br><span class="line">s-&gt;Next = p-&gt;Next;   <span class="comment">//将 s 的下一个结点指向 p 的下一个结点 </span></span><br><span class="line">p-&gt;Next = s;   <span class="comment">// 将 p 的下一结点改为 s</span></span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表节点的删除"><a href="#链表节点的删除" class="headerlink" title="链表节点的删除"></a>链表节点的删除</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> i,List L)</span></span>&#123;</span><br><span class="line">List p,t;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;   <span class="comment">//如果要删除头结点 </span></span><br><span class="line">t = L;</span><br><span class="line"><span class="keyword">if</span>(L)   <span class="comment">// 如果不为空 </span></span><br><span class="line">L = L-&gt;Next;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(t);   <span class="comment">// 释放被删除结点 </span></span><br><span class="line"><span class="keyword">return</span> L; </span><br><span class="line">&#125;</span><br><span class="line">p = FindKth(i<span class="number">-1</span>,L);    <span class="comment">// 查找第 i-1 个结点</span></span><br><span class="line"><span class="keyword">if</span>(!p || !(p-&gt;Next))&#123;     <span class="comment">// 第 i-1 个或第 i 个结点不存在 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">t = p-&gt;Next;    <span class="comment">// t 指向第 i 个结点 </span></span><br><span class="line">p-&gt;Next = t-&gt;Next;  <span class="comment">//从链表删除 </span></span><br><span class="line"><span class="built_in">free</span>(t);  <span class="comment">// 释放被删除结点 </span></span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表元素的遍历输出"><a href="#链表元素的遍历输出" class="headerlink" title="链表元素的遍历输出"></a>链表元素的遍历输出</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(List L)</span></span>&#123;</span><br><span class="line">List t;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;<span class="comment">//使用flag来判断链表是否为空</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前链表为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(t = L;t;t =t-&gt;Next)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,t-&gt;Data);</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组和链表的对比"><a href="#数组和链表的对比" class="headerlink" title="数组和链表的对比"></a>数组和链表的对比</h4><ul><li>对比1<ul><li>数组是将元素在内存中连续存放。</li><li>链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。</li></ul></li><li>对比2<ul><li>数组必须事先定义固定的长度，不能适应数据动态的增减的情况。当数据增加时，可能超出原先定义的元素个数；当数据减少时，造成内存浪费； </li><li>链表动态地进行存储分配，可以适应数据动态地增减的情况。</li></ul></li><li>对比3<ul><li>（静态）数组从栈中分配空间，对于程序员方便快速，但是自由度小；</li><li>链表从堆中分配空间，自由度大但是申请管理比较麻烦。</li></ul></li></ul><h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><h4 id="什么是堆栈"><a href="#什么是堆栈" class="headerlink" title="什么是堆栈"></a>什么是堆栈</h4><p>堆栈是一种数据结构，而且是一种数据项按序排列的数据结构，只能在一端(称为栈顶(top))对数据项进行插入和删除。在单片机应用中，堆栈是个特殊的存储区，主要功能是暂时存放数据和地址，通常用来保护断点和现场。</p><h4 id="堆栈的特点"><a href="#堆栈的特点" class="headerlink" title="堆栈的特点"></a>堆栈的特点</h4><ul><li>只在一端（栈顶，Top）做插入、删除</li><li>后入(入栈（Push）) 先出(出栈（Pop）)</li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>优点：提供后进先出的存储方式，添加速度快，允许重复</li><li>缺点：只能在一头操作数据，存取其他项很慢</li></ul><h4 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span> </span></span><br><span class="line"><span class="comment">//栈的顺序存储的定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100   <span class="comment">// 堆栈元素的最大个数 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType; <span class="comment">// ElementType 暂时定义为 int 类型 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span>&#123;</span></span><br><span class="line">ElementType Data[MaxSize];   <span class="comment">// 存储堆栈元素</span></span><br><span class="line"><span class="keyword">int</span> Top;  <span class="comment">// 记录栈顶元素下标 </span></span><br><span class="line">&#125;; </span><br><span class="line">Stack S;</span><br><span class="line"></span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span>;  <span class="comment">// 初始化堆栈 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span>; <span class="comment">// 判断堆栈是否已满 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;   <span class="comment">// 判断堆栈是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,ElementType item)</span></span>;   <span class="comment">// 入栈 </span></span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span>;   <span class="comment">// 出栈 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化堆栈 </span></span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">S-&gt;Top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> S;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否已满 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (S-&gt;Top == MaxSize<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (S-&gt;Top == <span class="number">-1</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,ElementType item)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先判断栈是否已满</span></span><br><span class="line"><span class="keyword">if</span>(IsFull(S))&#123;   <span class="comment">// Top 从 0 开始 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆栈满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">S-&gt;Top++;   <span class="comment">// 栈顶元素加一 </span></span><br><span class="line">S-&gt;Data[S-&gt;Top] = item;   <span class="comment">// 放进最上 </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(IsEmpty(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆栈空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ElementType val = S-&gt;Data[S-&gt;Top];  <span class="comment">//取出最上 </span></span><br><span class="line">S-&gt;Top--;  <span class="comment">// 栈顶元素减一 </span></span><br><span class="line"><span class="keyword">return</span> val;<span class="comment">//返回取出来的元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//函数调用...</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="栈的链表存储实现"><a href="#栈的链表存储实现" class="headerlink" title="栈的链表存储实现"></a>栈的链表存储实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="comment">//栈的链式存储定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span>&#123;</span></span><br><span class="line">ElementType Data;</span><br><span class="line">Stack Next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span>;  <span class="comment">// 初始化链栈 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;  <span class="comment">// 判断链栈是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,ElementType item)</span></span>;  <span class="comment">// 入栈 </span></span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span>;  <span class="comment">// 出栈</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 </span></span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">Stack S;</span><br><span class="line">S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">S-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (S-&gt;Next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack S,ElementType item)</span></span>&#123;</span><br><span class="line">Stack temp;</span><br><span class="line">temp = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">temp-&gt;Data = item;</span><br><span class="line"><span class="comment">// 链栈栈顶元素是链表头结点，新入栈的节点在栈顶元素(是刚开始创建链表时为空的节点)后面 </span></span><br><span class="line">temp-&gt;Next = S-&gt;Next;   </span><br><span class="line">S-&gt;Next = temp;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">Stack First;</span><br><span class="line">ElementType TopVal;</span><br><span class="line">    <span class="comment">//先判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(IsEmpty(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆栈空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//因为链表第一个元素时空的，所以栈的顶部是链表的第二个节点</span></span><br><span class="line">First = S-&gt;Next;   <span class="comment">// 出栈第一个元素在栈顶元素后面 </span></span><br><span class="line">S-&gt;Next = First-&gt;Next;  <span class="comment">//把第一个元素从链栈删除 </span></span><br><span class="line">TopVal = First-&gt;Data;   <span class="comment">// 取出被删除结点的值 </span></span><br><span class="line"><span class="built_in">free</span>(First);  <span class="comment">// 释放空间 </span></span><br><span class="line"><span class="keyword">return</span> TopVal; <span class="comment">//返回出栈数据</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//函数调用...</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h3><h4 id="队列的概述"><a href="#队列的概述" class="headerlink" title="队列的概述"></a>队列的概述</h4><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><h4 id="队列的分类"><a href="#队列的分类" class="headerlink" title="队列的分类"></a>队列的分类</h4><ul><li>顺序队列：建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置</li><li>循环队列：在实际使用队列时，为了使队列空间能重复使用，往往对队列的使用方法稍加改进：无论插入或删除，一旦rear指针增1或front指针增1 时超出了所分配的队列空间，就让它指向这片连续空间的起始位置</li></ul><h4 id="队列的特点"><a href="#队列的特点" class="headerlink" title="队列的特点"></a>队列的特点</h4><p>插入和删除操作：只能在一端（front）插入，而在另一端（rear）删除<br>先进(入队列) 先出(出队列)</p><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>优点：提供先进先出的存储方式，添加速度快，允许重复；</li><li>缺点：只能在一头添加，另一头获取，存取其他项很慢；</li></ul><h4 id="循环队列的顺序存储"><a href="#循环队列的顺序存储" class="headerlink" title="循环队列的顺序存储"></a>循环队列的顺序存储</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="comment">//循环队列的定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">Queue</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">ElementType Data[MaxSize];</span><br><span class="line"><span class="keyword">int</span> front;   <span class="comment">// 记录队头 </span></span><br><span class="line"><span class="keyword">int</span> rear;    <span class="comment">// 记录队尾 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">()</span></span>;  <span class="comment">// 初始化队列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddQ</span><span class="params">(Queue Q,ElementType item)</span></span>;  <span class="comment">//  入队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Queue Q)</span></span>; <span class="comment">// 判断队列是否已满 </span></span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span>;  <span class="comment">// 出队 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>; <span class="comment">// 判断队列是否为空 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 </span></span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue Q;</span><br><span class="line">Q = (Queue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct QNode));</span><br><span class="line">    <span class="comment">//front==rear时队列为空</span></span><br><span class="line">Q-&gt;front = <span class="number">-1</span>;</span><br><span class="line">Q-&gt;rear = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> Q;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否已满</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如队列的大小为100，front=0，rear=99,此时队列已满，那么怎么判断队列已满呢？如下return语句：</span></span><br><span class="line"> <span class="keyword">return</span> ((Q-&gt;rear+<span class="number">1</span>) % MaxSize == Q-&gt;front);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddQ</span><span class="params">(Queue Q,ElementType item)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先判断队列是否已满</span></span><br><span class="line"><span class="keyword">if</span>(IsFull(Q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="comment">//rear往前走一位，因为是循环队列，有可能是走到最开始的位置，所以使用(Q-&gt;rear+1) % MaxSize来使rear往前走一个位置</span></span><br><span class="line">Q-&gt;rear = (Q-&gt;rear+<span class="number">1</span>) % MaxSize;</span><br><span class="line">Q-&gt;Data[Q-&gt;rear] = item; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Q-&gt;front == Q-&gt;rear);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(IsEmpty(Q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//front也可能会走到最开始的位置，所以也是使用(Q-&gt;front+1) % MaxSize方法来使front往前走一个位置</span></span><br><span class="line">Q-&gt;front = (Q-&gt;front+<span class="number">1</span>) % MaxSize;</span><br><span class="line"><span class="keyword">return</span> Q-&gt;Data[Q-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//函数调用...</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="队列的链式存储"><a href="#队列的链式存储" class="headerlink" title="队列的链式存储"></a>队列的链式存储</h4><p>队列使用链式存储就不存在空间的浪费了，所以就没有必要使用循环队列了。队列的链式存储判断队列是否为空时，直接判断front是否为null就可以了，当front==rear时，队列有一个元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义一个链式存储的队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">Queue</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ElementType Data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">Next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">rear</span>;</span>    <span class="comment">// 指向队尾结点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">front</span>;</span>   <span class="comment">// 指向队头结点 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">()</span></span>;  <span class="comment">// 初始化队列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddQ</span><span class="params">(Queue Q,ElementType item)</span></span>;  <span class="comment">//  入队</span></span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span>;  <span class="comment">// 出队 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>; <span class="comment">// 判断队列是否为空 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 </span></span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue Q;</span><br><span class="line">Q = (Queue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct QNode));</span><br><span class="line">Q-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">Q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//当front为null时，队列为空</span></span><br><span class="line"><span class="keyword">return</span> (Q-&gt;front == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddQ</span><span class="params">(Queue Q,ElementType item)</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">node</span>;</span></span><br><span class="line">node = (struct Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">node-&gt;Data = item;</span><br><span class="line">node-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//先判断队列是否为空，为空和不为空的入队操作不一样</span></span><br><span class="line"><span class="keyword">if</span>(Q-&gt;rear==<span class="literal">NULL</span>)&#123;  <span class="comment">//此时队列空 </span></span><br><span class="line">Q-&gt;rear = node;</span><br><span class="line">Q-&gt;front = node;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123; <span class="comment">//不为空 </span></span><br><span class="line">Q-&gt;rear-&gt;Next = node;  <span class="comment">// 将结点入队 </span></span><br><span class="line">Q-&gt;rear = node;   <span class="comment">// rear 仍然保持最后 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">FrontCell</span>;</span><span class="comment">//用来存储出队的元素，然后释放这个元素的空间</span></span><br><span class="line">ElementType FrontElem;<span class="comment">//用来存储出队元素的数据，作为函数的返回值</span></span><br><span class="line">    <span class="comment">//先判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(IsEmpty(Q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">FrontCell = Q-&gt;front;<span class="comment">//出队只能从最前面的元素出队</span></span><br><span class="line"><span class="keyword">if</span>(Q-&gt;front == Q-&gt;rear)&#123; <span class="comment">// 队列中只有一个元素 </span></span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="literal">NULL</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Q-&gt;front = Q-&gt;front-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line">FrontElem = FrontCell-&gt;Data;</span><br><span class="line"><span class="built_in">free</span>(FrontCell);<span class="comment">// 释放出队元素的空间</span></span><br><span class="line"><span class="keyword">return</span> FrontElem;<span class="comment">//返回出队元素的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//函数调用...</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;线性结构——百度百科&quot;&gt;&lt;a href=&quot;#线性结构——百度百科&quot; class=&quot;headerlink&quot; title=&quot;线性结构——百度百科&quot;&gt;&lt;/a&gt;线性结构——百度百科&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;线性结构是一个有序数据元素的集合。&lt;ul&gt;
&lt;li&gt;常用的线性结构有：线性表，栈，队列，双队列，串(一维数组)。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法概述</title>
    <link href="https://yanxiaoblog.github.io/posts/ddb07891/"/>
    <id>https://yanxiaoblog.github.io/posts/ddb07891/</id>
    <published>2021-12-11T22:31:32.000Z</published>
    <updated>2021-12-12T03:40:12.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><p>定义：数据结构就是数据对象在计算机的组织方式，包括：包括逻辑结构和物理结构，而数据又必定与作用在数据上的操作(一般指增删改查操作)相关联，完成这些操作的方法就是算法(即算法就是对数据进行鞥删改查等操作的方法)</p><span id="more"></span><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="相关定义"><a href="#相关定义" class="headerlink" title="相关定义"></a>相关定义</h4><ul><li>数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。 ——Sartaj Sahni 《数据结构、算法与应用》</li><li>数据结构是 ADT（Abstract Data Type，数据抽象类型）的物理实现。 ——Clifford A.Shaffer 《数据结构与算法分析》</li><li>数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。 ——中文维基百科</li></ul><h4 id="什么和解决问题的效率相关"><a href="#什么和解决问题的效率相关" class="headerlink" title="什么和解决问题的效率相关"></a>什么和解决问题的效率相关</h4><ul><li>数据的组织方式</li><li>数据的空间利用效率</li><li>算法的巧妙程度</li></ul><h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><ul><li>什么是数据类型<br>数据类型包括数据对象集和数据对象相关联的操作集</li><li>什么是抽象数据类型<br>抽象数据类型即描述数据类型的方法不依赖于具体实现，也就是说与存放数据的机器无关、与数据存储的物理结构无关、与实现操作的算法和编程语言均无关，只描述数据对象集和操作集是什么，并不涉及如何做</li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h4><p>通过某种方法对某个数据结构中的数据进行操作，最后得出一个结果，这个操作数据结构中的数据的方法就是算法</p><h4 id="算法满足的条件"><a href="#算法满足的条件" class="headerlink" title="算法满足的条件"></a>算法满足的条件</h4><ul><li>是一个有限的指令集</li><li>可以有输入，也可以没有输入</li><li>必须要有输出</li><li>一定是在有限的步骤后终止</li><li>每一条指令必须有明确的目标，不可有歧义</li><li>复杂度要在计算机的处理范围之内</li><li>描述应不依赖于任何一种计算机语言以及具体的实现手段</li></ul><h4 id="描述算法好坏的方式"><a href="#描述算法好坏的方式" class="headerlink" title="描述算法好坏的方式"></a>描述算法好坏的方式</h4><p>使用算法复杂度来进行描述，包括：</p><ul><li>空间复杂度：算法执行时占存储空间的大小</li><li>时间复杂度：算法执行时耗费时间的长短</li></ul><h4 id="复杂度分析运算基本规则"><a href="#复杂度分析运算基本规则" class="headerlink" title="复杂度分析运算基本规则"></a>复杂度分析运算基本规则</h4><ul><li>顺序结构：直接相加</li><li>循环中：复杂度=一次循环的复杂度 x 循环次数</li><li>嵌套循环中：循环规模的乘积 x 一次循环的复杂度</li><li>if/else语句：选其中复杂度最高的</li><li>递归调用：递归的次数 x 每次递归中的操作次数</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;数据结构与算法&quot;&gt;&lt;a href=&quot;#数据结构与算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法&quot;&gt;&lt;/a&gt;数据结构与算法&lt;/h3&gt;&lt;p&gt;定义：数据结构就是数据对象在计算机的组织方式，包括：包括逻辑结构和物理结构，而数据又必定与作用在数据上的操作(一般指增删改查操作)相关联，完成这些操作的方法就是算法(即算法就是对数据进行鞥删改查等操作的方法)&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>最大子列和问题的四种算法</title>
    <link href="https://yanxiaoblog.github.io/posts/e87b7e2/"/>
    <id>https://yanxiaoblog.github.io/posts/e87b7e2/</id>
    <published>2021-12-06T21:41:37.000Z</published>
    <updated>2021-12-06T15:02:30.789Z</updated>
    
    <content type="html"><![CDATA[<p>最大子列和问题有四种算法，直接算法和直接算法的改良版，分而治之算法和在线算法</p><span id="more"></span><h3 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h3><p>算法1是最笨的一种方法，就是将每一种可能性都计算一遍，并且每种可能的计算都是从头开始叠加，时间复杂度为O(n^3)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*最大子列和问题：求数组a[]中元素的最大子列和*/</span></span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">2</span>, -<span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span> , -<span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> thisSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxSum = <span class="number">0</span>;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//把每一种情况都列出来，然后进行比较，但是这种算法的时间复杂度是n的3次方，时间复杂度非常大</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; a.length; j ++)&#123;</span><br><span class="line">            thisSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; k ++)&#123;</span><br><span class="line">                thisSum += a[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum)&#123;</span><br><span class="line">                maxSum = thisSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(maxSum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图，为i=1时thisSum的叠加：<br><img src="/posts/e87b7e2/%E7%AE%97%E6%B3%951.jpg"></p><h3 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h3><p>第二种方法时第一种方法的改进，也是将每一种可能都列举出来，但并不是种可能都是从开头进行叠加，而是在每次计算thisSum的结果后面进行叠加，然后进行比较，算法二的时间复杂度是O(n^2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//这种方法也是把所有可能都列出来，然后进行比较，但是和上一种不同的是,这种方法不是每次都重头加起，而是在每次的结果后面进行叠加，得到结果,这种算法的时间复杂度是n的2次方，比上一次好了很多</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++)&#123;</span><br><span class="line">        thisSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; a.length; j ++)&#123;</span><br><span class="line">            thisSum += a[j];</span><br><span class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum)&#123;</span><br><span class="line">                maxSum = thisSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(maxSum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图，为i=1时thisSum的叠加<br><img src="/posts/e87b7e2/%E7%AE%97%E6%B3%952.jpg"></p><h3 id="算法三"><a href="#算法三" class="headerlink" title="算法三"></a>算法三</h3><p>算法三是分而治之的算法，就是使用递归算法不停地从中间分隔开来，最后分解成一个不可分割的最小问题，通过求出小问题的解来一步步求出最后解的问题，这样讲很抽象，看图：<br><img src="/posts/e87b7e2/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B01.jpg">  </p><ul><li>首先，假设数组中有8个元素，如上图所示，我们先沿红色的线从中间分开，得到两部分，发现可以进一步的划分，直到使用黄色的线划分完毕。</li><li>再看4，-3，我们可以看出最大的值为4，这里我们记下最大值为4，然后看5，-2，记下最大值5.同样的道理可以得到最大值2，6。</li><li>下一步，我们来看跨越分割线的最大值，首先是4，-3，5，-2这4个数。从-3开始向右，得到最大的值要加到4，然后向左，得到最大的值为5，这样得到跨越边界的最大值为6，比较红线右侧得到的最大值，得到最大值为6。同理我们可以得到左侧的最大值为8.</li><li>同理继续向下，跨越红色的最大值为11，这样得到所有子空间的最大值为11。最后得出结果，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//分而治之算法</span></span><br><span class="line">    <span class="keyword">int</span> result = MaxSubSeqSum3(a);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个求三个结果中最大的一个的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max3</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> center)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; right)&#123;</span><br><span class="line">        <span class="keyword">return</span> left &gt; center ? left : center;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right &gt; center ? right : center;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">DivideAndConquer</span><span class="params">( <span class="keyword">int</span>[] List, <span class="keyword">int</span> left, <span class="keyword">int</span> right )</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 分治法求List[left]到List[right]的最大子列和 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxLeftSum, MaxRightSum; <span class="comment">/* 存放左右子问题的解 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxLeftBorderSum, MaxRightBorderSum; <span class="comment">/*存放跨分界线的结果*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> LeftBorderSum, RightBorderSum;</span><br><span class="line">    <span class="keyword">int</span> center, i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( left == right )  &#123; <span class="comment">/* 递归的终止条件，子列只有1个数字 */</span></span><br><span class="line">        <span class="keyword">if</span>( List[left] &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> List[left];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面是&quot;分&quot;的过程 */</span></span><br><span class="line">    center = ( left + right ) / <span class="number">2</span>; <span class="comment">/* 找到中分点 */</span></span><br><span class="line">    <span class="comment">/* 递归求得两边子列的最大和 */</span></span><br><span class="line">    MaxLeftSum = DivideAndConquer( List, left, center );</span><br><span class="line">    MaxRightSum = DivideAndConquer( List, center+<span class="number">1</span>, right );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面求跨分界线的左边最大子列和 */</span></span><br><span class="line">    MaxLeftBorderSum = <span class="number">0</span>;</span><br><span class="line">    LeftBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( i=center; i&gt;=left; i-- ) &#123; <span class="comment">/* 从中线向左扫描 */</span></span><br><span class="line">        LeftBorderSum += List[i];</span><br><span class="line">        <span class="keyword">if</span>( LeftBorderSum &gt; MaxLeftBorderSum )</span><br><span class="line">            MaxLeftBorderSum = LeftBorderSum;</span><br><span class="line">    &#125; <span class="comment">/* 左边扫描结束 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面求跨分界线的右边最大子列和 */</span></span><br><span class="line">    MaxRightBorderSum = <span class="number">0</span>;</span><br><span class="line">    RightBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( i=center+<span class="number">1</span>; i&lt;=right; i++ )&#123; <span class="comment">/* 从中线向右扫描 */</span></span><br><span class="line">        RightBorderSum += List[i];</span><br><span class="line">        <span class="keyword">if</span>( RightBorderSum &gt; MaxRightBorderSum )</span><br><span class="line">            MaxRightBorderSum = RightBorderSum;</span><br><span class="line">    &#125; <span class="comment">/* 右边扫描结束 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面返回&quot;治&quot;的结果 */</span></span><br><span class="line">    <span class="comment">//传入左边最大值，右边最大值和跨边界最大值进行比较</span></span><br><span class="line">    <span class="keyword">return</span> max3( MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubSeqSum3</span><span class="params">( <span class="keyword">int</span>[] list)</span> </span>&#123; <span class="comment">//传入数组</span></span><br><span class="line">    <span class="comment">/* 保持与前2种算法相同的函数接口 */</span></span><br><span class="line">    <span class="keyword">return</span> DivideAndConquer( list, <span class="number">0</span>, list.length - <span class="number">1</span>);<span class="comment">//传入数组，数组的最左边和最右边的数组下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>代码过程图示：<br><img src="/posts/e87b7e2/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B02.jpg">  </li><li><em>注：建议自己debug来查看代码的运行过程进行理解</em>* </li></ul><h3 id="算法四"><a href="#算法四" class="headerlink" title="算法四"></a>算法四</h3><p>算法四为在线算法，每输入一个数据就进行在线处理，在任何一个地方终止输入，都能正确给出当前解，算法四的时间复杂度为O(n).过程如图所示：<br><img src="/posts/e87b7e2/%E7%AE%97%E6%B3%954.jpg"><br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用在线算法，输出最大子列和并输出子列的首尾</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (thisSum == <span class="number">0</span>)&#123;</span><br><span class="line">            first = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        thisSum += a[i];</span><br><span class="line">        <span class="keyword">if</span> (thisSum &gt; maxSum)&#123;</span><br><span class="line">            maxSum = thisSum;</span><br><span class="line">            last = a[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (thisSum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//只要thisSum小于0，那么再往后加都不可能使后一个thisSum变大，</span></span><br><span class="line">            <span class="comment">// 所以舍弃掉小于0的thisSum，并将thisSum赋值为0</span></span><br><span class="line">            thisSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(maxSum);</span><br><span class="line">    System.out.println(<span class="string">&quot;begin=&gt;&quot;</span> + first + <span class="string">&quot; | end=&gt;&quot;</span> + last);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最大子列和问题有四种算法，直接算法和直接算法的改良版，分而治之算法和在线算法&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法复杂度分析</title>
    <link href="https://yanxiaoblog.github.io/posts/f3215fef/"/>
    <id>https://yanxiaoblog.github.io/posts/f3215fef/</id>
    <published>2021-12-06T15:36:19.000Z</published>
    <updated>2021-12-06T13:28:46.271Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>数据结构中的算法复杂度分析包括两个方面，一个是空间复杂度另一个是时间复杂度。</p><ul><li>空间复杂度：可以理解为把算法存储在计算机中需要多大的空间，如果需要空间太大，那这个算法也没法用</li><li>时间复杂度：可以理解为算法的运行时间，如果算法运行时间太长，那这个算法就没法用<span id="more"></span></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>关于算法的空间复杂度《大话数据结构》这本书中是这么说的:</p><ul><li>算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n)=O(f(n))，其中n为问题的规模，f(n)为语句关于n所占存储空间的函数。  </li></ul><p>在平时的开发中更多的是用空间换时间，所以我们重点来说时间复杂度</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度的分析有两种方法：</p><ul><li>事后统计法</li><li>事前分析法</li></ul><h4 id="事后统计法"><a href="#事后统计法" class="headerlink" title="事后统计法"></a>事后统计法</h4><ul><li>事后统计法是用测试程序和数据来运行已编写好的算法，对其执行时间进行比较。这种方法看似可以精确的计算算法的执行时间，</li><li>缺点：<ul><li>编写算法时一件非常消耗精力的事情，当你消耗了大量精力编写出来了一个算法，但是时候统计这个算法时发现这个算法的时间复杂度非常大，不能用，那么消耗的时间和精力就白费了</li><li>算法的运行依赖计算机硬件和软件因素。同一个算法在不同的计算机上执行时间是不一样的。在不确定这个算法会用在什么样的计算机上时，少量的测试结果不具备可靠性。</li><li>算法的执行时间受数据规模的影响，如果时候统计时使用的数据规模不恰当，那么算法的统计测试就不准确</li></ul></li></ul><h4 id="事前分析法"><a href="#事前分析法" class="headerlink" title="事前分析法"></a>事前分析法</h4><ul><li>什么是事前分析法<br>事前分析法是不依赖具体的测试程序和数据，根据统计方法对算法执行效率进行分析的方法。</li></ul><h5 id="时间复杂度大O记法"><a href="#时间复杂度大O记法" class="headerlink" title="时间复杂度大O记法"></a>时间复杂度大O记法</h5><ul><li>公式：T(n)=O(f(n))<br>公式中的O表示代码的执行总时间T(n)和其执行总次数f(n)成正比<br>大O记法T(n)=O(f(n))，表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，表示的是算法的渐近时间复杂度，简称时间复杂度</li></ul><h5 id="时间复杂度的分析"><a href="#时间复杂度的分析" class="headerlink" title="时间复杂度的分析"></a>时间复杂度的分析</h5><h6 id="时间复杂度分析的基本法则"><a href="#时间复杂度分析的基本法则" class="headerlink" title="时间复杂度分析的基本法则"></a>时间复杂度分析的基本法则</h6><p>时间复杂度的分析的基本法则：四则运算法则</p><ul><li>加法法则，如果算法的代码是平行增加的，那么就需要加上相应的时间复杂度。</li><li>乘法法则，如果算法的代码增加的是循环内的嵌套或者函数的嵌套，那么就需要乘上相应的时间复杂度。</li><li>减法法则，如果是去掉算法中平行的代码，就需要减掉相应的时间复杂度。</li><li>除法法则，如果是去掉嵌套内的循环或函数，就需要除去相应的时间复杂度。</li></ul><h6 id="时间复杂度分析的常用的结论"><a href="#时间复杂度分析的常用的结论" class="headerlink" title="时间复杂度分析的常用的结论"></a>时间复杂度分析的常用的结论</h6><ul><li>加法的常数项可以忽略<ul><li>比如算法1:2n+2，算法2:5n+5，在n执行次数相同的情况下，算法1的是要好过算法2的效率的，当去掉算法1和2后面相加的常数时，算法1仍然优于算法2，所以算法的优劣与常数项的加减无关，与乘法有关</li></ul></li><li>在n的指数不同的情况下，除去最高阶项，其它次项可以忽略<ul><li>如算法1：2*pow(n,2)+2n+1,算法2：3n+4，可知算法2优于算法1，当算法1和2的n足够大的时候，那么算法1后面的2n+1和算法2后面的4就可以忽略，当算法1和2都只留下最高阶项，那么算法2依然优于算法1，由此可见，算法的优劣只和最高阶项有关</li></ul></li><li>在n的指数不同的情况下，与最高次项相乘的常数可以忽略<ul><li>如算法1：10*pow(n,2)，算法2:5n，可知算法2优于算法1，当去掉算法1和2最高次项前面相乘的常数时，算法2依然优于算法1，由此可见，算法的效率与和最高次项相乘的常数无关</li></ul></li><li>总结：对于时间复杂度的分析，只需要考虑乘法法则，并且只考虑最高次项的n的复杂度即可</li></ul><h6 id="常见时间复杂度"><a href="#常见时间复杂度" class="headerlink" title="常见时间复杂度"></a>常见时间复杂度</h6><p><img src="/posts/f3215fef/%E5%B8%B8%E8%A7%81%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg"></p><ul><li>常见时间复杂度的增速   </li></ul><p><img src="/posts/f3215fef/%E5%A2%9E%E9%80%9F.jpg"></p><ul><li>常数阶O(1)<br>对于这种与问题规模n无关(即每行代码的执行次数与n无关)，执行时间恒定的算法，其时间复杂度都记作O(1)，又称之为常数阶，ru以下代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    sum = n * <span class="number">2</span>;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面代码中每行代码只执行一次，代码的执行次数和n无关，所以实践复杂度为O(1)。根据加法法则来不应该是O(3)吗？不是的，在时间复杂度分析的基本法则中还有一个法则：用常数1取代运行时间中的所有加法常数，也就是常数的加法法则运算出来的复杂度统一使用O(1)来表示。</li><li>对数阶O(logn)<br>如下代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logarithm</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">while</span> (count &lt;= n) &#123; <span class="comment">// 执行logn次</span></span><br><span class="line">        count = count * <span class="number">3</span>; <span class="comment">// 执行logn次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这段代码的时间复杂度是多找呢？这段的执行次数和n有关，需要多少个3相乘才能使count大于n，也就是3^x&gt;n，循环中的代码执行了log3n次，所以呢这段代码的时间复杂度是log3n底数为3的logn是吗？不对，这个也有一个原则，就是不管底数为多找，统一都是logn的时间复杂度，所以这段代码的时间复杂度是logn </li><li>线性阶O(n)<br>代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">circle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; 2n; i++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">        System.out.println(i); <span class="comment">// 执行n次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这段代码执行了2n次，所以时间复杂度为O(2n),但根据与“最高次项相乘的常数可以忽略”，所以这段代码的复杂度是O(n)</li><li>线性对数阶 O(nlogn)<br>由函数nlogn可知，代码执行了n*logn次，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logarithm</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">while</span> (count &lt;= n) &#123; <span class="comment">// 执行logn次</span></span><br><span class="line">            count = count*<span class="number">2</span>; <span class="comment">// 执行nlogn次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>平方阶 O(n²)<br>如下代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;n; j++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            System.out.println(i+j); <span class="comment">// 执行n方次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>根据乘法法则，可知外循环循环了n次，内循环也循环了n次，所以实践复杂度为O(n^2)，当内循环的次数不一样怎么办？如<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;2n; j++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            System.out.println(i+j); <span class="comment">// 执行n方次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;m; j++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            System.out.println(i+j); <span class="comment">// 执行n方次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>前者的时间复杂度为O(2n^2)，因为“最高次项相乘的常数可以忽略”，所以是O(n^2)，后者的时间复杂度为O(n*m)<h6 id="最好、最坏、平均时间复杂度"><a href="#最好、最坏、平均时间复杂度" class="headerlink" title="最好、最坏、平均时间复杂度"></a>最好、最坏、平均时间复杂度</h6>我们以判断一个目标值在数组中是否存在为例来看一下如何进行最好、最坏、平均情况时间复杂度的分析，假设目标值在数组中要么唯一存在要么不存在，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> exist = <span class="keyword">false</span>; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">int</span> n = arr.length; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            exist= <span class="keyword">true</span>; <span class="comment">// 执行一次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exist; <span class="comment">// 执行一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>由上面代码可知，时间复杂度为O(n)，但是我们从数组中找到了目标值后就不需要再继续往下循环了啊，所以代码改为：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> exist = <span class="keyword">false</span>; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">int</span> n = arr.length; <span class="comment">// 执行一次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123; <span class="comment">// 执行n次</span></span><br><span class="line">            exist= <span class="keyword">true</span>; <span class="comment">// 执行一次</span></span><br><span class="line">            <span class="keyword">break</span>；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exist; <span class="comment">// 执行一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>对于优化后的代码，使用O(n)的时间复杂度来描述的话，显然不合适，因为我们不确定代码是否执行了n次，有可能执行到一半就找到了，所以就有了最好最坏时间复杂度。</li><li>最好时间复杂度是第一次就找到了，那么代码只执行了一次，时间复杂度为O(1)</li><li>最坏时间复杂度是目标数在最后一个或者没有目标数在里面，那么就要找n次才能找到或者都找不到，这时时间复杂度为O(n)</li><li>最好和最坏的时间复杂度都不能够整体表现出这段代码的时间复杂度，这就有了平均时间复杂度，平均时间复杂度的计算是有n+1中可能(其中一种为找不到)，每种可能的情况要找的次数都不一样，平均复杂度就等于所有可能要找的次数加起来除以总的可能数，如下：<br><img src="/posts/f3215fef/%E5%B9%B3%E5%9D%87%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg"></li></ul><h6 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h6><p>之前介绍的复杂度分析是基于一个算法从头运行到尾，我们来看其时间复杂度是怎么样的。有时，会出现一个算法的复杂度比较高，但是该算法是和其它操作是一起的，在<strong>将这个较高复杂度的算法和其它操作一起进行复杂度分析时，需要将其均摊到其它操作上，这种分析称之为均摊复杂度分析。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">// 数组中已存储的元素格式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity; <span class="comment">// 数组中可容纳的最大元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyVector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        size= <span class="number">0</span>;</span><br><span class="line">        capacity = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向数组末尾添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushBack</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果原有数组已满，则扩容为原数组的2倍</span></span><br><span class="line">        <span class="keyword">if</span> (size == capacity) &#123;</span><br><span class="line">            resize(<span class="number">2</span>*capacity);</span><br><span class="line">        &#125;</span><br><span class="line">        data[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扩阵容方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity &lt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] newData = <span class="keyword">new</span> <span class="keyword">int</span>[newCapacity];</span><br><span class="line">        <span class="comment">// 把原有数组中的元素一次复制到新的数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data = newData;</span><br><span class="line">        capacity = newCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码所示，pushBack方法中调用了resize方法，而resize方法的时间复杂度是O(n)，那么pushBack方法的时间复杂度是O(n)还是O(1)？我们分开来讨论，当pushBack方法执行一次向末尾添加元素时，直到添加到n次时间复杂度都是O(1)，但当执行第n+1次时，时间复杂度是O(n)，那么n+1次的总和是执行了2n+1次，当我们将n+1次执行的时间复杂度均摊下来，那么就差不多每次执行的耗时为2，即每次执行分摊下来的时间复杂度是O(2)；所以pushBack方法的时间复杂度是O(1)，不是O(n);</p><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/361636579">https://zhuanlan.zhihu.com/p/361636579</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;数据结构中的算法复杂度分析包括两个方面，一个是空间复杂度另一个是时间复杂度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空间复杂度：可以理解为把算法存储在计算机中需要多大的空间，如果需要空间太大，那这个算法也没法用&lt;/li&gt;
&lt;li&gt;时间复杂度：可以理解为算法的运行时间，如果算法运行时间太长，那这个算法就没法用&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yanxiaoblog.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>springCloud-Config远程配置</title>
    <link href="https://yanxiaoblog.github.io/posts/6e1ccf81/"/>
    <id>https://yanxiaoblog.github.io/posts/6e1ccf81/</id>
    <published>2021-11-29T10:00:40.000Z</published>
    <updated>2021-12-04T03:44:29.393Z</updated>
    
    <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文简单介绍了springCloud-Config远程配置，包括springCloud-Config的概述，git环境的搭建，远程配置的实战小案例</p><span id="more"></span><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="什么是springCloud-Config"><a href="#什么是springCloud-Config" class="headerlink" title="什么是springCloud-Config"></a>什么是springCloud-Config</h4><ul><li>微服意味着将一个单体的应用拆分成很多个子服务，每个子服务的粒度相对较小，所以一个单体应用可以拆分为很多的子服务，那么每个服务都有属于自己的配置文件，如果一个项目中有上百个子服务，要修改配置文件的话，就要打开上百个服务的配置文件进行修改，这样工作量巨大，而springCloud-Config就是为解决这个问题而来的，springCloud-Config将所有的配置文件放到云端进行管理，如果想要修改配置文件，只需要在云端上找到对应的配置文件进行修改即可，不用打开每个服务再打开对应的配置文件去修改，而服务启动时，只需要到云端获取其对应的配置文件即可，如图所示：<br><img src="/posts/6e1ccf81/springcloud-config.jpg"></li><li>spring cloud config 为微服务架构中的微服务提供集中化的外部支持，配置服务器为各个不同微服务应用的所有环节提供了一个中心化的外部配置。</li><li>spring cloud config 分为服务端和客户端两部分。<ul><li>服务端也称为 分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密，解密信息等访问接口。</li><li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。  </li></ul></li><li>配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理。并且可用通过git客户端工具来方便的管理和访问配置内容。</li></ul><h4 id="springCloud-Config分布式配置的作用"><a href="#springCloud-Config分布式配置的作用" class="headerlink" title="springCloud-Config分布式配置的作用"></a>springCloud-Config分布式配置的作用</h4><ul><li>集中式管理配置文件</li><li>不同环境，不同配置，动态化的配置更新，分环境部署，比如/dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><h3 id="git环境搭建"><a href="#git环境搭建" class="headerlink" title="git环境搭建"></a>git环境搭建</h3><h4 id="git的下载"><a href="#git的下载" class="headerlink" title="git的下载"></a>git的下载</h4><ul><li>git下载官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><h4 id="git配置gitee或者github"><a href="#git配置gitee或者github" class="headerlink" title="git配置gitee或者github"></a>git配置gitee或者github</h4></li><li>环境搭建参考地址：<a href="https://cloud.tencent.com/developer/article/1774890">https://cloud.tencent.com/developer/article/1774890</a> (此处使用gitee演示)</li><li>gitee帮助文档：<a href="http://git.mydoc.io/?t=180845#text_180676">http://git.mydoc.io/?t=180845#text_180676</a></li><li>github中文帮助文档：<a href="https://www.w3cschool.cn/githubcn/githubcn-9a5i3a8s.html">https://www.w3cschool.cn/githubcn/githubcn-9a5i3a8s.html</a><h4 id="gitee远程连接测试"><a href="#gitee远程连接测试" class="headerlink" title="gitee远程连接测试"></a>gitee远程连接测试</h4></li><li>在gitee上创建一个远程仓库<br>参考：<a href="https://gitee.com/help/articles/4120">https://gitee.com/help/articles/4120</a>  </li><li>你想要将仓库下载到哪个文件夹，就在哪个文件夹使用git下载下来，步骤如下：<ul><li>在对应的想要下载的文件夹中，右键点击，选择git brush here </li><li>在git页面中输入<code>git clone +ssh仓库地址</code><br><img src="/posts/6e1ccf81/%E4%B8%8B%E8%BD%BD.jpg"></li><li>下载完毕后，进入仓库的文件夹，发现仓库中的所有文件已经下载过来了</li></ul></li><li>在仓库文件夹创建一个application.yaml配置文件，并编写配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-test</span></span><br></pre></td></tr></table></figure></li><li>在仓库文件夹中进入git页面，并将所有文件添加到暂存区：<code>git add .</code></li><li>查看暂存区状态(查看添加的文件有没有被添加到暂存区)：<code>git status</code></li><li>提交到本地<code>git commit -m &quot;first commit&quot;</code>(-m后是提交时的描述消息)</li><li>提交到远程<code>git push origin master</code>(其中origin是当前用户，master是要提交到的分支)</li><li>查看gitee远程仓库，刷新，发现已经提交到了远程仓库，远程连接测试完成！</li></ul><h3 id="远程配置的使用"><a href="#远程配置的使用" class="headerlink" title="远程配置的使用"></a>远程配置的使用</h3><h4 id="配置管理中心的创建"><a href="#配置管理中心的创建" class="headerlink" title="配置管理中心的创建"></a>配置管理中心的创建</h4><ul><li>新建一个springcloud-config-server-3344配置管理中心模块，目录如下：<br><img src="/posts/6e1ccf81/%E7%9B%AE%E5%BD%9501.jpg">  </li><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接远程仓库的服务端依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入eureka客户端，集成了ribbon--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--完善监控信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-server-3344</span></span><br><span class="line">  <span class="attr">cloud:</span> <span class="comment">#连接远程仓库</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">force-pull:</span> <span class="literal">true</span> <span class="comment">#设置强行pull拉取</span></span><br><span class="line">          <span class="comment">#git连接使用http的地址，git下载使用ssh地址</span></span><br><span class="line">          <span class="comment">#通过访问3344端口来访问到uri的地址，然后在端口后面加上要访问的对应的文件即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/yanxiaoStudy/springcloud-config.git</span></span><br><span class="line"><span class="comment"># 不加这个配置会报Cannot execute request on any known server 这个错：连接Eureka服务端地址不对</span></span><br><span class="line"><span class="comment"># 或者直接注释掉eureka依赖 这里暂时用不到eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li>编写启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span> <span class="comment">//开启远程连接服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig_server_3344</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfig_server_3344.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>HTTP服务具有以下格式的访问资源的方式：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure></li><li>启动3344端口的配置管理中心，访问 <a href="http://localhost:3344/application-dev.yaml">http://localhost:3344/application-dev.yaml</a> ==&gt; <code>/&#123;application&#125;-&#123;profile&#125;.yml</code><br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9501.jpg"></li><li>访问 <a href="http://localhost:3344/application/test/master">http://localhost:3344/application/test/master</a> ==&gt; <code>/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</code><br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9502.jpg"></li><li>访问 <a href="http://localhost:3344/master/application-dev.yml">http://localhost:3344/master/application-dev.yml</a> ==&gt; <code>/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</code><br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9503.jpg"></li></ul><h4 id="服务端的创建"><a href="#服务端的创建" class="headerlink" title="服务端的创建"></a>服务端的创建</h4><ul><li>新建一个springcloud-config-client-3355客户端模块，目录如下：<br><img src="/posts/6e1ccf81/%E7%9B%AE%E5%BD%9502.jpg">  </li><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接远程仓库的客户端依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--完善监控信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处测试暂时不导入Eureka--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写放到远程仓库的配置文件，在仓库文件夹创建一个config-client.yaml文件，编写好配置文件，并按照上面测试上传application.yaml配置文件一样上传到远程仓库中<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8201</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-8201</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">client:</span> </span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eeureka/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8202</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-8202</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">client:</span> </span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eeureka/</span></span><br></pre></td></tr></table></figure></li><li>编写客户端服务中resources下的配置文件<ul><li>application.yaml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户级别的配置文件</span></span><br><span class="line"><span class="comment">#server:</span></span><br><span class="line"><span class="comment">#port: 8203</span></span><br><span class="line"><span class="comment">#此处不用配置端口号，配置了也没用，还是会使用远程配置文件的端口号，在服务启动时可以在控制台上看到这个服务使用的端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-client-3355</span></span><br></pre></td></tr></table></figure></li><li>bootstrap.yaml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统级别的配置文件</span></span><br><span class="line"><span class="comment">#客户端到服务端中拿仓库中对应的东西，服务端从云端上拿客户端需要的东西</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-client</span> <span class="comment">#要拿的文件的名称，不需要写后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#要拿的文件中的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#从哪个分支上拿</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#服务端的地址</span></span><br></pre></td></tr></table></figure></li></ul></li><li>编写启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig_client_3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfig_client_3355.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自动注入配置文件中的spring.application.name配置的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line">    <span class="comment">//自动注入配置文件中的eureka.client.service-url.defaultZone配置的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;eureka.client.service-url.defaultZone&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String eurekaServer;</span><br><span class="line">    <span class="comment">//自动注入配置文件中的server.port配置的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">config</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;applicationName=&gt;&quot;</span> + applicationName +</span><br><span class="line">                <span class="string">&quot;&lt;br&gt;eurekaServer=&gt;&quot;</span> + eurekaServer +</span><br><span class="line">                <span class="string">&quot;&lt;br&gt;port=&gt;&quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动3344，3355客户端服务，访问 <a href="http://localhost:8201/config">http://localhost:8201/config</a><br>注：服务端写的是3355端口，但是远程仓库中的端口为8201端口，服务启动时会在控制台有提示，启动的是8201端口，所以访问的是8201端口<br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9504.jpg">  </li></ul><h4 id="实战小案例"><a href="#实战小案例" class="headerlink" title="实战小案例"></a>实战小案例</h4><h5 id="案列流程"><a href="#案列流程" class="headerlink" title="案列流程"></a>案列流程</h5><p><img src="/posts/6e1ccf81/%E6%B5%81%E7%A8%8B01.jpg">  </p><h5 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h5><ul><li>创建错误注册中心模块，目录如下：<br><img src="/posts/6e1ccf81/%E7%9B%AE%E5%BD%9503.jpg">  </li><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接远程仓库的客户端依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写配置文件config-eureka-server，提交到远程仓库<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-eureka-7001</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment"># 配置Eureka的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka的配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># 配置eureka的主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否向eureka注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># fetch-registry为false表示这个程序自己为服务中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 配置访问eureka服务的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure></li><li>编写application.yaml和bootstrap.yaml配置文件<ul><li>application.yaml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户级别的配置文件</span></span><br><span class="line"><span class="comment">#此处不用配置端口号，配置了也没用，还是会使用远程配置文件的端口号，在服务启动时可以在控制台上看到这个服务使用的端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-eureka-7001</span></span><br></pre></td></tr></table></figure></li><li><ul><li>bootstrap.yaml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统级别的配置文件</span></span><br><span class="line"><span class="comment">#客户端到服务端中拿仓库中对应的东西，服务端从云端上拿客户端需要的东西</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-eureka-server</span> <span class="comment">#要拿的文件的名称，不需要写后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#要拿的文件中的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#从哪个分支上拿</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#服务端的地址</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>编写主启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//开启eureka服务端，启动服务后访问http://localhost:7001/地址进入监控页面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaConfigServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaConfigServer_7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h5><ul><li>复制springcloud-provider-dept-hystrix-8001服务提供者模块，修改为springcloud-config-dept-8001模块，目录如下：<br><img src="/posts/6e1ccf81/%E7%9B%AE%E5%BD%9504.jpg">  </li><li>添加依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--连接远程仓库的客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建config-eureka-client.yaml配置文件，并将配置文件提交到远程仓库<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment">#配置mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.tSmile.springcloud.pojo</span> <span class="comment"># 为这个包下的实体类起别名</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span> <span class="comment"># 绑定mapper包下的所有mapper.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="comment"># 绑定mybatis可信配置文件</span></span><br><span class="line"><span class="comment">#配置spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-provider-dept</span> <span class="comment">#设置spring配置的名称</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment">#配置数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db01?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置eureka服务提供者</span></span><br><span class="line"><span class="comment">#eureka自我保护机制：当服务中心突然崩了，或者突然很多服务被判断死亡了，那么就会触发eureka的自我保护机制，</span></span><br><span class="line"><span class="comment">#也就是会把所有的服务全部保存下来，不会删除那些被判断死亡的服务，如果服务中心好了，那么会再恢复那些有心跳的服务</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置到哪里注册</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-hystrix-dept-8001</span> <span class="comment">#修改服务的描述链接的名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置完善服务的描述</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">tSmile-springcloud</span> <span class="comment">#编写服务名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">com.tSmile.springcloud</span> <span class="comment">#编写公司名称</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment">#配置mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.tSmile.springcloud.pojo</span> <span class="comment"># 为这个包下的实体类起别名</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span> <span class="comment"># 绑定mapper包下的所有mapper.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="comment"># 绑定mybatis可信配置文件</span></span><br><span class="line"><span class="comment">#配置spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-dept</span> <span class="comment">#设置spring配置的名称</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment">#配置数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db02?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置eureka服务提供者</span></span><br><span class="line"><span class="comment">#eureka自我保护机制：当服务中心突然崩了，或者突然很多服务被判断死亡了，那么就会触发eureka的自我保护机制，</span></span><br><span class="line"><span class="comment">#也就是会把所有的服务全部保存下来，不会删除那些被判断死亡的服务，如果服务中心好了，那么会再恢复那些有心跳的服务</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置到哪里注册</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-hystrix-dept-8001</span> <span class="comment">#修改服务的描述链接的名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置完善服务的描述</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">tSmile-springcloud</span> <span class="comment">#编写服务名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">com.tSmile.springcloud</span> <span class="comment">#编写公司名称</span></span><br></pre></td></tr></table></figure></li><li>删除原来的8001配置文件，并编写application.yaml和bootstrap.yaml配置文件<ul><li>application.yaml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户级别的配置文件</span></span><br><span class="line"><span class="comment">#此处不用配置端口号，配置了也没用，还是会使用远程配置文件的端口号，在服务启动时可以在控制台上看到这个服务使用的端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-dept-8001</span></span><br></pre></td></tr></table></figure></li><li>bootstrap.yaml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统级别的配置文件</span></span><br><span class="line"><span class="comment">#客户端到服务端中拿仓库中对应的东西，服务端从云端上拿客户端需要的东西</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-eureka-client</span> <span class="comment">#要拿的文件的名称，不需要写后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#要拿的文件中的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#从哪个分支上拿</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#服务端的地址</span></span><br></pre></td></tr></table></figure></li></ul></li><li>修改启动类的名称为ConfigDeptProviderHystrix_8001  </li></ul><h5 id="修改9527客户端服务"><a href="#修改9527客户端服务" class="headerlink" title="修改9527客户端服务"></a>修改9527客户端服务</h5><ul><li>修改springcloud-zuul-9527的配置文件，在serviceId处添加一个服务提供者<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置zuul网关</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment">#zuul就做了两件事情：路由统一routes和过滤ignored-services、prefix</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">keys:</span></span><br><span class="line">      <span class="comment">#修改原来的服务的名称，将原来的springcloud-provider-dept改为mydept</span></span><br><span class="line">      <span class="comment">#通过改变服务的名称来隐藏服务的真实名称</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/mydept/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">springcloud-provider-dept,springcloud-config-provider-dept</span></span><br><span class="line">  <span class="comment">#忽略服务，即不能再使用原来的springcloud-provider-dept服务名称来访问服务，</span></span><br><span class="line">  <span class="comment">#只能通过zuul网关配置的mydept来访问该服务</span></span><br><span class="line">  <span class="comment">#ignored-services: springcloud-provider-dept</span></span><br><span class="line">  <span class="comment">#一般使用*号屏蔽全部使用真实服务的访问</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="comment">#添加同一的访问前缀，这样使用原来没有添加前缀时的路径访问不了</span></span><br><span class="line">  <span class="comment">#原来：http://www.tsmile.com:9527/mydept/dept/getOne/3</span></span><br><span class="line">  <span class="comment">#添加后：http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/3</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/tsmile</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li><p>启动3344配置管理中心服务</p></li><li><p>启动7001服务注册中心</p></li><li><p>启动8001服务提供者</p></li><li><p>访问 <a href="http://localhost:7001/">http://localhost:7001/</a> ，查看服务提供者是否被注册<br><img src="/posts/6e1ccf81/%E6%B3%A8%E5%86%8C.jpg">  </p></li><li><p>启动9527服务消费者</p></li><li><p>访问 <a href="http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/1">http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/1</a> 进行测试<br><img src="/posts/6e1ccf81/%E6%B5%8B%E8%AF%9505.jpg">  </p></li></ul><p>本文是观看狂神说B站视频后整理的笔记——侵删<br>视频地址：<a href="https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver">https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h4&gt;&lt;p&gt;本文简单介绍了springCloud-Config远程配置，包括springCloud-Config的概述，git环境的搭建，远程配置的实战小案例&lt;/p&gt;</summary>
    
    
    
    <category term="springCloud" scheme="https://yanxiaoblog.github.io/categories/springCloud/"/>
    
    
    <category term="spring" scheme="https://yanxiaoblog.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>springCloud-Netflix四大核心组件</title>
    <link href="https://yanxiaoblog.github.io/posts/8e9cec17/"/>
    <id>https://yanxiaoblog.github.io/posts/8e9cec17/</id>
    <published>2021-11-27T14:43:37.000Z</published>
    <updated>2021-12-04T03:44:42.463Z</updated>
    
    <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文简单介绍了springCloud-Netflix的四大核心组件，其中包括Eureka，Ribbon，Hystrix和Zuul，并对这四个组建的使用进行了简单的描述，本文内容较多，要耐心才能看完哦!</p><span id="more"></span><h3 id="服务注册与发现——Eureka"><a href="#服务注册与发现——Eureka" class="headerlink" title="服务注册与发现——Eureka"></a>服务注册与发现——Eureka</h3><h4 id="什么是Eureka服务注册中心"><a href="#什么是Eureka服务注册中心" class="headerlink" title="什么是Eureka服务注册中心"></a>什么是Eureka服务注册中心</h4><ul><li>Eureka是Netflix的一个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了</li><li>Eureka采用了C-S(client-server)的架构设计，EurekaServer作为服务注册功能的服务器，他同时也是服务注册中心，而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑</li></ul><h4 id="Eureka执行原理图"><a href="#Eureka执行原理图" class="headerlink" title="Eureka执行原理图"></a>Eureka执行原理图</h4><p><img src="/posts/8e9cec17/eureka%E5%8E%9F%E7%90%86.jpg"><br>Eureka-Server：提供服务的注册与发现，即Eureka注册中心<br>Service-Provider：服务提供者，将自身服务注册到Eureka中，从而使服务消费者能够找到<br>Service-Consumer：服务消费者，从Eureka中获取注册服务列表，从而找到消费服务  </p><h4 id="使用Eureka与不使用Eureka的对比图"><a href="#使用Eureka与不使用Eureka的对比图" class="headerlink" title="使用Eureka与不使用Eureka的对比图"></a>使用Eureka与不使用Eureka的对比图</h4><p><img src="/posts/8e9cec17/eureka%E7%90%86%E8%A7%A3.jpg"></p><h4 id="Eureka的两个组件：Eureka-Server和Eureka-Client"><a href="#Eureka的两个组件：Eureka-Server和Eureka-Client" class="headerlink" title="Eureka的两个组件：Eureka-Server和Eureka-Client"></a>Eureka的两个组件：Eureka-Server和Eureka-Client</h4><ul><li>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到；在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s)</li><li>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器</li></ul><h4 id="使用Eureka服务注册与发现"><a href="#使用Eureka服务注册与发现" class="headerlink" title="使用Eureka服务注册与发现"></a>使用Eureka服务注册与发现</h4><p>基本思路：导入依赖–&gt;编写配置文件–&gt;编写启动类–&gt;注解开启@Enablexxx<br>注：如果创建的是springBoot模块就不用编写启动类，如果创建的是普通maven模块就需要编写启动类</p><h5 id="创建一个Eureka服务模块springcloud-eureka-7001"><a href="#创建一个Eureka服务模块springcloud-eureka-7001" class="headerlink" title="创建一个Eureka服务模块springcloud-eureka-7001"></a>创建一个Eureka服务模块springcloud-eureka-7001</h5><ul><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;已过时--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--官方推荐--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建application.yaml配置文件，并进行配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment"># 配置Eureka的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka的配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># 配置eureka的主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否向eureka注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># fetch-registry为false表示这个程序自己为服务中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="comment"># 配置访问eureka服务的地址</span></span><br></pre></td></tr></table></figure></li><li>编写启动类并使用注解开启服务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//开启eureka服务端，启动服务后访问http://localhost:7001/地址进入监控页面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>目录<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9504.jpg"></li><li>启动服务，测试进入监控页面<br>访问：<a href="http://localhost:7001/">http://localhost:7001/</a> 进入监控页面<h5 id="修改原来的springcloud-provider-dept-8001模块"><a href="#修改原来的springcloud-provider-dept-8001模块" class="headerlink" title="修改原来的springcloud-provider-dept-8001模块"></a>修改原来的springcloud-provider-dept-8001模块</h5></li><li>添加依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--完善监控信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在配置文件中添加配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置eureka服务提供者</span></span><br><span class="line"><span class="comment">#eureka自我保护机制：当服务中心突然崩了，或者突然很多服务被判断死亡了，那么就会触发eureka的自我保护机制，</span></span><br><span class="line"><span class="comment">#也就是会把所有的服务全部保存下来，不会删除那些被判断死亡的服务，如果服务中心好了，那么会再恢复那些有心跳的服务</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置到哪里注册</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-8001</span> <span class="comment">#修改服务的描述链接的名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#true会将instance-id的地址改为IP地址，不再是localhost</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置完善服务的描述</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">tSmile-springcloud</span> <span class="comment">#编写服务名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">com.tSmile.springcloud</span> <span class="comment">#编写公司名称</span></span><br></pre></td></tr></table></figure></li><li>在启动类上使用注解开启服务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启eureka客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务springcloud-provider-dept-8001，进入7001监控页面刷新<br>服务已经注册已经注册到注册中心了<br><img src="/posts/8e9cec17/%E6%B3%A8%E5%86%8C01.jpg"><br>可以看到自己配置的信息<br><img src="/posts/8e9cec17/info.jpg"></li></ul><h4 id="Eureka服务保护机制"><a href="#Eureka服务保护机制" class="headerlink" title="Eureka服务保护机制"></a>Eureka服务保护机制</h4><ul><li>关掉上面的8001端口springcloud-provider-dept-8001服务，等待超过30秒，刷新7001监控页面<br><img src="/posts/8e9cec17/%E8%87%AA%E6%88%91%E4%BF%9D%E6%8A%A4.jpg"></li><li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（默认是90秒），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，实际是当一分钟内收到的心跳数大量减少时，会触发eureka的保护机制，即某时刻某一个或多个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存，因为在短时间内很多服务都出现了不可用现象，那么eureka会认为这是服务异常或者崩溃，所以这些不是正常停止的服务数据就会被保留下来，但是不能被访问，直到这些服务恢复了，eureka就会重新启用这些服务。</li><li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，除非重启该服务，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</li><li>可以在配置文件中通过<code>eureka.server.enable-self-preservation=false</code>关闭自我保护机制，但是不建议关闭自我保护机制</li></ul><h4 id="获取注册中心中的服务信息"><a href="#获取注册中心中的服务信息" class="headerlink" title="获取注册中心中的服务信息"></a>获取注册中心中的服务信息</h4><p>服务注册到注册中心时，是将什么信息注册进去呢？客户端是怎样在注册中心获取注册服务的信息来调用对应的服务的呢？我们来看一下</p><ul><li>在springcloud-provider-dept-8001提供者服务模块的DeptController中添加一个获取服务信息的controller <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取注册进来的微服务的信息</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/dept/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取所有的注册了的服务清单</span></span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    System.out.println(<span class="string">&quot;discovery===&gt;services&quot;</span> + services);</span><br><span class="line">    <span class="comment">//获取具体微服务的信息，信息被封装在了list集合中了,通过服务的application名称获取对应的服务的信息</span></span><br><span class="line">    <span class="comment">//instances封装了对应的服务的信息，可以通过调用其方法获取</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;SPRINGCLOUD-PROVIDER-DEPT&quot;</span>);</span><br><span class="line">    <span class="comment">//循环遍历所有的信息</span></span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">&quot;服务具体信息===&gt;&quot;</span> +</span><br><span class="line">                instance.getInstanceId() + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                instance.getHost() + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                instance.getPort() + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在主启动类上添加开启服务发现的注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启服务发现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务，可以直接访问服务提供者的对应的controller，也可以配置服务消费者，通过服务消费者访问服务提供者的controller，此处测试为了简便，直接访问服务提供者的controller（一般不会这么做，因为后面添加网关时会过滤掉直接访问服务者的请求，直接访问的话就访问不了了）<br>访问地址：<a href="http://localhost:8001/dept/discovery">http://localhost:8001/dept/discovery</a><br>页面输出<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF02.jpg"><br>控制台输出<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF01.jpg"></li></ul><h4 id="Eureka集群环境配置"><a href="#Eureka集群环境配置" class="headerlink" title="Eureka集群环境配置"></a>Eureka集群环境配置</h4><ul><li>什么是Eureka集群环境<br>Eureka集群环境就是创建多个Eureka服务注册中心模块，将所有服务都注入到这些服务注册中心里</li><li>为什么要配置Eureka集群环境<br>之所以进行eureka集群的搭建，在于我们平时的生产环境中，很难保证单节点的eureka服务能提供百分百不间断的服务，如果eureka无响应了，整个项目应用都会出现问题，因此要保证eureka随时都能提供服务的情况下，最好的方式就是采用eureka的集群模式，也就是搭建eureka的高可用，在eureka的集群模式下，多个eureka server之间可以同步注册服务，因此，在一个eureka宕掉的情况下，仍然可以提供服务注册和服务发现的能力，从而达到注册中心的高可用。</li><li>Eureka集群原理图<br><img src="/posts/8e9cec17/eureka%E9%9B%86%E7%BE%A4.jpg"></li><li>Eureka集群环境的搭建<ul><li>新建两个和springcloud-eureka-7001一样的模块：springcloud-eureka-7002和springcloud-eureka-7003  </li><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>找到本机hosts文件并打开，配置一些自定义本机名字，在hosts文件最后加上，要访问的本机名称，默认是localhost<br><img src="/posts/8e9cec17/%E6%9C%AC%E6%9C%BA%E5%88%AB%E5%90%8D.jpg"></li><li>编写配置文件，并对7001的配置文件进行修改<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment"># 配置Eureka的端口号，7002或者7003端口的将端口号改为对应的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka的配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># 配置eureka的主机地址(可以是主机别名，这样是为了更真实地还原场景)，不同的端口配置相应的别名，如7002端口配置eureka7002.com,7003端口配置eureka7003.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否向eureka注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># fetch-registry为false表示这个程序自己为服务中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 配置访问eureka服务的地址</span></span><br><span class="line">      <span class="comment">#如果有多个注册中心,那么就可以直接配置其他的注册中心,自己这个注册中心就可以省略掉不用配置,7002和7003分别配置另外两个端口的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure></li><li>编写启动类（此处7001没有进行修改）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//开启eureka服务端，启动服务后访问http://localhost:7001/地址进入监控页面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="comment">//7002和7003端口分别改变启动类的名称后面的端口号即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>目录<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9505.jpg"></li><li>修改服务提供者springcloud-provider-dept-8001的配置文件中eureka的配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置到哪里注册，到三个服务中心都进行注册</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-8001</span> <span class="comment">#修改服务的描述链接的名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#true会将instance-id的地址改为IP地址，不再是localhost</span></span><br></pre></td></tr></table></figure></li><li>启动三个服务注册中心服务和服务提供者服务，分别访问访问7001，7002,7003端口：<a href="http://eureka7001.com:7001/">http://eureka7001.com:7001/</a> ，<a href="http://eureka7002.com:7002/">http://eureka7002.com:7002/</a> ，<a href="http://eureka7003.com:7003/%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://eureka7003.com:7003/进行测试</a><br>7001端口<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%8301.jpg"><br>7002端口<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%8302.jpg"><br>7003端口<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%8303.jpg"><h4 id="Eureka和Zookeeper的对比"><a href="#Eureka和Zookeeper的对比" class="headerlink" title="Eureka和Zookeeper的对比"></a>Eureka和Zookeeper的对比</h4></li></ul></li></ul><h5 id="CAP原则"><a href="#CAP原则" class="headerlink" title="CAP原则"></a>CAP原则</h5><ul><li>什么是CAP原则<ul><li>C (Consistency) 强一致性  </li><li>A (Availability) 可用性  </li><li>P (Partition tolerance) 分区容错性</li></ul></li><li>CAP理论核心  <ul><li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，只能在这三个需求中满足其中两个，三选二</li><li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类：</li></ul><ol><li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li><li>CP：满足一致性，分区容错的系统，通常性能不是特别高</li><li>AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ol></li><li>CAP理论指出，一个分布式系统不可能同时满足C (一致性) 、A (可用性) 、P (容错性)，由于分区容错性P再分布式系统中是必须要保证的，因此我们只能再在A和C之间进行权衡。</li></ul><h5 id="Zookeeper保证的是CP原则"><a href="#Zookeeper保证的是CP原则" class="headerlink" title="Zookeeper保证的是CP原则"></a>Zookeeper保证的是CP原则</h5><p>Zookeeper保证的是CP原则，也就是保证了一致性和分区容错，当保证了数据的一致性的时候，Zookeeper就会出现这样一种情况：当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，在30-120s之间，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务中心瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。</p><h5 id="Eureka保证的是AP原则"><a href="#Eureka保证的是AP原则" class="headerlink" title="Eureka保证的是AP原则"></a>Eureka保证的是AP原则</h5><ul><li>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接宕掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。所以Eureka保证的是AP原则，也就是保证了可用性和分区容错性。所以在Eureka中各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，因为节点之间的同步存在时间差或者其他问题，所以导致查到的信息可能不是最新的。</li><li>并且Eureka的自我保护机制也可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，这时会出现以下几种情况：<ul><li>Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)</li><li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li></ul></li></ul><h3 id="负载均衡——Ribbon-基于客户端的负载均衡"><a href="#负载均衡——Ribbon-基于客户端的负载均衡" class="headerlink" title="负载均衡——Ribbon(基于客户端的负载均衡)"></a>负载均衡——Ribbon(基于客户端的负载均衡)</h3><h4 id="Ribbon的概述"><a href="#Ribbon的概述" class="headerlink" title="Ribbon的概述"></a>Ribbon的概述</h4><ul><li>Ribbon是什么<br>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套客户端负载均衡的工具。其主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的机器(服务)，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！</li><li>Ribbon能干什么<br><img src="/posts/8e9cec17/ribbon.jpg"><br>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高可用性)。Dubbo、SpringCloud 中均给我们提供了负载均衡，SpringCloud 的负载均衡算法可以自定义。</li><li>负载均衡的分类<ul><li>集中式LB，即在服务的提供方和消费方之间使用独立的LB设施，如Nginx(反向代理服务器)，由该设施负责把访问请求通过某种策略转发至服务的提供方！</li><li>进程式 LB，即将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。其中Ribbon 就属于进程式LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</li></ul></li></ul><h4 id="集成Ribbon"><a href="#集成Ribbon" class="headerlink" title="集成Ribbon"></a>集成Ribbon</h4><ul><li>在客户端服务springcloud-consumer-80导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入eureka客户端依赖，因为eureka的这个依赖已经集成了ribbon，</span></span><br><span class="line"><span class="comment">所以大度的ribbon依赖不用导入，如果导入了上面的额依赖，那么就会报500错误</span></span><br><span class="line"><span class="comment">注意：3.0的版本及以上已经把内置的ribbon移除，只有内置了一个loadbalancer依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在application.yml中配置Eureka <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#不向服务中心注册自己，只有提供者才向服务中心注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-consumer-80</span></span><br></pre></td></tr></table></figure></li><li>在启动类上使用注解开启服务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启Eureka客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在BeanConfig中给RestTemplate添加负载均衡<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给RestTemplate添加ribbon负载均衡，凡是通过RestTemplate访问的都会通过ribbon负载均衡进行调节</span></span><br><span class="line"><span class="comment">//将请求按照对应的负载均衡算法访问不同服务器中的服务</span></span><br><span class="line"><span class="comment">//ribbon的默认算法是轮询</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改DeptConsumerController类中的属性REST_URL_PREFIX<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不再通过固定的端口访问服务</span></span><br><span class="line"><span class="comment">//public static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"><span class="comment">//通过服务名称向服务注册中兴获取对应的服务列表，再通过负载均衡算法从列表中选择一个合适的服务器中的服务进行访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="Ribbon负载均衡测试"><a href="#Ribbon负载均衡测试" class="headerlink" title="Ribbon负载均衡测试"></a>Ribbon负载均衡测试</h4></li><li>流程图<br><img src="/posts/8e9cec17/ribbon%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B.jpg"></li><li>创建和springcloud-provider-dept-8001一样的服务提供者模块springcloud-provider-dept-8002、springcloud-provider-dept-8003；参考springcloud-provider-dept-8001模块，导入对应的依赖，并对apllication.yaml配置文件的端口号、配置数据源的url等进行改动，再对启动类进行相应的改动即可  </li><li>*注**：要新建数据库，每个服务提供者对应着一个数据库，这样database字段才会有区别</li><li>启动7001、8001、8002、8003、80服务，并访问 <a href="http://eureka7001.com:7001/">http://eureka7001.com:7001/</a> 监控页面地址，发现三个服务提供者已经注册进来了<br><img src="/posts/8e9cec17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%9501.jpg"><br>再访问80服务消费者端口，多刷新访问几次，发现默认是使用轮询的方法调用服务提供者的，会发现查出来的数据来自不同的数据库<br><img src="/posts/8e9cec17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%9502.jpg"><br><img src="/posts/8e9cec17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%9503.jpg"></li></ul><h4 id="更换负载均衡策略"><a href="#更换负载均衡策略" class="headerlink" title="更换负载均衡策略"></a>更换负载均衡策略</h4><ul><li>在springcloud-consumer-80消费者服务模块中的BeanConfig中注入另外的负载均衡策略<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*ribbon的负载均衡算法：(实现了IRule接口的类)</span></span><br><span class="line"><span class="comment">    AvailabilityFilteringRule：会过滤掉跳闸、访问故障的服务，对剩下的服务进行轮询</span></span><br><span class="line"><span class="comment">    RoundRobinRule：轮询</span></span><br><span class="line"><span class="comment">    RandomRule：随机</span></span><br><span class="line"><span class="comment">    RetryRule：先按照轮询获取服务，如果服务获取失败，则在指定时间内重试*/</span></span><br><span class="line">    <span class="comment">//一般不会在这里定义负载均衡算法，会在主启动类扫描不到的地方定义自己的负载均衡算法</span></span><br><span class="line">    <span class="comment">//如果在这里定义的话，那么访问所有的服务都会使用这个负载均衡算法，这样显然是不合理的</span></span><br><span class="line">    <span class="comment">//所以一般定义在主启动类扫描不到的包下，然后在主启动类中用@RibbonClient指定某个访问某个服务是使用自定义负载均衡算法</span></span><br><span class="line">    <span class="comment">//此处在此改变负载均衡策略为了测试使用</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>在上面已经启动了7001、8001、8002、8003、80服务中，重新启动80服务进行测试即可</li></ul><h4 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h4><ul><li>注释掉刚才的随机负载均衡策略</li><li>在80消费者服务的启动类扫描包路劲外创建一个包，用来存储自定义的负载均衡策略并在这个包下对负载均衡策略进行注入，目录如下：<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9506.jpg"></li><li>创建MyRule自定义负载均衡策略类(可参考随机负载均衡策略的写法，只需要改变对应的算法部分即可)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//复制randomRule的负载均衡实现，并在此基础上进行修改</span></span><br><span class="line"><span class="comment">//    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = &quot;RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//线程中断</span></span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Server&gt; upList = lb.getReachableServers(); <span class="comment">//获取活着的服务</span></span><br><span class="line">            List&lt;Server&gt; allList = lb.getAllServers(); <span class="comment">//获取全部服务</span></span><br><span class="line">            <span class="keyword">int</span> serverCount = allList.size(); <span class="comment">//定义全部服务的数量</span></span><br><span class="line">            <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * No servers. End regardless of pass, because subsequent passes</span></span><br><span class="line"><span class="comment">                 * only get more restrictive.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*//此处就是随机算法的算法部分，修改此部分即可</span></span><br><span class="line"><span class="comment">            int index = chooseRandomInt(serverCount); //从所有数量中的选一个随机数</span></span><br><span class="line"><span class="comment">            server = upList.get(index); //获取索引为index的活着的服务*/</span></span><br><span class="line">            <span class="comment">/*修改为每个服务被获取5次后到下一个服务，到了最后一个服务后就返回重新进行每个服务被获取5次后到下一个服务的循环</span></span><br><span class="line"><span class="comment">            * 被获取的次数：total初始化为0</span></span><br><span class="line"><span class="comment">            * 服务的索引：index初始化为0*/</span></span><br><span class="line">            <span class="keyword">if</span> (total &lt; <span class="number">5</span>)&#123;</span><br><span class="line">                server = upList.get(index);</span><br><span class="line">                total ++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                index ++;</span><br><span class="line">                total = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= upList.size())&#123;</span><br><span class="line">                    index =<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                server = upList.get(index);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123; <span class="comment">//如果活着的服务中索引为index的服务为空，则跳过此次循环</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The only time this should happen is if the server list were</span></span><br><span class="line"><span class="comment">                 * somehow trimmed. This is a transient condition. Retry after</span></span><br><span class="line"><span class="comment">                 * yielding.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Shouldn&#x27;t actually happen.. but must be transient or a bug.</span></span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">chooseRandomInt</span><span class="params">(<span class="keyword">int</span> serverCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建SmileRule配置类类注入负载均衡策略<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmileRule</span> </span>&#123;</span><br><span class="line">    <span class="comment">//也可以在此处注入随机策略，在这里注入是指定对某个服务使用这个策略</span></span><br><span class="line">    <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">    public IRule myRule()&#123;</span></span><br><span class="line"><span class="comment">        return new RandomRule();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//这个注册自己的负载均衡算法不能被启动类扫描到，所以放在这里，因为是要对某个服务使用这个策略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在启动类上使用注解@RibbonClient指定扫描某个配置类，把自定义负载均衡策略指定使用在某个服务上<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//服务启动时会加载自定义的配置类，让配置类生效，并且对指定的那个服务生效，但是这个配置类不能被启动类的scanner扫描到，</span></span><br><span class="line"><span class="comment">// 所以这个类要在和启动类不同包的路径下，此处版本不对，不能使用这个注解</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;, configuration = SmileRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重新启动80端口服务消费者的服务进行测试</li></ul><h4 id="使用Feign实现负载均衡"><a href="#使用Feign实现负载均衡" class="headerlink" title="使用Feign实现负载均衡"></a>使用Feign实现负载均衡</h4><h5 id="什么是Feign"><a href="#什么是Feign" class="headerlink" title="什么是Feign"></a>什么是Feign</h5><p>Feign是声明式Web-Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范，其实Feign就是在RestTemplate调用的上面加了一层接口来进行调用，主要是因为这样更加适合java面向接口编程的规范。并且Feign默认集成了Ribbon，利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</p><h5 id="Feign的作用"><a href="#Feign的作用" class="headerlink" title="Feign的作用"></a>Feign的作用</h5><p>Feign旨在使编写Java Http客户端变得更容易。前面在使用Ribbon + RestTemplate时，利用RestTemplate对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。但是Fei功能的效率降低了。</p><h5 id="Feign的使用"><a href="#Feign的使用" class="headerlink" title="Feign的使用"></a>Feign的使用</h5><ul><li>创建一个Feign消费者模块springcloud-consumer-feign-80，目录如下：<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9507.jpg">  </li><li>导入相应的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入自定义的api依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入eureka客户端，集成了ribbon--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入feign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写application.yaml配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="comment">#eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#不向服务中心注册自己，只有提供者才向服务中心注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-consumer-80</span></span><br></pre></td></tr></table></figure></li><li>创建启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启Eureka客户端</span></span><br><span class="line"><span class="comment">//开启Feign客户端，扫描com.tSmile.springcloud包下的所有类，包括依赖中的自定义的api依赖的com.tSmile.springcloud包下的所有类</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.tSmile.springcloud&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignDeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignDeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改springcloud-api模块<ul><li>导入Feign依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入feign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在com.tSmile.springcloud.service包下创建一个DeptServiceClient接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加Feign注解，并添加服务提供者的名称，指到注册中心中找这个服务</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptServiceClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个请求地址要和提供者的请求地址一样，否则找不到提供者对应的请求，方法名可以不一致，因为不是通过方法名来匹配的</span></span><br><span class="line">    <span class="comment">//也就是说根据@FeignClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)找到对应的服务</span></span><br><span class="line">    <span class="comment">//然后根据对应的请求地址匹配提供者中对应的请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getOne/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Dept <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function">Boolean <span class="title">add</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>在springcloud-consumer-feign-80消费者模块中编写controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptServiceClient deptServiceClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deptServiceClient.add(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deptServiceClient.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deptServiceClient.getAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>注：如果想要在Feign中改变负载均衡策略，也和在Ribbon中一样，因为Feign集成了Ribbon来实现了负载均衡</li><li>在上面启动了7001、8001、8002、80030、80这些服务的基础上，关闭Ribbon的80消费者端口，启动Feign的消费者端口进行测试</li></ul><h5 id="Feign和Ribbon-RestTemplate的对比"><a href="#Feign和Ribbon-RestTemplate的对比" class="headerlink" title="Feign和Ribbon+RestTemplate的对比"></a>Feign和Ribbon+RestTemplate的对比</h5><p><img src="/posts/8e9cec17/Feign%E5%92%8CRibbon.jpg"><br>选用Feign还是Ribbon+RestTemplate，根据个人习惯而定，如果喜欢REST风格使用Ribbon；如果喜欢社区版的面向接口风格使用Feign.</p><h3 id="服务熔断——Hystrix"><a href="#服务熔断——Hystrix" class="headerlink" title="服务熔断——Hystrix"></a>服务熔断——Hystrix</h3><h4 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h4><ul><li>什么是雪崩效应：<br>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是“扇出”，如果扇出的链路上某个微服务的调用响应时间过长，或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”，如图所示：<br><img src="/posts/8e9cec17/%E9%9B%AA%E5%B4%A9.jpg">  </li><li>雪崩效应的后果<br>对于高流量的应用来说，单一的(没有备份的)后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行。  </li></ul><h4 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h4><ul><li>什么是Hystrix<br>Hystrix是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，Hystrix 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。</li><li>Hystrix解决雪崩———断路器<br>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩，如图所示：<br><img src="/posts/8e9cec17/hystrix.jpg">  </li><li>Hystrix的作用  <ul><li>通过第三方（一般来源网络）的调用，给与保护和控制延迟和失败。</li><li>在复杂的分布式系统中复制级联失败。</li><li>快速失败和修复。</li><li>在可能的情况下，回滚挥着优雅的失败。</li><li>实现几乎实时监控，警报和操作控制。</li></ul></li><li>Hystrix解决了什么问题<br>复杂的分布式体系结构中的应用程序具有许多依赖关系，每个依赖关系都会在某些时候不可避免的失败，如果主机应用程序未与这些外部的故障隔离，那么可能会被这些故障拖垮；而Hystrix实现了主机程序和外部的故障进行隔离，解决了主机程序被外部故障拖垮的问题</li><li>Hystrix的功能  <ul><li>熔断器</li><li>隔离</li><li>线程和线程池</li><li>信号量隔离</li><li>请求合并</li><li>请求缓存</li><li>仪表盘</li></ul></li><li>官网地址：<a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></li></ul><h4 id="服务熔断概述"><a href="#服务熔断概述" class="headerlink" title="服务熔断概述"></a>服务熔断概述</h4><ul><li><p>什么是服务熔断？<br>熔断机制是对应雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阀值缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是：@HystrixCommand。</p></li><li><p>服务熔断解决了什么问题  </p><ul><li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li><li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</li></ul></li></ul><h4 id="服务熔断的使用"><a href="#服务熔断的使用" class="headerlink" title="服务熔断的使用"></a>服务熔断的使用</h4><ul><li>复制springcloud-provider-dept-8001模块命名为springcloud-provider-dept-hystrix-8001，然后对springcloud-provider-dept-hystrix-8001进行修改，用来测试服务熔断机制，目录如下：<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9508.jpg">  </li><li>导入hystrix依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>不用修改配置文件，修改controller(此处为了演示，值对其中一个controller进行服务熔断)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//==============开启熔断机制=====================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/dept/getOne/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//如果出现错误，回调某个方法</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;hystrixGet&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getOne</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    Dept dept = deptService.getDeptById(id);</span><br><span class="line">    <span class="comment">//如果没有抛出异常，当dept为空时，那么前端页面就会什么都没有返回，一片空白</span></span><br><span class="line">    <span class="comment">//添加了抛出异常后，如果dept为空，那么就会弹出错误页面</span></span><br><span class="line">    <span class="comment">//添加了熔断机制hystrix后，当抛出异常时，就会调用备选方法，返回备选方法的值</span></span><br><span class="line">    <span class="keyword">if</span> (dept == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;id=&gt;&quot;</span> + id + <span class="string">&quot;的用户不存在，或者无法找到对应的用户~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写回调方法，即备选方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">hystrixGet</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptNo(id)</span><br><span class="line">            .setDeptName(<span class="string">&quot;id为=&gt;&quot;</span> + id + <span class="string">&quot;的信息不存在，为null&quot;</span>)</span><br><span class="line">            .setDbSource(<span class="string">&quot;在数据库没有对应的信息~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===================================</span></span><br></pre></td></tr></table></figure></li><li>在启动类上添加开启熔断机制注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启服务发现</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//开启熔断机制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProviderHystrix_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProviderHystrix_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>先启动7001和没有添加熔断机制的8001服务，访问不存在的id进行测试：<br>服务器直接发生错误，返回错误页面！！！<br><img src="/posts/8e9cec17/%E6%9C%AA%E5%BC%80%E7%86%94%E6%96%AD.jpg"><br>然后关闭没有添加熔断机制的8001服务，启动添加了熔断机制的hystrix8001服务，访问不存在的id进行测试：<br>服务器错误被隔离，返回自定义备份信息！！！<br><img src="/posts/8e9cec17/%E5%BC%80%E4%BA%86%E7%86%94%E6%96%AD.jpg"><br>由此可知，为了避免因某个微服务后台出现异常或错误而导致整个应用或网页报错，使用熔断是必要的</li></ul><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><h5 id="什么是服务降级"><a href="#什么是服务降级" class="headerlink" title="什么是服务降级"></a>什么是服务降级</h5><p>服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面的请求进行有策略的不处理，或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作，即尽可能的把系统资源让给优先级高的服务。资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机，导致某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双11活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。</p><h5 id="服务降级的应用场景"><a href="#服务降级的应用场景" class="headerlink" title="服务降级的应用场景"></a>服务降级的应用场景</h5><p>当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些不重要或不紧急的服务或任务进行服务的 延迟使用或暂停使用。降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。<br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7.jpg"><br>由上图可得，当某一时间内服务A的访问量暴增，而服务B和服务C的访问量较少，为了缓解A服务的压力，这时候需要暂时关闭B服务和C服务的功能，从而释放服务器的资源，为A服务分担压力，虽然整体的服务水平降低了，但是至少保证了服务器和网站不会崩溃，这就叫做服务降级。</p><h5 id="服务降级需要考虑的问题"><a href="#服务降级需要考虑的问题" class="headerlink" title="服务降级需要考虑的问题"></a>服务降级需要考虑的问题</h5><ul><li>那些服务是核心服务，哪些服务是非核心服务</li><li>那些服务可以支持降级，那些服务不能支持降级，降级策略是什么</li><li>除服务降级之外是否存在更复杂的业务放通场景，策略是什么？</li></ul><h5 id="服务降级的分类"><a href="#服务降级的分类" class="headerlink" title="服务降级的分类"></a>服务降级的分类</h5><ul><li>超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</li><li>失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</li><li>故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认库存）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</li><li>限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页。</li></ul><h5 id="服务降级案例"><a href="#服务降级案例" class="headerlink" title="服务降级案例"></a>服务降级案例</h5><ul><li>在springcloud-api模块的service包下创建DeptServiceClientFallbackFactory类实现FallbackFactory接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServiceClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//服务降级备选方案，即关掉服务后，客户端访问时返回的默认值</span></span><br><span class="line">    <span class="comment">//服务降级：是对整个服务来操作的，即当服务被关掉时，需要对服务中所有的方法都做了备选方案，返回备选方法的值不至于让服务直接挂掉，至少让客户端还可以访问，并且返回提示</span></span><br><span class="line">    <span class="comment">//为什么要进行服务降级？</span></span><br><span class="line">    <span class="comment">// 当某些服务的压力非常大时，而某些很少人访问，那么就可以将少人访问的服务停止，让出服务器的空间给压力大的服务，减轻压力大的服务的压力，服务降级在客户端的配置文件中进行开启</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptServiceClient <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptServiceClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Dept <span class="title">getById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptNo(id)</span><br><span class="line">                        .setDeptName(<span class="string">&quot;服务已停止访问~&quot;</span>)</span><br><span class="line">                        .setDbSource(<span class="string">&quot;没有数据&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Dept dept = <span class="keyword">new</span> Dept().setDeptNo(<span class="keyword">null</span>)</span><br><span class="line">                        .setDeptName(<span class="string">&quot;服务已停止访问~&quot;</span>)</span><br><span class="line">                        .setDbSource(<span class="string">&quot;没有数据&quot;</span>);</span><br><span class="line">                List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                depts.add(dept);</span><br><span class="line">                <span class="keyword">return</span> depts;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用@FeignClient注解中的fallbackFactory回调属性将SPRINGCLOUD-PROVIDER-DEPT服务和服务降级的备份关联起来<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果服务停止，那么就会调用备用方案</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;, fallbackFactory = DeptServiceClientFallbackFactory.class)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptServiceClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个请求地址要和提供者的请求地址一样，否则找不到提供者对应的请求，方法名可以不一致，因为不是通过方法名来匹配的</span></span><br><span class="line">    <span class="comment">//也就是说根据@FeignClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)找到对应的服务</span></span><br><span class="line">    <span class="comment">//然后根据对应的请求地址匹配提供者中对应的请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getOne/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Dept <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function">Boolean <span class="title">add</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在springcloud-consumer-feign-80消费者模块的配置文件中开启服务降级<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启服务降级</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>启动7001、hystrix8001、FeignDeptConsumer_80服务进行测试访问 <a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a><br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E6%B5%8B%E8%AF%9502.jpg"><br>没有问题，可以访问到服务，然后停止掉hystrix8001服务，再访问 <a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a><br><img src="/posts/8e9cec17/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E6%B5%8B%E8%AF%9501.jpg">  </li><li><em>服务降级成功！！</em>*</li></ul><h4 id="熔断、服务降级、限流的理解"><a href="#熔断、服务降级、限流的理解" class="headerlink" title="熔断、服务降级、限流的理解"></a>熔断、服务降级、限流的理解</h4><ul><li>熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃；系统自动执行和恢复</li><li>降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定；从整体负荷考虑；</li><li>限流：限制并发的请求访问量，超过阈值则拒绝；</li></ul><h4 id="服务熔断和服务降级的区别"><a href="#服务熔断和服务降级的区别" class="headerlink" title="服务熔断和服务降级的区别"></a>服务熔断和服务降级的区别</h4><ul><li>服务熔断是在服务端进行设置的，当某个服务超时或异常，引起服务熔断，类似于保险丝(自我熔断)</li><li>服务降级是在客户端进行设置的，服务降级是从整体网站请求负载考虑，当某个服务熔断或者关闭之后，服务将不再被调用，此时在客户端，我们可以准备一个FallBackFactory，返回一个默认的值(缺省值)。会导致整体的服务水平下降，但是好歹能用，比直接挂掉强。</li><li>触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；</li><li>管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li><li>实现方式不太一样，服务降级具有代码侵入性(由控制器完成/或自动降级)，熔断一般称为自我熔断。</li></ul><h4 id="Hystrix流监控——Dashboard"><a href="#Hystrix流监控——Dashboard" class="headerlink" title="Hystrix流监控——Dashboard"></a>Hystrix流监控——Dashboard</h4><h5 id="什么是Dashboard"><a href="#什么是Dashboard" class="headerlink" title="什么是Dashboard"></a>什么是Dashboard</h5><p>Deshboard是几乎能对服务进行实时监控的一个工具</p><h5 id="Dashboard的使用"><a href="#Dashboard的使用" class="headerlink" title="Dashboard的使用"></a>Dashboard的使用</h5><ul><li>创建springcloud-consumer-hystrix-dashboard模块，目录如下：<br><img src="/posts/8e9cec17/%E7%9B%AE%E5%BD%9509.jpg">  </li><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入自定义的api依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入eureka客户端，集成了ribbon--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入hystrix依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入hystrix监控依赖</span></span><br><span class="line"><span class="comment">    注：确保服务端要有spring-boot-starter-actuator监控依赖才能进行监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">proxy-stream-allow-list:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li><li>编写主启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//开启dashboard监控</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDashboard_9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerDashboard_9001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在服务提供者springcloud-provider-dept-hystrix-8001模块的主启动类中添加一个servlet监控对象对这个服务进行监控<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启服务发现</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//开启熔断机制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProviderHystrix_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProviderHystrix_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加一个servlet，来使用dashboard监控</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet hystrixMetricsStreamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(hystrixMetricsStreamServlet);</span><br><span class="line">        servletRegistrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        servletRegistrationBean.setUrlMappings(Arrays.asList(<span class="string">&quot;/hystrix.stream&quot;</span>));</span><br><span class="line">        servletRegistrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>确保服务提供者springcloud-provider-dept-hystrix-8001模块中导入了监控类<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--完善监控信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>启动7001服务注册中心，再启动9001监控服务，访问 <a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a> 地址，进入如下页面后，再启动DeptProviderHystrix_8001服务，再输入进入监控页面的地址等进入登录页面<br>注：如果访问上面的地址没有问题，那么启动9001服务时出现的错误可以不用管<br><img src="/posts/8e9cec17/dashboard%E7%99%BB%E5%BD%95.jpg"><br>进入监控页面是输入的登录地址为：<code>http://localhost:8001/+8001服务提供者主启动类中设置的servletRegistrationBean.setUrlMappings(Arrays.asList(&quot;/hystrix.stream&quot;));的路径</code>，即<a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a>  </li><li>进入登录页面时，如果遇到如下情况：<br><img src="/posts/8e9cec17/dashboard01.jpg"><br>表示还没有用户访问过DeptProviderHystrix_8001服务，访问一下服务就好，如访问 <a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a>  之后就可以看到监控信息了，如图：<br><img src="/posts/8e9cec17/dashboard02.jpg">  </li><li>监控信息的具体含义<br><img src="/posts/8e9cec17/dashboard03.jpg">  </li></ul><h3 id="路由网关——Zuul"><a href="#路由网关——Zuul" class="headerlink" title="路由网关——Zuul"></a>路由网关——Zuul</h3><h4 id="Zull路由网关概述"><a href="#Zull路由网关概述" class="headerlink" title="Zull路由网关概述"></a>Zull路由网关概述</h4><p>​Zull包含了对请求的路由(用来跳转的)和过滤两个最主要功能，其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。Zuul和Eureka进行整合，是将Zuul自身注册为Eureka服务治理下的应用，同时Zuul也从Eureka中获得其他服务的消息，也就是说以后的访问微服务都是通过Zuul跳转后获得。<br><img src="/posts/8e9cec17/%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3.jpg"><br>官方文档：<a href="https://github.com/Netflix/zuul/">https://github.com/Netflix/zuul/</a></p><h4 id="路由网关的使用"><a href="#路由网关的使用" class="headerlink" title="路由网关的使用"></a>路由网关的使用</h4><ul><li>创建路由网关springcloud-zuul-9527模块</li><li>导入相应的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入zuul依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入自定义的api依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入eureka客户端，集成了ribbon--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入hystrix依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入hystrix监控依赖</span></span><br><span class="line"><span class="comment">    注：确保服务端要有spring-boot-starter-actuator监控依赖才能进行监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写application.yaml配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置应用的名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-zuul-9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#配置注册中心的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#配置在服务中心的链接的名称</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-zuul-9527</span></span><br><span class="line">    <span class="comment">#配置显示IP地址</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#配置点击在服务中心的链接时出现的信息</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">tSmile-springcloud</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">www.tsmile.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置zuul网关</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment">#zuul就做了两件事情：路由统一routes和过滤ignored-services、prefix</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">keys:</span></span><br><span class="line">      <span class="comment">#修改原来的服务的名称，将原来的springcloud-provider-dept改为mydept</span></span><br><span class="line">      <span class="comment">#通过改变服务的名称来隐藏服务的真实名称</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/mydept/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">springcloud-provider-dept</span></span><br><span class="line">  <span class="comment">#忽略服务，即不能再使用原来的springcloud-provider-dept服务名称来访问服务，</span></span><br><span class="line">  <span class="comment">#只能通过zuul网关配置的mydept来访问该服务</span></span><br><span class="line">  <span class="comment">#ignored-services: springcloud-provider-dept</span></span><br><span class="line">  <span class="comment">#一般使用*号屏蔽全部使用真实服务的访问</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="comment">#添加同一的访问前缀，这样使用原来没有添加前缀时的路径访问不了</span></span><br><span class="line">  <span class="comment">#原来：http://www.tsmile.com:9527/mydept/dept/getOne/3</span></span><br><span class="line">  <span class="comment">#添加后：http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/3</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/tsmile</span></span><br></pre></td></tr></table></figure></li><li>编写启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">//开启zuul，一般使用代理开启，因为zuul一般不是一个服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication_9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication_9527.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动7001、8001、9527服务，如图所示：<br><img src="/posts/8e9cec17/%E7%BD%91%E5%85%B3%E6%B3%A8%E5%86%8C.jpg"><br>访问 <a href="http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/3">http://www.tsmile.com:9527/tsmile/mydept/dept/getOne/3</a> 地址<br><img src="/posts/8e9cec17/%E7%BD%91%E5%85%B3%E8%AE%BF%E9%97%AE.jpg">  </li><li>网关配置的思路图<br><img src="/posts/8e9cec17/%E7%BD%91%E5%85%B3%E6%80%9D%E8%B7%AF.jpg"> </li><li>如果将网关模块设置为客户端(服务消费者)80端口模块，可以参考原来的80端口模块来新建一个网关的80端口的模块，目录如下：<br><img src="/posts/8e9cec17/%E7%BD%91%E5%85%B3%E7%9B%AE%E5%BD%95.jpg"> </li><li>主启动类修改如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">//开启zuul，一般使用代理开启，因为zuul一般不是一个服务</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;, configuration = SmileRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication_9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication_9527.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动7001，8001,8002,8003，网关的80服务进行测试</li></ul><p><strong>为什么自定义的负载均衡算法生效不了呢？在springcloud包下创建的config包下创建了一个BeanConfig类后，在这个类中将轮询改为随机后生效了，但是使用@RibbonClient注解指定自己创建的某个负载均衡算法给某个服务却没有生效，有人知道为什么吗？</strong></p><p>本文是观看狂神说B站视频后整理的笔记——侵删<br>视频地址：<a href="https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver">https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h4&gt;&lt;p&gt;本文简单介绍了springCloud-Netflix的四大核心组件，其中包括Eureka，Ribbon，Hystrix和Zuul，并对这四个组建的使用进行了简单的描述，本文内容较多，要耐心才能看完哦!&lt;/p&gt;</summary>
    
    
    
    <category term="springCloud" scheme="https://yanxiaoblog.github.io/categories/springCloud/"/>
    
    
    <category term="spring" scheme="https://yanxiaoblog.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>springCloud-Rest环境搭建</title>
    <link href="https://yanxiaoblog.github.io/posts/c2c9eac1/"/>
    <id>https://yanxiaoblog.github.io/posts/c2c9eac1/</id>
    <published>2021-11-27T09:54:48.000Z</published>
    <updated>2021-12-04T03:44:51.088Z</updated>
    
    <content type="html"><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文介绍了springCloud-Rest环境搭建的整个流程</p><span id="more"></span><h4 id="springCloud-Rest环境搭建环境的搭建"><a href="#springCloud-Rest环境搭建环境的搭建" class="headerlink" title="springCloud-Rest环境搭建环境的搭建"></a>springCloud-Rest环境搭建环境的搭建</h4><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><ul><li>jdk 1.8</li><li>springBoot版本 2.2.5.RELEASE</li><li>springCloud版本 Hoxton.SR8</li><li>mysql版本 8.0</li></ul><h5 id="创建普通maven父工程"><a href="#创建普通maven父工程" class="headerlink" title="创建普通maven父工程"></a>创建普通maven父工程</h5><ol><li>创建一个普通的maven父工程</li><li>删除掉父工程的src目录</li><li>在父工程导入依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包方式改为pom方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--依赖的版本控制，将依赖的版放到这里，可以同一管理版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用dependencyManagement来管理dependencies,使用依赖管理后，</span></span><br><span class="line"><span class="comment">这个父项目的子模块不会自动导入所有父类的依赖，而是子模块需要什么依赖就导入什么依赖，这样可以避免导入多余的依赖，并且子模块刀肉依赖时会自动导入父项目的依赖及对应的版本号，这样版本的管理比较方便和统一--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入springCloud依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入springBoot依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springBoot启动器--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springBoot整合mybatis启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志门面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4-groovyless<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Rest环境搭建的基本思路图"><a href="#Rest环境搭建的基本思路图" class="headerlink" title="Rest环境搭建的基本思路图"></a>Rest环境搭建的基本思路图</h5><img src="/posts/c2c9eac1/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%80%9D%E8%B7%AF.jpg"></li></ol><h5 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db01;</span><br><span class="line">use db01;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">deptNo <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    deptName <span class="type">varchar</span>(<span class="number">60</span>),</span><br><span class="line">    dbSource <span class="type">varchar</span>(<span class="number">60</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;开发部&quot;, database());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;人事部&quot;, database());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;市场部&quot;, database());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;财务部&quot;, database());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptName, dbSource) <span class="keyword">values</span> (&quot;运维部&quot;, database());</span><br></pre></td></tr></table></figure><h5 id="创建实体类springcloud-api模块"><a href="#创建实体类springcloud-api模块" class="headerlink" title="创建实体类springcloud-api模块"></a>创建实体类springcloud-api模块</h5><ul><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个依赖时子模块自己需要的依赖，如果父项目中已经导入了对应的依赖，</span></span><br><span class="line"><span class="comment">    那么子项目的依赖就不用写版本号了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入feign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写pojo类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span>  <span class="comment">//开启链式写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//必须要实现序列化，不然对象传输的时候会出错</span></span><br><span class="line">    <span class="keyword">private</span> Long deptNo;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="comment">//用来区分这个数据是哪个数据库的字段，因为同一个数据可能来自不同的数据库</span></span><br><span class="line">    <span class="comment">//微服务：一个服务对应一个数据库</span></span><br><span class="line">    <span class="keyword">private</span> String dbSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(String deptName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptName = deptName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 链式写法：</span></span><br><span class="line"><span class="comment">    * Dept dept = new dept();</span></span><br><span class="line"><span class="comment">    * dept.setDeptNo(1).setDeptName(&quot;&quot;).setDbSource();</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>目录<br><img src="/posts/c2c9eac1/%E7%9B%AE%E5%BD%9501.jpg"></li></ul><h5 id="创建服务提供者spring-provider-dept-8001模块"><a href="#创建服务提供者spring-provider-dept-8001模块" class="headerlink" title="创建服务提供者spring-provider-dept-8001模块"></a>创建服务提供者spring-provider-dept-8001模块</h5><p>注：后面的8001表示这个模块使用的端口号，以下其他模块后面的数字也是表示端口号</p><ul><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--我们写的api依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--druid数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志门面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springBoot测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jetty服务器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写apllication.yaml配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment">#配置mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.tSmile.springcloud.pojo</span> <span class="comment"># 为这个包下的实体类起别名</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span> <span class="comment"># 绑定mapper包下的所有mapper.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="comment"># 绑定mybatis可信配置文件</span></span><br><span class="line"><span class="comment">#配置spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-dept</span> <span class="comment">#设置spring配置的名称</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment">#配置数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db01?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li><li>编写mybatis核心配置文件mybatis-config.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启二级缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写DeptMapper接口和对应的DeptMapper.xml<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dept <span class="title">getDeptById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">getAllDept</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tSmile.springcloud.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from dept where deptNo=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllDept&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from dept;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addDept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        insert into dept(deptName, dbSource) values (#&#123;deptName, DATABASE());</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写service层的DeptService和DeptServiceImpl<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dept <span class="title">getDeptById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">getAllDept</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDeptById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptMapper.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAllDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptMapper.getAllDept();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptMapper.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写Controller层<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过这个controller来提供restful服务</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getOne/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getOne</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Dept dept = deptService.getDeptById(id);</span><br><span class="line">        <span class="comment">//如果没有抛出异常，当dept为空时，那么前端页面就会什么都没有返回，一片空白</span></span><br><span class="line">        <span class="comment">//添加了抛出异常后，如果dept为空，那么就会弹出错误页面，这算是一种处理错误信息的方法</span></span><br><span class="line">        <span class="keyword">if</span> (dept == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;id=&gt;&quot;</span> + id + <span class="string">&quot;的用户不存在，或者无法找到对应的用户~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.getAllDept();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>编写启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>目录<br><img src="/posts/c2c9eac1/%E7%9B%AE%E5%BD%9502.jpg"></li></ul><h5 id="创建消费者springcloud-consumer-80模块"><a href="#创建消费者springcloud-consumer-80模块" class="headerlink" title="创建消费者springcloud-consumer-80模块"></a>创建消费者springcloud-consumer-80模块</h5><ul><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入自定义的api依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tSmile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写application.yaml配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li>编写BeanConfig类，将RestTemplate注入到容器中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给RestTemplate添加ribbon，凡是通过RestTemplate访问的都会通过ribbon负载均衡进行调节</span></span><br><span class="line">    <span class="comment">// 将请求按照对应的负载均衡算法访问不同物服注册中心中的对应提供者服务名称的服务</span></span><br><span class="line">    <span class="comment">//ribbon的默认算法是轮询</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/16 - 23:12</span></span><br><span class="line"><span class="comment"> * 消费者模块没有service层，怎么调用service？</span></span><br><span class="line"><span class="comment"> * 通过http的RestFul风格访问provider模块的controller来调用对应的service层</span></span><br><span class="line"><span class="comment"> * 怎么通过http的RestFul风格来访问provider的controller？</span></span><br><span class="line"><span class="comment"> * 通过restTemplate来访问对应的controller地址</span></span><br><span class="line"><span class="comment"> * 什么是restTemplate？</span></span><br><span class="line"><span class="comment"> * restTemplate就是提供了多种便捷访问远程http服务方法的一个类，是简单的RestFul模板</span></span><br><span class="line"><span class="comment"> * 访问远程服务的参数：(url地址,map(用来存放对象),Class&lt;T&gt; responseType(返回值的类型))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="comment">//通过服务名称对提供者服务进行访问,不再通过固定的端口访问服务</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/add&quot;</span>,dept,<span class="keyword">boolean</span>.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到对应的服务名，根据服务名获取服务的http://localhost:8001&quot;地址，然后进行拼接找到对应的提供者的请求</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/getOne/&quot;</span>+id,Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/getAll&quot;</span>,List.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>目录<br><img src="/posts/c2c9eac1/%E7%9B%AE%E5%BD%9503.jpg"></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>启动服务提供者模块和消费者模块</li><li>通过访问消费者模块的端口获取数据 <a href="http://localhost/consumer/dept/getAll">http://localhost/consumer/dept/getAll</a><br>注：80端口号在访问时可以省略掉端口号不写，默认为80端口号<br><img src="/posts/c2c9eac1/%E6%B5%8B%E8%AF%9501.jpg"></li></ul><p>测试成功，环境搭建成功！  </p><p>注：springCloud的学习的基本思路为：导入相应的依赖，编写对应的配置，编写项目启动类，开启依赖对应的功能@Enablexxx，后面的学习就是按照这个思路来进行学习的</p><p>本文是观看狂神说B站视频后整理的笔记——侵删<br>视频地址：<a href="https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver">https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver</a></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h5&gt;&lt;p&gt;本文介绍了springCloud-Rest环境搭建的整个流程&lt;/p&gt;</summary>
    
    
    
    <category term="springCloud" scheme="https://yanxiaoblog.github.io/categories/springCloud/"/>
    
    
    <category term="spring" scheme="https://yanxiaoblog.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>微服务与springcloud</title>
    <link href="https://yanxiaoblog.github.io/posts/f0919c40/"/>
    <id>https://yanxiaoblog.github.io/posts/f0919c40/</id>
    <published>2021-11-25T21:48:39.000Z</published>
    <updated>2021-12-04T03:51:21.776Z</updated>
    
    <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本文简单介绍了什么是微服务以及微服务架构的一套解决方案springcloud</p><span id="more"></span><h4 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h4><h5 id="什么是微服务？"><a href="#什么是微服务？" class="headerlink" title="什么是微服务？"></a>什么是微服务？</h5><ul><li>微服务是一种架构的思想或者说是一种架构的模式或者风格，就目前而言，微服务没有一个统一的标准的定义。</li><li>微服务提倡将单一的应用程序划分成一组组小的服务，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(HTTP)互相沟通，每个服务都围绕着具体的业务进行构建，并且能够被独立地部署到生产环境中。另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(Maven)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据储。<br>微服务的提出（汉化版）：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></li></ul><h5 id="微服务的特点"><a href="#微服务的特点" class="headerlink" title="微服务的特点"></a>微服务的特点</h5><ul><li>解耦：同一系统内的服务大部分可以被解耦，即服务于服务之间的耦合度被极大地降低了。因此应用，作为一个整体，可以轻易地被构建、修改和扩展。</li><li>组件化：微服务中的每一个服务可以被看成相互独立的组件，这些组件可以被轻易地替换和升级。</li><li>业务能力：微服务很小，它们可以专注于某种单一的能力，即每个服务都只专注某一种能力或者业务</li><li>自治：开发者和团队可以独立地工作，提高开发速度，也就是说每个服务都是独立的，可以被独立的开发出来，不需要密切的团队合作。</li><li>持续交付：允许持续发布软件新版本，通过系统化的自动手段来创建、测试和批准新版本，就是说可以不停地迭代开发。</li><li>职责明确：微服务不把应用看成一个又一个的项目。相反，它们把应用当成了自己需要负责的项目。</li><li>去中心化管理：关注于使用正确的工具来完成正确的工作。这也就是说，没有标准化的方式或者技术模式。开发者们有权选择最好的工具来解决问题，就是说不局限于使用某一种语言或者某一种工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据储。</li><li>敏捷性：微服务支持敏捷开发。任何新功能都可以被快速开发或丢弃。</li></ul><h5 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h5><ul><li>独立开发：基于各个微服务所独有的功能，它们可以被轻易开发出来。</li><li>独立部署：基于它们所提供的服务，它们可以被独立地部署到应用中。</li><li>错误隔离：即便其中某个服务发生了故障，整个系统还可以继续工作。</li><li>混合技术栈：可以使用不同的语言和技术来为同一个应用构建不同的服务。</li><li>按粒度扩展：可以根据需求扩展某一个组件，不需要将所有组件全部扩展。<br>（以上的特点和优点原文来自MrTebie：<a href="https://zhuanlan.zhihu.com/p/66190538%EF%BC%89">https://zhuanlan.zhihu.com/p/66190538）</a></li></ul><h5 id="微服务的缺点"><a href="#微服务的缺点" class="headerlink" title="微服务的缺点"></a>微服务的缺点</h5><ul><li>开发人员要处理分布式系统的复杂性；</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li><li>系统部署依赖问题；</li><li>服务间通信成本问题；</li><li>数据一致性问题；</li><li>系统集成测试问题；</li><li>性能和监控问题；<br>微服务的概念和优缺点可以参考文章：<a href="https://blog.csdn.net/kunyus/article/details/90670710">https://blog.csdn.net/kunyus/article/details/90670710</a></li></ul><h4 id="微服务理解图"><a href="#微服务理解图" class="headerlink" title="微服务理解图"></a>微服务理解图</h4><p><img src="/posts/f0919c40/%E5%BE%AE%E6%9C%8D%E5%8A%A1.jpg"></p><h4 id="微服务技术栈简单概括"><a href="#微服务技术栈简单概括" class="headerlink" title="微服务技术栈简单概括"></a>微服务技术栈简单概括</h4><table><thead><tr><th>微服务技术条目</th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMVC等</td></tr><tr><td>服务配置与管理</td><td>Netfix公司的Archaius、阿里的Diamond等</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper等</td></tr><tr><td>服务调用</td><td>Rest、PRC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用(客户端调用服务的简化工具)</td><td>Fegin等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由(API网关)</td><td>Zuul等</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Specatator等</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper等</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td></tr><tr><td>时间消息总栈</td><td>SpringCloud Bus</td></tr><tr><td>服务部署</td><td>Docker、OpenStack、Kubernetes等</td></tr></tbody></table><h5 id="微服务的四大难题"><a href="#微服务的四大难题" class="headerlink" title="微服务的四大难题"></a>微服务的四大难题</h5><ul><li>服务这么多，客户端该怎么访问</li><li>这么多服务之间该如何通信</li><li>如何管理这么多服务</li><li>服务挂了怎么办  </li></ul><h5 id="三大解决方案："><a href="#三大解决方案：" class="headerlink" title="三大解决方案："></a>三大解决方案：</h5><ul><li>Spring Cloud Netflix</li><li>Apache Dubbo ZooKeeper</li><li>Spring Cloud Alibaba</li></ul><h4 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h4><h5 id="什么是springcloud"><a href="#什么是springcloud" class="headerlink" title="什么是springcloud"></a>什么是springcloud</h5><p>Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。简单来说springclou就是微服务中遇到的问题的一套解决方案。<br>官网地址：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p><h5 id="springcloud能做什么"><a href="#springcloud能做什么" class="headerlink" title="springcloud能做什么"></a>springcloud能做什么</h5><p>Distributed/versioned configuration<br>分布式/版本化配置<br>Service registration and discovery 服务注册和发现<br>Routing 路由<br>Service-to-service calls 服务间的通信调用<br>Load balancing 负载均衡<br>Circuit Breakers 断路器<br>Global locks 全局锁<br>Leadership election and cluster state 选举及集群状态<br>Distributed messaging 分布式消息传递  </p><h5 id="springcloud-Netflix中的四大核心组件"><a href="#springcloud-Netflix中的四大核心组件" class="headerlink" title="springcloud-Netflix中的四大核心组件"></a>springcloud-Netflix中的四大核心组件</h5><p>springcloud中的四大核心组件就是为了解决微服务中的四大难题，还有很多其他的组件解决其他的问题，此处只学习使用四大组件来解决四大问题</p><ul><li>api网关：zuul组件 ——解决客户访问问题</li><li>Http通信方式：Ribbon+RestTemplates/Feign（同步，阻塞）——解决服务之间通信问题</li><li>服务注册与发现：Eureka ——解决服务管理的问题</li><li>熔断机制：Hystrix（断路器） ——解决服务挂了的问题</li></ul><h5 id="springCloud的理解图"><a href="#springCloud的理解图" class="headerlink" title="springCloud的理解图"></a>springCloud的理解图</h5><p><img src="/posts/f0919c40/springcloud.jpg"></p><h5 id="springBoot和springCloud"><a href="#springBoot和springCloud" class="headerlink" title="springBoot和springCloud"></a>springBoot和springCloud</h5><ul><li>springBoot是专注于对一个个微服务进行开发的一个框架</li><li>springCloud是专注于对使用springBoot开发的所有的微服务进行协调管理的一个框架，也就是对这些所有的微服务进行集成的一个框架，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li><li>springBoot可以独立开发项目，但是springCloud必须依赖springBoot开发的服务才能对所有的服务集成为一个项目</li><li>简单来说就是：SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架；</li></ul><h5 id="springBoot与SpringCloud的版本对应"><a href="#springBoot与SpringCloud的版本对应" class="headerlink" title="springBoot与SpringCloud的版本对应"></a>springBoot与SpringCloud的版本对应</h5><p><img src="/posts/f0919c40/%E7%89%88%E6%9C%AC.jpg"><br>注：此处使用2020版本以下的版本进行学习，因为2020版本及以上版本的springCloud中把Ribbon相关的集成的东西全部去掉了，但是我们这里要学习的就是Eureka、Ribbon，所以建议使用2020版本以下的版本进行学习</p><h5 id="springCloud其他组件自学网站"><a href="#springCloud其他组件自学网站" class="headerlink" title="springCloud其他组件自学网站"></a>springCloud其他组件自学网站</h5><ul><li>官网：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></li><li>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></li><li>SpringCloud 中文API文档(官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></li><li>SpringCloud中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></li><li>W3CSchool的springCloud教程：<a href="https://www.w3cschool.cn/spring_cloud/spring_cloud-2hgl2ixf.html">https://www.w3cschool.cn/spring_cloud/spring_cloud-2hgl2ixf.html</a></li></ul><p>本文是观看狂神说B站视频后整理的笔记——侵删<br>视频地址：<a href="https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver">https://www.bilibili.com/video/BV1jJ411S7xr?spm_id_from=pageDriver</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h4&gt;&lt;p&gt;本文简单介绍了什么是微服务以及微服务架构的一套解决方案springcloud&lt;/p&gt;</summary>
    
    
    
    <category term="springCloud" scheme="https://yanxiaoblog.github.io/categories/springCloud/"/>
    
    
    <category term="spring" scheme="https://yanxiaoblog.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>springBoot集成dubbo和zookeeper</title>
    <link href="https://yanxiaoblog.github.io/posts/d7e6747c/"/>
    <id>https://yanxiaoblog.github.io/posts/d7e6747c/</id>
    <published>2021-11-15T10:18:30.000Z</published>
    <updated>2021-12-04T03:43:50.199Z</updated>
    
    <content type="html"><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文简单介绍了分布式系统，并对dubbo进行了简介，并且介绍了springBoot集成dubbo和zookeeper的流程，并对其进行了简单的测试</p><span id="more"></span><h4 id="什么是分布式系统"><a href="#什么是分布式系统" class="headerlink" title="什么是分布式系统"></a>什么是分布式系统</h4><p>在《分布式系统原理与范型》书中将分布式系统定义为：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；<br>也就是说：分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用更多的机器，处理更多的数据。————狂神说</p><h4 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h4><p>参考文章：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a>  </p><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><p>参考文章：<a href="https://www.jianshu.com/p/2accc2840a1b">https://www.jianshu.com/p/2accc2840a1b</a>  </p><h4 id="dubbo的简介"><a href="#dubbo的简介" class="headerlink" title="dubbo的简介"></a>dubbo的简介</h4><p>Apache Dubbo 是一款高性能、轻量级的开源Java RPC框架，它提供了六大核心能力：面向接口代理的高性能RPC调用，智能容错和负载均衡，服务自动注册和发现，高度可扩展能力，运行期流量调度，可视化的服务治理与运维。<br>dubbo官网：<a href="https://dubbo.apache.org/zh/">https://dubbo.apache.org/zh/</a>  </p><ul><li>基本概念<br><img src="/posts/d7e6747c/dubbo.jpg">  </li><li>服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。  </li><li>服务消费者（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。  </li><li>注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li><li>监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心  </li><li><em>调用关系说明</em>*</li><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。<br>(注：以上解释为狂神说所作)</li></ul><h4 id="dubbo环境的搭建"><a href="#dubbo环境的搭建" class="headerlink" title="dubbo环境的搭建"></a>dubbo环境的搭建</h4><p>点进dubbo官方文档，推荐使用Zookeeper 注册中心<br>zookeeper介绍：<br>官方文档：<a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a>  </p><h5 id="win系统下zookeeper的下载与安装"><a href="#win系统下zookeeper的下载与安装" class="headerlink" title="win系统下zookeeper的下载与安装"></a>win系统下zookeeper的下载与安装</h5><p>版本：zookeeper-3.4.14<br>官网地址：<a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a>  </p><ol><li>官网下载zookeeper，并进行解压</li><li>修改配置文件<ol><li>将zookeeper-3.4.14\conf目录下的zoo_sample.cfg复制一份，并改名为zoo.cfg</li><li>点击进入zoo.cfg文件，修改配置文件<br><img src="/posts/d7e6747c/zooconfig.jpg">  </li></ol></li><li>进入zookeeper-3.4.14\bin目录下，双击zkServer.cmd启动zookeeper服务端<br><img src="/posts/d7e6747c/zoo%E5%90%AF%E5%8A%A8.jpg"></li></ol><h5 id="win系统下dubbo的下载与安装"><a href="#win系统下dubbo的下载与安装" class="headerlink" title="win系统下dubbo的下载与安装"></a>win系统下dubbo的下载与安装</h5><p>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。<br>版本：带admin版本的dubbo-admin-master，即目录为中有admin的版本，新版没有带admin的<br><img src="/posts/d7e6747c/dubbo%E7%9B%AE%E5%BD%95.jpg"><br>下载地址：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a>  </p><ol><li>进入dubbo-admin\src\main\resources目录下修改application.properties配置文件中zookeeper的地址<br><img src="/posts/d7e6747c/dubboconfig.jpg">   </li><li>在项目目录即dubbo-admin目录下进入cmd窗口进行打包<br>打包命令：<code>mvn clean package -Dmaven.test.skip=true</code><br>第一次打包有点慢，如果打包失败，找到错误原因，重新打包</li><li>打包成功后到dubbo-admin\target目录下，进入cmd窗口运行dubbo-admin-0.0.1-SNAPSHOT.jar<br>运行命令：<code>java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</code><br><img src="/posts/d7e6747c/dubbo%E8%BF%90%E8%A1%8C.jpg"><br>【注：运行jar包时zookeeper服务端要打开】</li><li>jar包运行成功后，我们去访问一下 <a href="http://localhost:7001/">http://localhost:7001/</a> ， 这时候我们需要输入登录账户和密码，默认的账户和密码都为root<br><img src="/posts/d7e6747c/dubbo%E8%AE%BF%E9%97%AE.jpg"> </li></ol><p><strong>dubbo环境搭建成功！</strong>  </p><h4 id="测试框架搭建"><a href="#测试框架搭建" class="headerlink" title="测试框架搭建"></a>测试框架搭建</h4><ol><li>启动zookeeper  </li><li>在IDEA中创建一个空项目；</li><li>创建一个springBoot模块，实现服务提供者：provider-server ，选择web依赖即可</li><li>模块创建完毕，写一个服务，比如卖票的服务；</li></ol><ul><li>编写接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写接口实现类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//将对象放到spring容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《java编程思想》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>5、再创建一个springBoot模块，实现服务消费者：consumer-server ， 选择web依赖即可<br>6、项目创建完毕，再写一个服务，比如用户的服务；</li><li>编写用户服务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需求：用户想使用买票的服务，怎么获取到这个服务呢？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>测试环境搭建成功！</li></ul><h4 id="服务提供者提供服务"><a href="#服务提供者提供服务" class="headerlink" title="服务提供者提供服务"></a>服务提供者提供服务</h4><ol><li>在服务者模块导入相应的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入dubbo依赖jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--导入zookeeper客户端的jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--zookeeper的日志可能会和springboot的日志产生冲突--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入zookeeper及其依赖jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--排除这个排除springBoot的日志slf4j-log4j12依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在springboot配置文件中配置dubbo相关属性<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="comment"># 配置服务应用的名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider-service</span></span><br><span class="line"><span class="comment"># 配置注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment"># 哪些应用要被注册，即配置扫描指定包下的接口</span></span><br><span class="line"><span class="meta">dubbo.scan.base-packages</span>=<span class="string">com.tsmile.service</span></span><br></pre></td></tr></table></figure></li><li>在服务者中的service的实现类中配置服务注解，发布服务，注意不要导错包！<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>  <span class="comment">//将服务发布到指定的注册中心去</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//将对象放到spring容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《java编程思想》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当这个服务的springBoot项目启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中！</li></ol><h4 id="消费者进行消费"><a href="#消费者进行消费" class="headerlink" title="消费者进行消费"></a>消费者进行消费</h4><ol><li>导入相关依赖(和服务者导入的依赖一样)</li><li>配置消费者参数<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8002</span></span><br><span class="line"><span class="comment">#配置当前应用名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">consumer-server</span></span><br><span class="line"><span class="comment">#配置注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure></li><li>原本正常步骤是需要将服务提供者的接口进行打包，然后用pom文件导入这个jar包，我们这里为了测试简便，使用简单的方式，直接将服务的接口复制过来，复制的接口所在的路径必须保证和服务接口的路径一致，即和服务提供者接口的路径相同；  </li><li>编写消费者消费代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需求：用户想使用买票的服务，怎么获取到这个服务呢？</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span> <span class="comment">//远程引用指定的服务，他会按照全类名进行匹配，看谁给注册中心注册了这个全类名</span></span><br><span class="line">    TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bugTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String ticket = ticketService.getTicket();</span><br><span class="line">        System.out.println(<span class="string">&quot;在注册中心买到&quot;</span>+ticket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><ol><li>启动zookeeper服务  </li><li>启动dubbo监控中心，即到dubbo-admin\target目录下，进入cmd窗口运行dubbo-admin-0.0.1-SNAPSHOT.jar  </li><li>在idea中开启服务者，即启动服务者的springBoot项目</li><li>在idea中开启消费者，即启动消费者的springBoot项目<br>运行结果： 在 <a href="http://localhost:7001/%E4%B8%AD%E6%9F%A5%E7%9C%8B">http://localhost:7001/中查看</a><br><img src="/posts/d7e6747c/%E6%8F%90%E4%BE%9B%E8%80%85.jpg"> </li><li>在测试类中进行消费者测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerServerApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.bugTicket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果：拿到了服务端的东西了<br><img src="/posts/d7e6747c/test.jpg"> </li></ol>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h5&gt;&lt;p&gt;本文简单介绍了分布式系统，并对dubbo进行了简介，并且介绍了springBoot集成dubbo和zookeeper的流程，并对其进行了简单的测试&lt;/p&gt;</summary>
    
    
    
    <category term="springBoot" scheme="https://yanxiaoblog.github.io/categories/springBoot/"/>
    
    
    <category term="spring" scheme="https://yanxiaoblog.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>异步-邮件-定时任务</title>
    <link href="https://yanxiaoblog.github.io/posts/d0efce07/"/>
    <id>https://yanxiaoblog.github.io/posts/d0efce07/</id>
    <published>2021-11-15T08:09:48.000Z</published>
    <updated>2021-12-04T03:50:34.752Z</updated>
    
    <content type="html"><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文简单介绍了异步任务和注解异步任务开启的流程，介绍了定时任务的开启和cron表达式，并且实现了邮件的发送</p><span id="more"></span><h4 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h4><ul><li>什么是异步任务？<br>异步任务其实跟ajax的异步请求类似，异步任务就是开启多线程处理任务，主线程中的程序运行不受影响，另一个线程处理任务，这样就不会因为要处理任务而产生延迟了。异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</li></ul><ol><li>创建一个springBoot项目</li><li>同步任务的模仿(即不开启异步任务)</li></ol><ul><li>编写一个HelloService1来进行任务的处理<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据正在处理中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//此线程睡眠5秒来模仿正在处理任务</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写HelloController类，里面编写hello1接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    HelloService1 helloService1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        helloService1.asyncHello();</span><br><span class="line">        <span class="comment">//如果不开启异步任务，那么要等5秒后才能返回字符串ok</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello1-OK&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>启动服务进行访问hello1进行测试，要等待5秒胡才能收到hello1-OK<br>这种方式对用户的体验及其不好，延迟非常严重</li></ul><p>3、手动开启线程进行异步任务的处理</p><ul><li>编写一个HelloService2线程来进行任务的处理<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        asyncHello();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据正在处理中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在HelloController类里面编写hello2接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HelloService2 helloService2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//手动创建一个线程去执行这个方法，这样可以不用等待调用的方法执行完才返回hello2-OK</span></span><br><span class="line">    Thread helloService1 = <span class="keyword">new</span> Thread(helloService2);</span><br><span class="line">    helloService1.start();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello2-OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务进行访问hello2进行测试，发现立刻就能接收到hello2-OK。<br>我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们有没有一个简单的办法呢？有，就是在我们的方法上加一个简单的注解即可。</li></ul><p>4、注解开启异步任务处理</p><ul><li>编写一个HelloService类来进行任务的处理，并使用注解标注这是一个异步任务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span> <span class="comment">//标记此类为异步任务类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据正在处理中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据处理完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解<span class="meta">@EnableAsync</span> ，开启异步注解功能；  </span><br><span class="line">* 在主启动类上开启异步任务功能</span><br><span class="line">```java</span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在HelloController类里面编写hello接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HelloService helloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        helloService.asyncHello();</span><br><span class="line">        <span class="comment">//如果不开启异步任务，那么要等5秒后才能返回字符串ok</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello-OK&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>启动服务进行访问hello进行测试，发现立刻就能接收到hello-OK。</li></ul><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口和两个注解，分别为：<br>TaskExecutor接口<br>TaskScheduler接口<br>@EnableScheduling 注解<br>@Scheduled 注解  </p><ul><li>定时任务的两个核心接口：<br>TaskScheduler：任务调度者，对应着注解@EnableScheduling：开启定时任务<br>TaskExecutor：任务执行者，对应着注解@Scheduled(cron表达式)：定时执行任务*</li></ul><ol><li>cron表达式<br>是用于定义时间规则的一种表达方式<br><img src="/posts/d0efce07/cron.jpg"><br>常用特殊字符的含义：<br>●星号(<em>)：可用在所有字段中，表示对应时间域的每一个时刻，例如，</em>在分钟字段时，表示“每分钟”；<br>●问号（?）：该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于点位符；<br>●减号(-)：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12；<br>●逗号(,)：表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五；<br>●斜杠(/)：x/y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒，而5/15在分钟字段中表示5,20,35,50，你也可以使用*/y，它等同于0/y；<br>详细请见 锐洋智能 地址：<a href="https://www.cnblogs.com/interdrp/p/5003257.html">https://www.cnblogs.com/interdrp/p/5003257.html</a>  </li><li>定时任务测试</li></ol><ul><li>编写一个ScheduleService类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&quot;0/2 * * * * ?&quot; : 每两秒执行一次</span></span><br><span class="line">    <span class="comment">//cron表达式相关内容了解：https://www.cnblogs.com/interdrp/p/5003257.html</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello执行了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在主启动类上添加开启定时功能注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启定时功能</span></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务进行测试</li></ul><h4 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h4><p>邮件发送，在我们的日常开发中用得也非常的多，Springboot也帮我们做了支持</p><ol><li>导入相关依赖<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--邮件依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>我们看一下springBoot的邮件自动发送类MailSenderAutoConfiguration<br><img src="/posts/d0efce07/mail01.jpg"><br>发现这个类中没有注册bean，我们点到这个类中导入的类<br><img src="/posts/d0efce07/mail02.jpg"><br>发现这个类中注册了一个mailSender邮件发送类，可以知道我们是通过这个bean进行邮件发送的，这个bean中创建了一个mailSenderImpl实现类，我们点进去看一下<br><img src="/posts/d0efce07/mail03.jpg"><br>发现这里全是我们可以配置的属性，好了，我们知道要怎么做了</li><li>在application.properties中进行配置<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">此处填写qq邮箱账号</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">此处填写qq授权码</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment"># 开启加密认证</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.stp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li>获取qq授权码<br>打开QQ邮箱，点击设置<br><img src="/posts/d0efce07/qq01.jpg"><br>进入设置后，点击账户<br><img src="/posts/d0efce07/qq02.jpg"><br>在账户页面，开启POP3服务<br><img src="/posts/d0efce07/qq03.jpg"><br>跟着开启的步骤进行开启，最后会有一个qq授权码给你  </li><li>简单邮件发送测试(在测试类中进行)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要配置了相关的mail配置才能进行自动注入</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//发送一个简单的邮件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个简单邮件信息对象</span></span><br><span class="line">    SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">    <span class="comment">//设置邮件的标题</span></span><br><span class="line">    message.setSubject(<span class="string">&quot;言笑，你好呀~&quot;</span>);</span><br><span class="line">    <span class="comment">//设置邮件的内容</span></span><br><span class="line">    message.setText(<span class="string">&quot;谢谢言笑的努力学习，加油哦~&quot;</span>);</span><br><span class="line">    <span class="comment">//发送者的邮箱，即邮件的来源</span></span><br><span class="line">    message.setFrom(<span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//接受者的邮箱，即邮件的去处</span></span><br><span class="line">    message.setTo(<span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将信息发出去</span></span><br><span class="line">    mailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>复杂邮件发送测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    <span class="comment">//发送一个复杂的邮件，可以将发送邮件封装成一个util类，这样就更加方便了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个复杂邮件</span></span><br><span class="line">    MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">    <span class="comment">//将复杂邮件给到一个helper助手对邮件进行组装，true为是否开启多附件模式</span></span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage,<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//通过助手设置邮件标题</span></span><br><span class="line">    helper.setSubject(<span class="string">&quot;言笑，你好呀~&quot;</span>);</span><br><span class="line">    <span class="comment">//通过助手设置邮件内容,并开启是否为html文本</span></span><br><span class="line">    helper.setText(<span class="string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;谢谢言笑的努力学习，加油哦~&lt;/p&gt;&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//为邮件添加附件,参数一：附件名称，参数二：附件地址路径</span></span><br><span class="line">    helper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;F:\\桌面1\\图片\\beauty1.jpg&quot;</span>));</span><br><span class="line">    helper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;F:\\桌面1\\图片\\ttt.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">//发送者的邮箱，即邮件的来源</span></span><br><span class="line">    helper.setFrom(<span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//接受者的邮箱，即邮件的去处</span></span><br><span class="line">    helper.setTo(<span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//邮件发送</span></span><br><span class="line">    mailSender.send(mimeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打开邮箱查看，已发送成功！！</li></ol>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h5&gt;&lt;p&gt;本文简单介绍了异步任务和注解异步任务开启的流程，介绍了定时任务的开启和cron表达式，并且实现了邮件的发送&lt;/p&gt;</summary>
    
    
    
    <category term="springBoot" scheme="https://yanxiaoblog.github.io/categories/springBoot/"/>
    
    
    <category term="spring" scheme="https://yanxiaoblog.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>swagger</title>
    <link href="https://yanxiaoblog.github.io/posts/bf71eba1/"/>
    <id>https://yanxiaoblog.github.io/posts/bf71eba1/</id>
    <published>2021-11-14T16:51:18.000Z</published>
    <updated>2021-12-04T03:53:41.187Z</updated>
    
    <content type="html"><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文简单介绍了swagger，和springBoot继承swagger的流程，在集成的过程中分别从配置swagger文档信息，配置扫描接口，swagger的开关和分组，实体类配置和swagger在线测试接口进行了介绍</p><span id="more"></span><h4 id="swagger简介"><a href="#swagger简介" class="headerlink" title="swagger简介"></a>swagger简介</h4><ul><li>什么是swagger<br>swagger是一个实时在线生成api文档的工具。<br>swagger官网：<a href="https://swagger.io/">https://swagger.io/</a></li><li>swagger有什么用<br>1、适合多人合作开发，并解决了前后端分离后交流延时的难题<br>2、可以通过swagger给一些难以理解的接口，属性等添加一些注释信息<br>3、接口文档实时更新<br>4、可以在线测试<br>5、支持多种语言 （如：Java，PHP等）<br>注意： 在项目的生产环境中记得要关闭swagger，因为不能让用户知道我们程序的接口等信息，为了项目的安全，并且为了减小项目的运行的内存，也要关掉swagger，因为开启swagger要加载很多东西的   </li><li>为什么要使用swagger<br>1、背景：现在是前后端分离的时代，前端：前端控制层、视图层；后端：后端控制层、服务层、数据访问层；前后端变得相对独立，并且松耦合，前后端通过api文档来进行交互。<br>2、产生的问题：当前后端进行集成时，前端或者后端无法做到通过实时更新api文档进行“及时协商，尽早解决”，最终导致问题集中爆发<br>3、解决：首先要定义计划的提纲，并实时跟踪最新的API，降低集成风险<br>swagger正是为了解决这个问题而生的，它能实时更新api文档，并且可以对接口进行在线测试，这样就能够解决前后端交流不及时的问题，降低了继承的风险</li></ul><h4 id="springBoot集成swagger的环境配置"><a href="#springBoot集成swagger的环境配置" class="headerlink" title="springBoot集成swagger的环境配置"></a>springBoot集成swagger的环境配置</h4><p>注：运行环境：jdk8 + swagger 2</p><ol><li>新建一个springBoot项目</li><li>导入相依的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--swagger的jar包,注：swagger 3.0.0版本进入不了swagger-ui.html页面--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger-ui依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger 2 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger注解依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写一个HelloController，确保springBoot项目能运行起来<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写SwaggerConfig配置类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启swagger</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务，测试访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> swagger-ui界面</li></ol><h4 id="在SwaggerConfig配置类中进行swagger的配置"><a href="#在SwaggerConfig配置类中进行swagger的配置" class="headerlink" title="在SwaggerConfig配置类中进行swagger的配置"></a>在SwaggerConfig配置类中进行swagger的配置</h4><ol><li>通过apiInfo()属性配置文档信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//作者信息</span></span><br><span class="line">       Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;言笑&quot;</span>,</span><br><span class="line">               <span class="string">&quot;https://1815972815.github.io/&quot;</span>, <span class="string">&quot;1815972815@qq.com&quot;</span>);</span><br><span class="line">       <span class="comment">//通过查看apiInfo的默认构造器参数，根据它的默认构造器参数修改成自己的参数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(<span class="string">&quot;言笑的Api文档&quot;</span>,</span><br><span class="line">               <span class="string">&quot;对于可控的事情要谨慎，对于不可控的事情要乐观，&lt;br/&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;人只能做自己能力范围内的事情，我们要接受这个事实&quot;</span>,</span><br><span class="line">               <span class="string">&quot;v1.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;https://1815972815.github.io/&quot;</span>,</span><br><span class="line">               contact,</span><br><span class="line">               <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">               <span class="keyword">new</span> ArrayList&lt;VendorExtension&gt;());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>Swagger实例就是是Docket，所以要通过配置Docket实例来配置Swaggger。<br>在Docket通过apiInfo()方法关联配置文档信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置swagger中的Docket的bean对象，通过这个对象将swagger的基本信息传递到swagger-ui页面中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置要开启swagger的环境</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        <span class="comment">//判断设置的环境是否被激活</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>启动服务，测试访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> 页面查看ui文档的信息改变</li></ol><h4 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h4><p>构建Docket时通过select()方法配置怎么扫描接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            <span class="comment">//配置扫描接口的方式</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.basePackage 扫描对应的包下的接口（常用）</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.any 扫描所有包下的接口</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.none 全部都不扫描</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.withClassAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">            <span class="comment">//RequestHandlerSelectors.withMethodAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">            <span class="comment">//通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">            .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.tsmile.controller&quot;</span>))</span><br><span class="line">            <span class="comment">//指定扫描某个路径下的所有接口</span></span><br><span class="line">            <span class="comment">//.paths(PathSelectors.ant(&quot;/tsmile/**&quot;))</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置swagger的开关"><a href="#配置swagger的开关" class="headerlink" title="配置swagger的开关"></a>配置swagger的开关</h4><ol><li>通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">       <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">               <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">               .apiInfo(apiInfo())</span><br><span class="line">               <span class="comment">//设置是否启用swagger，这个方法可以设置在不同环境下是否启用swagger</span></span><br><span class="line">               .enable(<span class="keyword">false</span>)</span><br><span class="line">               <span class="comment">//配置扫描接口的方式</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.basePackage 扫描对应的包下的接口（常用）</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.any 扫描所有包下的接口</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.none 全部都不扫描</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withClassAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withMethodAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">               .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.tsmile.controller&quot;</span>))</span><br><span class="line">               <span class="comment">//指定扫描某个路径下的所有接口</span></span><br><span class="line">               <span class="comment">//.paths(PathSelectors.ant(&quot;/tsmile/**&quot;))</span></span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>如何动态配置swagger在项目处于不同的环境时的开关，如处于dev和test环境时swagger开启，处于pro环境时swagger关闭<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">       <span class="comment">//设置要开启swagger的环境</span></span><br><span class="line">       Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="comment">//判断设置的环境是否被激活，如果激活了，返回true，否则返回false</span></span><br><span class="line">       <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">       <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">               <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">               .apiInfo(apiInfo())</span><br><span class="line">               <span class="comment">//设置是否启用swagger，这个方法可以设置在不同环境下是否启用swagger</span></span><br><span class="line">               .enable(flag)</span><br><span class="line">               <span class="comment">//配置扫描接口的方式</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.basePackage 扫描对应的包下的接口（常用）</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.any 扫描所有包下的接口</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.none 全部都不扫描</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withClassAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withMethodAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">               .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.tsmile.controller&quot;</span>))</span><br><span class="line">               <span class="comment">//指定扫描某个路径下的所有接口</span></span><br><span class="line">               <span class="comment">//.paths(PathSelectors.ant(&quot;/tsmile/**&quot;))</span></span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>在resources目录下创建多两个环境，一个application-dev.yaml环境和一个application-pro.yaml环境<br>application-dev.yaml环境<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="string">```</span>  </span><br><span class="line"><span class="string">application-pro.yaml环境</span>  </span><br><span class="line"><span class="string">```yaml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure>在默认环境中激活dev环境<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">&quot;dev&quot;</span></span><br></pre></td></tr></table></figure></li><li>启动服务，查看swagger有没有被开启</li></ol><h4 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h4><ol><li>如果没有配置分组，默认是default。通过groupName()方法即可配置分组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">       <span class="comment">//设置要开启swagger的环境</span></span><br><span class="line">       Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">       <span class="comment">//判断设置的环境是否被激活</span></span><br><span class="line">       <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">       <span class="comment">//需要一个DocumentationType类型的参数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">               <span class="comment">//apiInfo基本信息的配置,通过这个方法来对ApiInfo进行关联</span></span><br><span class="line">               .apiInfo(apiInfo())</span><br><span class="line">               <span class="comment">//设置组名，即如果多人合作开发的话，需要用到组名来分辨那个人开发了什么</span></span><br><span class="line">               .groupName(<span class="string">&quot;tSmile&quot;</span>)</span><br><span class="line">               <span class="comment">//设置是否启用swagger，这个方法可以设置在不同环境下是否启用swagger</span></span><br><span class="line">               .enable(flag)</span><br><span class="line">               <span class="comment">//配置扫描接口的方式</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.basePackage 扫描对应的包下的接口（常用）</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.any 扫描所有包下的接口</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.none 全部都不扫描</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withClassAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//RequestHandlerSelectors.withMethodAnnotation 扫描类上指定的注解反射类，如RequestMapping.class</span></span><br><span class="line">               <span class="comment">//通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">               .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.tsmile.controller&quot;</span>))</span><br><span class="line">               <span class="comment">//指定扫描某个路径下的所有接口</span></span><br><span class="line">               <span class="comment">//.paths(PathSelectors.ant(&quot;/tsmile/**&quot;))</span></span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>如何配置多个分组？如果想要配置多个分组只需要配置多个docket即可<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果多个人开发，那么就会有多个docket，每个docket都只扫描自己开发的那个包，</span></span><br><span class="line"><span class="comment">// 然后通过分组来查看每个人负责写的接口</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务，测试访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a><br><img src="/posts/bf71eba1/%E5%88%86%E7%BB%84.jpg"></li></ol><h4 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h4><ol><li>注解的解释<br>@ApiModel 为类添加注释<br>@ApiModelProperty 为类属性添加注释<br>@ApiOperation 为控制类controller添加注释(即为请求的接口注释)<br>这些swagger的api注解都是为了给类，方法，属性或者参数加注释，增强可读性，并没有其他的作用</li><li>创建实体类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter和setter方法和toString方法自己补充</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写controller <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;hello控制类&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;user控制类&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//只有当返回值中有这个类，那么这个类才会被放到swagger的module中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;username控制类&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/username&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user1</span><span class="params">(<span class="meta">@ApiParam(&quot;用户名&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;getUser控制类&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@ApiParam(&quot;用户&quot;)</span> User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务，测试访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a><br><img src="/posts/bf71eba1/controller.jpg"><br>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。 </li></ol><h4 id="在swagger-ui界面上测试接口"><a href="#在swagger-ui界面上测试接口" class="headerlink" title="在swagger-ui界面上测试接口"></a>在swagger-ui界面上测试接口</h4><p>swagger的另一个强大之处就是能够在线实时测试接口，以下以测试一个接口为例，如图为测试流程：<br><img src="/posts/bf71eba1/%E6%B5%8B%E8%AF%9501.jpg"><br><img src="/posts/bf71eba1/%E6%B5%8B%E8%AF%9502.jpg"><br><img src="/posts/bf71eba1/%E6%B5%8B%E8%AF%9503.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h5&gt;&lt;p&gt;本文简单介绍了swagger，和springBoot继承swagger的流程，在集成的过程中分别从配置swagger文档信息，配置扫描接口，swagger的开关和分组，实体类配置和swagger在线测试接口进行了介绍&lt;/p&gt;</summary>
    
    
    
    <category term="springBoot" scheme="https://yanxiaoblog.github.io/categories/springBoot/"/>
    
    
    <category term="spring" scheme="https://yanxiaoblog.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>shiro</title>
    <link href="https://yanxiaoblog.github.io/posts/1c025fc/"/>
    <id>https://yanxiaoblog.github.io/posts/1c025fc/</id>
    <published>2021-11-14T11:15:35.000Z</published>
    <updated>2021-12-04T03:53:26.856Z</updated>
    
    <content type="html"><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文描述了什么是shiro，以及shiro通过shiro的快速开始来初步了解shiro，然后shiro和springBoot的整合的环境，通过登录拦截，用户认证，请求授权，整合thymeleaf和用户注销来对shiro进行进一步的了解</p><span id="more"></span><h4 id="什么是shiro"><a href="#什么是shiro" class="headerlink" title="什么是shiro"></a>什么是shiro</h4><ol><li>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</li><li>主要功能</li></ol><ul><li>三个核心组件：Subject, SecurityManager 和 Realms.</li><li>Subject：即“当前操作用户”。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。</li><li>SecurityManager：它是Shiro框架的核心，典型的Facade模式，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。</li><li>Realm： Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。</li><li>Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。如果系统默认的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。<br>3、 shiro官网：<a href="https://shiro.apache.org/">https://shiro.apache.org/</a></li></ul><h4 id="shiro快速开始（参考官网）"><a href="#shiro快速开始（参考官网）" class="headerlink" title="shiro快速开始（参考官网）"></a>shiro快速开始（参考官网）</h4><ol><li>创建一个普通maven项目</li><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- configure logging --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在resources目录下创建一个shiro.ini文件，并配置ini文件<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span></span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27; (&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="comment"># my luggage!!!&quot; ;)), and role &#x27;president&#x27;</span></span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="comment"># user &#x27;darkhelmet&#x27; with password &#x27;ludicrousspeed&#x27; and roles &#x27;darklord&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="comment"># user &#x27;lonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Each line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard &#x27;*&#x27;</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span></span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="comment"># The &#x27;goodguy&#x27; role is allowed to &#x27;drive&#x27; (action) the winnebago (type) with</span></span><br><span class="line"><span class="comment"># license plate &#x27;eagle5&#x27; (instance specific id)</span></span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure></li><li>在resources目录下创建log4j.properties文件，并进行配置<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m %n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># General Apache libraries</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Default Shiro logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro</span>=<span class="string">INFO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Disable verbose logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.util.ThreadContext</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure></li><li>创建Quickstart类，快速开始shiro<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quickstart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The easiest way to create a Shiro SecurityManager with configured</span></span><br><span class="line">        <span class="comment">// realms, users, roles and permissions is to use the simple INI config.</span></span><br><span class="line">        <span class="comment">// We&#x27;ll do that by using a factory that can ingest a .ini file and</span></span><br><span class="line">        <span class="comment">// return a SecurityManager instance:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the shiro.ini file at the root of the classpath</span></span><br><span class="line">        <span class="comment">// (file: and url: prefixes load from files and urls respectively):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原来的方法</span></span><br><span class="line">        <span class="comment">/*Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory(&quot;classpath:shiro.ini&quot;);</span></span><br><span class="line"><span class="comment">        SecurityManager securityManager = factory.getInstance();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//新方法   shiro更新问题</span></span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        IniRealm iniRealm = <span class="keyword">new</span> IniRealm(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        securityManager.setRealm(iniRealm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for this simple example quickstart, make the SecurityManager</span></span><br><span class="line">        <span class="comment">// accessible as a JVM singleton.  Most applications wouldn&#x27;t do this</span></span><br><span class="line">        <span class="comment">// and instead rely on their container configuration or web.xml for</span></span><br><span class="line">        <span class="comment">// webapps.  That is outside the scope of this simple quickstart, so</span></span><br><span class="line">        <span class="comment">// we&#x27;ll just do the bare minimum so you can continue to get a feel</span></span><br><span class="line">        <span class="comment">// for things.</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        <span class="comment">//获取当前用户</span></span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        <span class="comment">//通过当前用户获取shiro的session</span></span><br><span class="line">        Session session = currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        String value = (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="comment">//判断当前用户是否被认证</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">//如果被认证，通过用户的账号和密码生成一个token令牌</span></span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="keyword">true</span>);<span class="comment">//执行登录操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        <span class="comment">//currentUser.getPrincipal()获取当前用户的认证信息</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a role:</span></span><br><span class="line">        <span class="comment">//测试这个用户是否有这个角色</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="comment">//粗粒度判断用户权限</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="comment">//细粒度判断用户权限</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!</span></span><br><span class="line">        <span class="comment">//注销</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束系统</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="shiro整合springBoot的环境搭建"><a href="#shiro整合springBoot的环境搭建" class="headerlink" title="shiro整合springBoot的环境搭建"></a>shiro整合springBoot的环境搭建</h4><ol><li>导入相关依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--shiro依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j日志依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid数据库连接池依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis整合springBoot依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--shiro-thymeleaf整合依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写user实体类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写对应的mapper接口UserMapper<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在resources/mybatis/mapper下编写对应的mapper映射文件UserMapper.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tsmile.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from `user` where `name`=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写service层<br>UserService接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>UserServiceImpl实现类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        User user = userMapper.queryUserByName(name);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello_shiro&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;add&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;update&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>配置yanl配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#给pojo包下的实体类起别名，让mapper接口和对应的mapper映射文件尽力连接</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.tSmile.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure></li><li>编写html页面<br>index页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果session中没有登录的用户名，那么就显示登录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果用户有user:add权限，那么就显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果session中有登录的用户名，那么就显示注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser != null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>login页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;exception&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:action=&quot;@&#123;/index&#125;&quot;中的action属性的值不能只写“”双引号，如果只写双引号，那么就会包500错误--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>密 码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>add页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>update页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>update<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>update<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建ShiroConfig类，并配置shiroConfig<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*shiroConfig中有三大对象，分别是</span></span><br><span class="line"><span class="comment">    * shiroFilterFactoryBean shiro过滤器工厂对象</span></span><br><span class="line"><span class="comment">    * defaultWebSecurityManager 默认web安全管理对象</span></span><br><span class="line"><span class="comment">    * realm 认证授权对象</span></span><br><span class="line"><span class="comment">    * 这三大对象从下往上配，其中realm对象要自定义*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//shiroFilterFactoryBean shiro过滤器工厂对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//defaultWebSecurityManager 创建默认的web安全管理对象，并关联Realm对象</span></span><br><span class="line">    <span class="comment">//通过@Qualifier(&quot;getUserRealm&quot;)注解将DefaultWebSecurityManager和getUserRealm绑定起来</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;getUserRealm&quot;)</span> UserRealm userRealm)</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//关联realm对象</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//realm 创建认证授权对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">getUserRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>自定义realm对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了==&gt; 授权方法doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了==&gt; 认证方法doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试mapper和service <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShiroSpringbootApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userService.queryUserByName(<span class="string">&quot;段誉&quot;</span>);</span><br><span class="line"><span class="comment">//        User user = userMapper.queryUserByName(&quot;段誉&quot;);</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务，测试Controller</li></ol><p><strong>终于配置好环境了，好长的环境准备啊，不过很多都是学习过的内容，就当是复习啦！</strong></p><h4 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截"></a>登录拦截</h4><ol><li>在ShiroFilterFactoryBean过滤工厂添加拦截<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加shiro的内置过滤器，对访问的某个路径进行拦截</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * anon: 无需认证就可以访问</span></span><br><span class="line"><span class="comment">        * authc: 必须认证才可以访问</span></span><br><span class="line"><span class="comment">        * user: 必须要有记住我功能才能访问</span></span><br><span class="line"><span class="comment">        * perms: 必须拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">        * role: 必须拥有某个角色才能访问</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//对user路径下的所有资源进行过滤，必须要认证才可以访问</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        <span class="comment">//设置登录的请求，若未登录，则跳转到此路径</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br></pre></td></tr></table></figure></li><li>启动服务，测试add和update是否被拦截了</li></ol><h4 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h4><ol><li>在Controller中修改login请求，并在登录的loginController中接收用户传过来的用户名和密码，并将用户名和密码封装成一个token令牌，然后通过当前用户执行登录方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//封装用户登录数据,形成一个令牌</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">        <span class="comment">//创建当前对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过当前用户执行登录方法</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">            <span class="comment">//捕获用户名不存在异常</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;exception&quot;</span>, <span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">            <span class="comment">//捕获密码错误异常</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;exception&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>在realm对象中进行用户认证<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此自动注入放在授权方法的上面</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"><span class="comment">//认证</span></span><br><span class="line"><span class="comment">//执行登录请求会跳转到认证方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了==&gt; 认证方法doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">    <span class="comment">//登录的时候会将controller中的令牌token传过来</span></span><br><span class="line">    <span class="comment">//将AuthenticationToken类型的令牌转换成在controller中令牌的类型UsernamePasswordToken</span></span><br><span class="line">    UsernamePasswordToken userToken = (UsernamePasswordToken)token;</span><br><span class="line">    <span class="comment">//通过username获取数据库的user</span></span><br><span class="line">    User user = userService.queryUserByName(userToken.getUsername());</span><br><span class="line">    <span class="comment">//对比用户输入的用户名和密码数据是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果用户不存在，返回null，就会抛出用户名不存在的异常</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//密码认证是shiro来进行认证的，？？？为什么将密码传进去就可以了？不用用户传进来的数据就能进行比较？？？</span></span><br><span class="line">    <span class="comment">//还是这个方法会获取封装用户数据成token时或者登录时的密码？？？</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数一：当前用户的信息,将用户传进来，就可以通过当前用户获取该用户的信息了</span></span><br><span class="line"><span class="comment">    参数二：密码对象</span></span><br><span class="line"><span class="comment">    参数三：参数认证名</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务，测试用户认证是否成功</li></ol><h4 id="请求授权"><a href="#请求授权" class="headerlink" title="请求授权"></a>请求授权</h4><ol><li>拦截：拦截那些没有对应权限的用户。在shiroFilterFactoryBean过滤工厂中，使用授权代替认证，设置用户需要某个权限才能访问某个页面<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//对user路径下的所有资源进行过滤，必须要认证才可以访问</span></span><br><span class="line">        <span class="comment">//filterMap.put(&quot;/user/add&quot;, &quot;authc&quot;);</span></span><br><span class="line">        <span class="comment">//filterMap.put(&quot;/user/update&quot;, &quot;authc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置用户拥有某些权限才能访问这个路径,</span></span><br><span class="line">        <span class="comment">// 如perms[user:add]说明必须要有user:add权限才能访问</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录的请求，若未登录，则跳转到此路径</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//设置授权的请求,若未授权，则跳转到此路径</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/unauthorized&quot;</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br></pre></td></tr></table></figure></li><li>编写未授权跳转的Controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/unauthorized&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">unauthorized</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;您未被授权进入此页面!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>给数据库中的表格添加perms权限字段，并未每个用户添加相应的权限</li><li>授权：对用户授予对应的权限。在realm对象中进行权限的授予<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了==&gt; 授权方法doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="comment">//在检查有没有授予权力时，会进入这个方法进行检查</span></span><br><span class="line">        <span class="comment">// 对进来的用户授予权力</span></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//对所有进入这个方法的用户授予user:add权限，所以所有用户都能访问需要这个权限的路径</span></span><br><span class="line"><span class="comment">//        info.addStringPermission(&quot;user:add&quot;);</span></span><br><span class="line">        <span class="comment">//获取当前用户对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//能够强行转换成User对象是因为在shiroFilterFactoryBean过滤工厂中进行密码认证时将用户传递了进来</span></span><br><span class="line">        User currentUser = (User) subject.getPrincipal();</span><br><span class="line">        <span class="comment">//获取当前用户的权限信息来赋予当前用户，那么当前用户就只能访问用户有的权限的路径了</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>启动服务进行授权测试</li></ol><h4 id="整合thymeleaf"><a href="#整合thymeleaf" class="headerlink" title="整合thymeleaf"></a>整合thymeleaf</h4><p>整合thymeleaf就是要和前端做交互，用户有哪个权限，就显示对应权限能够点击进入对应页面的标签</p><ol><li>将ShiroDialect注入到容器中，用来整合shiro和thymeleaf，html页面才能使用shiro:hasPermission=”user:add”等方法获取到对应的值，shiro:hasPermission用来判断当前用户的权限是否拥有某个权限<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将shiro和thymeleaf整合交给springBoot管理</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改index前端页面(准备阶段已修改好)，但是这样的话如果没有登录的话，页面就什么都不会显示，也就没办法登录了<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果用户有user:add权限，那么就显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>我们在index页面编写一个登录标签(准备阶段已修改好)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果session中没有登录的用户，那么就显示登录标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在realm对象认账方法中，如果用户存在，就将用户名放到session中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//对比用户输入的用户名和密码数据是否正确</span></span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="comment">//如果用户名不正确，返回null，就会抛出用户名不存在的异常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取用户后，将用户user放到session中，用于登录和注销标签的额显示和隐藏</span></span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">Session session = subject.getSession();</span><br><span class="line">session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br></pre></td></tr></table></figure></li><li>启动服务，进行测试</li></ol><h4 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h4><ol><li>在index页面添加logout退出标签(准备阶段已修改好)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果session中有登录的用户名，那么就显示注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser != null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写logout Controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前用户</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//用户退出</span></span><br><span class="line">    subject.logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务测试</li></ol><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>最后附上shiro和springBoot整合的目录结构<br><img src="/posts/1c025fc/%E7%9B%AE%E5%BD%95.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h5&gt;&lt;p&gt;本文描述了什么是shiro，以及shiro通过shiro的快速开始来初步了解shiro，然后shiro和springBoot的整合的环境，通过登录拦截，用户认证，请求授权，整合thymeleaf和用户注销来对shiro进行进一步的了解&lt;/p&gt;</summary>
    
    
    
    <category term="springBoot" scheme="https://yanxiaoblog.github.io/categories/springBoot/"/>
    
    
    <category term="spring" scheme="https://yanxiaoblog.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecrity</title>
    <link href="https://yanxiaoblog.github.io/posts/2a612659/"/>
    <id>https://yanxiaoblog.github.io/posts/2a612659/</id>
    <published>2021-11-13T21:58:09.000Z</published>
    <updated>2021-12-04T03:53:34.518Z</updated>
    
    <content type="html"><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>本文对springSecrity进行了初步了解，并对springSecrity和springBoot整合流程进行了描述</p><span id="more"></span><h4 id="安全简介"><a href="#安全简介" class="headerlink" title="安全简介"></a>安全简介</h4><p>在Web开发中，安全是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。————狂神说</p><h4 id="什么是springSecrity"><a href="#什么是springSecrity" class="headerlink" title="什么是springSecrity"></a>什么是springSecrity</h4><ul><li>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它是保护基于Spring的应用程序的事实标准。</li><li>SpringSecurity是一个框架，它关注于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正威力在于它可以多么容易地扩展以满足定制需求</li><li>一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。</li><li>springSecrity在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</li></ul><h4 id="springSecrity实验环境搭建"><a href="#springSecrity实验环境搭建" class="headerlink" title="springSecrity实验环境搭建"></a>springSecrity实验环境搭建</h4><ol><li>静态资源导入和依赖</li></ol><ul><li>jquery-3.1.1.min.js</li><li>semantic.min.js</li><li>导入依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>level页面的编写(此处以level1的1.html为例)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/tSmile/css/style.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;index::nav-menu&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Level-1-1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/jquery-3.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/semantic.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>index页面的编写<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/tSmile/css/style.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">id</span>=<span class="string">&quot;index-header-nav&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;nav-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui secondary menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果未登录，显示登录按钮--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果已登录，显示注销按钮和用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                        用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--注销--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign-out icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Spring Security Study<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui three column stackable grid&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--菜单根据用户的角色动态呈现--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/jquery-3.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/semantic.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>login页面的编写<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui placeholder segment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui column very relaxed stackable grid&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui form&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;user icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;lock icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住我</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui blue submit button&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui label&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">i</span>&gt;</span>注册</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">small</span>&gt;</span>blog.kuangstudy.com<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Spring Security Study<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/jquery-3.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/tSmile/js/semantic.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>style.css的编写<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1150px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#index-header-nav</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#blog-lable</span>&gt;<span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>静态资源具体目录如下<br><img src="/posts/2a612659/%E7%9B%AE%E5%BD%95.jpg"></li><li>controller的编写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level1/&#123;page&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level1</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level1/&quot;</span>+page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level2/&#123;page&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level2</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level2/&quot;</span>+page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level3/&#123;page&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level3</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level3/&quot;</span>+page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务，测试实验环境</li></ol><h4 id="springSecrity的认证和授权"><a href="#springSecrity的认证和授权" class="headerlink" title="springSecrity的认证和授权"></a>springSecrity的认证和授权</h4><p>在springSecrity中几个重要的类：  </p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式<br>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</li><li>“认证”（Authentication）: 身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</li><li>“授权” （Authorization）: 授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</li></ul><ol><li>引入springSecrity和thymeleaf和springSecurity的整合依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--thymeleaf和springSecurity的整合包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写springSecrity位置类，并定制授权规则<br>参考springSecrity官网：<a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/">https://docs.spring.io/spring-security/site/docs/current/reference/html5/</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于aop拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line"><span class="comment">//授权方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//链式编程</span></span><br><span class="line">    <span class="comment">//请求授权的规则</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            <span class="comment">// &quot;/&quot;下的即index页面允许所有人访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">            <span class="comment">//&quot;/level1/**&quot;目录下的所有资源要是vip1角色才能访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试，发现除了首页，其他页面都进不去，因为没有登录的角色，要进入其他页面，需要登录的角色拥有对应的权限才能进去</li><li>在授权方法中开启登录功能，跳到登录页面<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动没有授权默认会跳到登录页面，即跳转到/login页面</span></span><br><span class="line"><span class="comment">//自定义登录页面，记住页面中的表单中对应的name属性必须是username和password</span></span><br><span class="line"><span class="comment">//如果不是，那么就要用到usernameParameter(&quot;xxx&quot;)和passwordParameter(&quot;xxx&quot;)来接收对应的数据</span></span><br><span class="line"><span class="comment">//loginPage(&quot;/toLogin&quot;)跳转到这个登录页面</span></span><br><span class="line"><span class="comment">//loginProcessingUrl(&quot;/login&quot;):登陆表单提交请求,提交给springSecrity</span></span><br><span class="line">http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br></pre></td></tr></table></figure>注意：此处前端也要对应的跳转到/toLogin页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>重写认证方法，定义验证规则<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//认证方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//认证数据一般是从数据库中获取，此处演示的是从内存中获取的方法</span></span><br><span class="line">    <span class="comment">//在定义用户的密码时，要调用对密码进行编码加密的方法，如果不调用，那么springboot会认为密码不安全，会报错</span></span><br><span class="line">    auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">        <span class="comment">//在内存中存储一个用户名为admin，密码为123456，角色为vip1的用户</span></span><br><span class="line">        .withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">        <span class="comment">//可以通过and()方法来存储多个用户</span></span><br><span class="line">        .and()</span><br><span class="line">        <span class="comment">//用户的角色可以有多个</span></span><br><span class="line">        .withUser(<span class="string">&quot;tSmile&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动服务进行测试，发现点到需要登录才能进去的页面会跳转到登录页面，然后可以输入我们定义的角色的用户名和密码进行登录，然后就可以访问角色的对应权限的页面了</li></ol><h4 id="注销功能"><a href="#注销功能" class="headerlink" title="注销功能"></a>注销功能</h4><ol><li>在授权方法中中开启注销功能<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注销功能</span></span><br><span class="line">        <span class="comment">//关闭csrf防止网站工具，get、post请求都可以注销,如果不关闭，那么就会包404错误，因为现在的注销请求是get请求</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">//注销成功后跳转到首页</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>在首页添加注销按钮(上面的首页已添加)</li><li>启动服务进行测试</li></ol><h4 id="控制访问"><a href="#控制访问" class="headerlink" title="控制访问"></a>控制访问</h4><p>当没有用户登录登录时，页面只显示登录按钮，当用户登录后，只显示注销按钮和用户信息，并且没登录时看不大任何要登录才能看到的模块，登录后只显示登录用户拥有权限的模块，这个功能怎么实现呢？这就需要我们结合thymeleaf的一些功能进行实现了</p><ol><li>导入thymeleaf和springSecrity的整合包(上面已经导入)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf和springSecurity的整合包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改前端页面</li></ol><ul><li>导入命名空间<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>修改登录模块<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果未登录，显示登录按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果已登录，显示注销按钮和用户名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注销--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign-out icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改菜单的显示<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--菜单根据用户的角色动态呈现--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--角色有vip1权限，这个菜单显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--角色有vip2权限，这个菜单显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--角色有vip3权限，这个菜单显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>启动服务进行测试 </li></ol><h4 id="记住我功能"><a href="#记住我功能" class="headerlink" title="记住我功能"></a>记住我功能</h4><ol><li>在授权方法中开启记住我功能<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启记住我功能,使用名字叫remember-me的cookie来保存登录信息，并且有效期为两周</span></span><br><span class="line"><span class="comment">//如果将用户信息放在List集合中，那么只有最后一个元素可以点击记住我并登录成功</span></span><br><span class="line"><span class="comment">//如果不使用list存放用户信息，那么都可以点击记住我并登录</span></span><br><span class="line"><span class="comment">//接收name=remember的数据信息</span></span><br><span class="line">http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>修改登录页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住我</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>启动服务进行测试<br><img src="/posts/2a612659/remember.jpg"></li><li>原理：<br>记住我功能就是将用户保存为一个cookie，cookie的有效期为14天，这样在14天内就能够直接登陆，而不需要每次退出浏览器后重新进来有要重新登录。<h4 id="完整springSecrity配置代码"><a href="#完整springSecrity配置代码" class="headerlink" title="完整springSecrity配置代码"></a>完整springSecrity配置代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于aop拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// &quot;/&quot;下的即index页面允许所有人访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">//&quot;/level1/**&quot;目录下的所有资源要是vip1角色才能访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">        <span class="comment">//启动没有授权默认会跳到登录页面，即跳转到/login页面</span></span><br><span class="line">        <span class="comment">//自定义登录页面，记住页面中的表单中对应的name属性必须是username和password</span></span><br><span class="line">        <span class="comment">//如果不是，那么就要用到usernameParameter(&quot;xxx&quot;)和passwordParameter(&quot;xxx&quot;)来接收对应的数据</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注销功能</span></span><br><span class="line">        <span class="comment">//关闭csrf防止网站工具，get、post请求都可以注销,如果不关闭，那么就会包404错误，因为现在的注销请求是get请求</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启记住我功能,使用名字叫remember-me的cookie来保存登录信息，并且有效期为两周</span></span><br><span class="line">        <span class="comment">//如果将用户信息放在List集合中，那么只有最后一个元素可以点击记住我并登录成功</span></span><br><span class="line">        <span class="comment">//如果不使用list存放用户信息，那么都可以点击记住我并登录</span></span><br><span class="line">        <span class="comment">//接收name=remember的数据信息</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//认证数据一般是从数据库中获取，此处演示的是从内存中获取的方法</span></span><br><span class="line">            <span class="comment">//要调用对密码进行编码加密的方法，如果不调用，那么springboot会认为密码不安全，会报错</span></span><br><span class="line">            auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                    .withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                    <span class="comment">//可以通过and()方法来存储多个用户</span></span><br><span class="line">                    .and()</span><br><span class="line"><span class="comment">//                    //用户的角色可以有多个</span></span><br><span class="line">                    .withUser(<span class="string">&quot;tSmile&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h5&gt;&lt;p&gt;本文对springSecrity进行了初步了解，并对springSecrity和springBoot整合流程进行了描述&lt;/p&gt;</summary>
    
    
    
    <category term="springBoot" scheme="https://yanxiaoblog.github.io/categories/springBoot/"/>
    
    
    <category term="spring" scheme="https://yanxiaoblog.github.io/tags/spring/"/>
    
  </entry>
  
</feed>
